
Test FIR filter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000190  00800100  0000064a  000006de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800290  00800290  0000086e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c56  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b01  00000000  00000000  0000155e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000347  00000000  00000000  0000205f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f1  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000083  00000000  00000000  000029f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	12 e0       	ldi	r17, 0x02	; 2
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea e4       	ldi	r30, 0x4A	; 74
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 39       	cpi	r26, 0x90	; 144
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	a0 e9       	ldi	r26, 0x90	; 144
  a2:	b2 e0       	ldi	r27, 0x02	; 2
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a1 39       	cpi	r26, 0x91	; 145
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 23 03 	jmp	0x646	; 0x646 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
	#define bit_set(p,m)		((p) |= (m))
	#define bit_clear(p,m)		((p) &= ~(m))
	#define BIT(x)				(0x01 << (x))

int main(void)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	c7 53       	subi	r28, 0x37	; 55
  c4:	d3 40       	sbci	r29, 0x03	; 3
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
 
	bit_set(DDRD, BIT(1));
  d0:	8a e2       	ldi	r24, 0x2A	; 42
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2a e2       	ldi	r18, 0x2A	; 42
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	20 81       	ld	r18, Z
  dc:	22 60       	ori	r18, 0x02	; 2
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	bit_set(DDRD, BIT(7));
  e2:	8a e2       	ldi	r24, 0x2A	; 42
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2a e2       	ldi	r18, 0x2A	; 42
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	20 68       	ori	r18, 0x80	; 128
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
	bit_set(PORTD, BIT(1)); 
  f4:	8b e2       	ldi	r24, 0x2B	; 43
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	2b e2       	ldi	r18, 0x2B	; 43
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	20 81       	ld	r18, Z
 100:	22 60       	ori	r18, 0x02	; 2
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
	//bit_set(PORTD, BIT(7));
	
	uint8_t i; 
	float buffer[FILTER_LENGTH];
	float result; 
	float input = 180; 
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	a4 e3       	ldi	r26, 0x34	; 52
 10c:	b3 e4       	ldi	r27, 0x43	; 67
 10e:	8e 83       	std	Y+6, r24	; 0x06
 110:	9f 83       	std	Y+7, r25	; 0x07
 112:	a8 87       	std	Y+8, r26	; 0x08
 114:	b9 87       	std	Y+9, r27	; 0x09
	float coefficient[FILTER_LENGTH] = {1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45,1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45,1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45,1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45,1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45, 1.45, 4.243, 567.3, 2.454, 23.45}; 
 116:	9e 01       	movw	r18, r28
 118:	28 55       	subi	r18, 0x58	; 88
 11a:	3e 4f       	sbci	r19, 0xFE	; 254
 11c:	80 e9       	ldi	r24, 0x90	; 144
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	e0 e0       	ldi	r30, 0x00	; 0
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	d9 01       	movw	r26, r18
 126:	01 90       	ld	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x6c>
    /* Replace with your application code */
    while (1) 
    {

	//bit_set(PORTD, BIT(7));
	result = 0; 
 12e:	1a 82       	std	Y+2, r1	; 0x02
 130:	1b 82       	std	Y+3, r1	; 0x03
 132:	1c 82       	std	Y+4, r1	; 0x04
 134:	1d 82       	std	Y+5, r1	; 0x05
	bit_set(PORTD, BIT(7)); 
 136:	8b e2       	ldi	r24, 0x2B	; 43
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2b e2       	ldi	r18, 0x2B	; 43
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	20 81       	ld	r18, Z
 142:	20 68       	ori	r18, 0x80	; 128
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
	buffer[whereToStoreNext] = result; 
 148:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end>
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	9e 01       	movw	r18, r28
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	82 0f       	add	r24, r18
 160:	93 1f       	adc	r25, r19
 162:	9c 01       	movw	r18, r24
 164:	29 5e       	subi	r18, 0xE9	; 233
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	9b 81       	ldd	r25, Y+3	; 0x03
 16c:	ac 81       	ldd	r26, Y+4	; 0x04
 16e:	bd 81       	ldd	r27, Y+5	; 0x05
 170:	f9 01       	movw	r30, r18
 172:	80 83       	st	Z, r24
 174:	91 83       	std	Z+1, r25	; 0x01
 176:	a2 83       	std	Z+2, r26	; 0x02
 178:	b3 83       	std	Z+3, r27	; 0x03
	//bit_clear(PORTD, BIT(1));
	for(i = 0; i < FILTER_LENGTH; i++)
 17a:	19 82       	std	Y+1, r1	; 0x01
 17c:	43 c0       	rjmp	.+134    	; 0x204 <main+0x14a>
	{
	updatePointer();
 17e:	0e 94 84 01 	call	0x308	; 0x308 <updatePointer>
	result += buffer[whereToStoreNext] * coefficient[FILTER_LENGTH-(i+1)]; 
 182:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end>
 186:	88 2f       	mov	r24, r24
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	9e 01       	movw	r18, r28
 194:	2f 5f       	subi	r18, 0xFF	; 255
 196:	3f 4f       	sbci	r19, 0xFF	; 255
 198:	82 0f       	add	r24, r18
 19a:	93 1f       	adc	r25, r19
 19c:	47 96       	adiw	r24, 0x17	; 23
 19e:	fc 01       	movw	r30, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	91 81       	ldd	r25, Z+1	; 0x01
 1a4:	a2 81       	ldd	r26, Z+2	; 0x02
 1a6:	b3 81       	ldd	r27, Z+3	; 0x03
 1a8:	29 81       	ldd	r18, Y+1	; 0x01
 1aa:	22 2f       	mov	r18, r18
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	43 e6       	ldi	r20, 0x63	; 99
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	ba 01       	movw	r22, r20
 1b4:	62 1b       	sub	r22, r18
 1b6:	73 0b       	sbc	r23, r19
 1b8:	9b 01       	movw	r18, r22
 1ba:	ae 01       	movw	r20, r28
 1bc:	48 55       	subi	r20, 0x58	; 88
 1be:	5e 4f       	sbci	r21, 0xFE	; 254
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	22 0f       	add	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	24 0f       	add	r18, r20
 1ca:	35 1f       	adc	r19, r21
 1cc:	f9 01       	movw	r30, r18
 1ce:	20 81       	ld	r18, Z
 1d0:	31 81       	ldd	r19, Z+1	; 0x01
 1d2:	42 81       	ldd	r20, Z+2	; 0x02
 1d4:	53 81       	ldd	r21, Z+3	; 0x03
 1d6:	bc 01       	movw	r22, r24
 1d8:	cd 01       	movw	r24, r26
 1da:	0e 94 b6 02 	call	0x56c	; 0x56c <__mulsf3>
 1de:	dc 01       	movw	r26, r24
 1e0:	cb 01       	movw	r24, r22
 1e2:	9c 01       	movw	r18, r24
 1e4:	ad 01       	movw	r20, r26
 1e6:	6a 81       	ldd	r22, Y+2	; 0x02
 1e8:	7b 81       	ldd	r23, Y+3	; 0x03
 1ea:	8c 81       	ldd	r24, Y+4	; 0x04
 1ec:	9d 81       	ldd	r25, Y+5	; 0x05
 1ee:	0e 94 9c 01 	call	0x338	; 0x338 <__addsf3>
 1f2:	dc 01       	movw	r26, r24
 1f4:	cb 01       	movw	r24, r22
 1f6:	8a 83       	std	Y+2, r24	; 0x02
 1f8:	9b 83       	std	Y+3, r25	; 0x03
 1fa:	ac 83       	std	Y+4, r26	; 0x04
 1fc:	bd 83       	std	Y+5, r27	; 0x05
	//bit_set(PORTD, BIT(7));
	result = 0; 
	bit_set(PORTD, BIT(7)); 
	buffer[whereToStoreNext] = result; 
	//bit_clear(PORTD, BIT(1));
	for(i = 0; i < FILTER_LENGTH; i++)
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	8f 5f       	subi	r24, 0xFF	; 255
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	84 36       	cpi	r24, 0x64	; 100
 208:	08 f4       	brcc	.+2      	; 0x20c <main+0x152>
 20a:	b9 cf       	rjmp	.-142    	; 0x17e <main+0xc4>
	{
	updatePointer();
	result += buffer[whereToStoreNext] * coefficient[FILTER_LENGTH-(i+1)]; 
    }
	updatePointer(); 
 20c:	0e 94 84 01 	call	0x308	; 0x308 <updatePointer>

	bit_clear(PORTD, BIT(7));
 210:	8b e2       	ldi	r24, 0x2B	; 43
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	2b e2       	ldi	r18, 0x2B	; 43
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	f9 01       	movw	r30, r18
 21a:	20 81       	ld	r18, Z
 21c:	2f 77       	andi	r18, 0x7F	; 127
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	a0 ef       	ldi	r26, 0xF0	; 240
 228:	b1 e4       	ldi	r27, 0x41	; 65
 22a:	8a 87       	std	Y+10, r24	; 0x0a
 22c:	9b 87       	std	Y+11, r25	; 0x0b
 22e:	ac 87       	std	Y+12, r26	; 0x0c
 230:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	4a e7       	ldi	r20, 0x7A	; 122
 238:	53 e4       	ldi	r21, 0x43	; 67
 23a:	6a 85       	ldd	r22, Y+10	; 0x0a
 23c:	7b 85       	ldd	r23, Y+11	; 0x0b
 23e:	8c 85       	ldd	r24, Y+12	; 0x0c
 240:	9d 85       	ldd	r25, Y+13	; 0x0d
 242:	0e 94 b6 02 	call	0x56c	; 0x56c <__mulsf3>
 246:	dc 01       	movw	r26, r24
 248:	cb 01       	movw	r24, r22
 24a:	8e 87       	std	Y+14, r24	; 0x0e
 24c:	9f 87       	std	Y+15, r25	; 0x0f
 24e:	a8 8b       	std	Y+16, r26	; 0x10
 250:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	40 e8       	ldi	r20, 0x80	; 128
 258:	5f e3       	ldi	r21, 0x3F	; 63
 25a:	6e 85       	ldd	r22, Y+14	; 0x0e
 25c:	7f 85       	ldd	r23, Y+15	; 0x0f
 25e:	88 89       	ldd	r24, Y+16	; 0x10
 260:	99 89       	ldd	r25, Y+17	; 0x11
 262:	0e 94 08 02 	call	0x410	; 0x410 <__cmpsf2>
 266:	88 23       	and	r24, r24
 268:	2c f4       	brge	.+10     	; 0x274 <main+0x1ba>
		__ticks = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9b 8b       	std	Y+19, r25	; 0x13
 270:	8a 8b       	std	Y+18, r24	; 0x12
 272:	3f c0       	rjmp	.+126    	; 0x2f2 <main+0x238>
	else if (__tmp > 65535)
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	3f ef       	ldi	r19, 0xFF	; 255
 278:	4f e7       	ldi	r20, 0x7F	; 127
 27a:	57 e4       	ldi	r21, 0x47	; 71
 27c:	6e 85       	ldd	r22, Y+14	; 0x0e
 27e:	7f 85       	ldd	r23, Y+15	; 0x0f
 280:	88 89       	ldd	r24, Y+16	; 0x10
 282:	99 89       	ldd	r25, Y+17	; 0x11
 284:	0e 94 b1 02 	call	0x562	; 0x562 <__gesf2>
 288:	18 16       	cp	r1, r24
 28a:	4c f5       	brge	.+82     	; 0x2de <main+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	40 e2       	ldi	r20, 0x20	; 32
 292:	51 e4       	ldi	r21, 0x41	; 65
 294:	6a 85       	ldd	r22, Y+10	; 0x0a
 296:	7b 85       	ldd	r23, Y+11	; 0x0b
 298:	8c 85       	ldd	r24, Y+12	; 0x0c
 29a:	9d 85       	ldd	r25, Y+13	; 0x0d
 29c:	0e 94 b6 02 	call	0x56c	; 0x56c <__mulsf3>
 2a0:	dc 01       	movw	r26, r24
 2a2:	cb 01       	movw	r24, r22
 2a4:	bc 01       	movw	r22, r24
 2a6:	cd 01       	movw	r24, r26
 2a8:	0e 94 0d 02 	call	0x41a	; 0x41a <__fixunssfsi>
 2ac:	dc 01       	movw	r26, r24
 2ae:	cb 01       	movw	r24, r22
 2b0:	9b 8b       	std	Y+19, r25	; 0x13
 2b2:	8a 8b       	std	Y+18, r24	; 0x12
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <main+0x21a>
 2b6:	89 e1       	ldi	r24, 0x19	; 25
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	9d 8b       	std	Y+21, r25	; 0x15
 2bc:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2be:	8c 89       	ldd	r24, Y+20	; 0x14
 2c0:	9d 89       	ldd	r25, Y+21	; 0x15
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x208>
 2c6:	9d 8b       	std	Y+21, r25	; 0x15
 2c8:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ca:	8a 89       	ldd	r24, Y+18	; 0x12
 2cc:	9b 89       	ldd	r25, Y+19	; 0x13
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	9b 8b       	std	Y+19, r25	; 0x13
 2d2:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d4:	8a 89       	ldd	r24, Y+18	; 0x12
 2d6:	9b 89       	ldd	r25, Y+19	; 0x13
 2d8:	89 2b       	or	r24, r25
 2da:	69 f7       	brne	.-38     	; 0x2b6 <main+0x1fc>
 2dc:	14 c0       	rjmp	.+40     	; 0x306 <main+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2de:	6e 85       	ldd	r22, Y+14	; 0x0e
 2e0:	7f 85       	ldd	r23, Y+15	; 0x0f
 2e2:	88 89       	ldd	r24, Y+16	; 0x10
 2e4:	99 89       	ldd	r25, Y+17	; 0x11
 2e6:	0e 94 0d 02 	call	0x41a	; 0x41a <__fixunssfsi>
 2ea:	dc 01       	movw	r26, r24
 2ec:	cb 01       	movw	r24, r22
 2ee:	9b 8b       	std	Y+19, r25	; 0x13
 2f0:	8a 8b       	std	Y+18, r24	; 0x12
 2f2:	8a 89       	ldd	r24, Y+18	; 0x12
 2f4:	9b 89       	ldd	r25, Y+19	; 0x13
 2f6:	9f 8b       	std	Y+23, r25	; 0x17
 2f8:	8e 8b       	std	Y+22, r24	; 0x16
 2fa:	8e 89       	ldd	r24, Y+22	; 0x16
 2fc:	9f 89       	ldd	r25, Y+23	; 0x17
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <main+0x244>
 302:	9f 8b       	std	Y+23, r25	; 0x17
 304:	8e 8b       	std	Y+22, r24	; 0x16
	_delay_ms(30); 
}
 306:	13 cf       	rjmp	.-474    	; 0x12e <main+0x74>

00000308 <updatePointer>:

}

void updatePointer(void)
{
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
	whereToStoreNext++;
 310:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end>
 314:	8f 5f       	subi	r24, 0xFF	; 255
 316:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <__data_end>

	if (whereToStoreNext-1 > FILTER_LENGTH)
 31a:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end>
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	85 36       	cpi	r24, 0x65	; 101
 326:	91 05       	cpc	r25, r1
 328:	14 f0       	brlt	.+4      	; 0x32e <updatePointer+0x26>
	{
	whereToStoreNext = 0; 
 32a:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <__data_end>
	}
}
 32e:	00 00       	nop
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <__subsf3>:
 336:	50 58       	subi	r21, 0x80	; 128

00000338 <__addsf3>:
 338:	bb 27       	eor	r27, r27
 33a:	aa 27       	eor	r26, r26
 33c:	0e 94 b3 01 	call	0x366	; 0x366 <__addsf3x>
 340:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_round>
 344:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fp_pscA>
 348:	38 f0       	brcs	.+14     	; 0x358 <__addsf3+0x20>
 34a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_pscB>
 34e:	20 f0       	brcs	.+8      	; 0x358 <__addsf3+0x20>
 350:	39 f4       	brne	.+14     	; 0x360 <__addsf3+0x28>
 352:	9f 3f       	cpi	r25, 0xFF	; 255
 354:	19 f4       	brne	.+6      	; 0x35c <__addsf3+0x24>
 356:	26 f4       	brtc	.+8      	; 0x360 <__addsf3+0x28>
 358:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__fp_nan>
 35c:	0e f4       	brtc	.+2      	; 0x360 <__addsf3+0x28>
 35e:	e0 95       	com	r30
 360:	e7 fb       	bst	r30, 7
 362:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__fp_inf>

00000366 <__addsf3x>:
 366:	e9 2f       	mov	r30, r25
 368:	0e 94 88 02 	call	0x510	; 0x510 <__fp_split3>
 36c:	58 f3       	brcs	.-42     	; 0x344 <__addsf3+0xc>
 36e:	ba 17       	cp	r27, r26
 370:	62 07       	cpc	r22, r18
 372:	73 07       	cpc	r23, r19
 374:	84 07       	cpc	r24, r20
 376:	95 07       	cpc	r25, r21
 378:	20 f0       	brcs	.+8      	; 0x382 <__addsf3x+0x1c>
 37a:	79 f4       	brne	.+30     	; 0x39a <__addsf3x+0x34>
 37c:	a6 f5       	brtc	.+104    	; 0x3e6 <__addsf3x+0x80>
 37e:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_zero>
 382:	0e f4       	brtc	.+2      	; 0x386 <__addsf3x+0x20>
 384:	e0 95       	com	r30
 386:	0b 2e       	mov	r0, r27
 388:	ba 2f       	mov	r27, r26
 38a:	a0 2d       	mov	r26, r0
 38c:	0b 01       	movw	r0, r22
 38e:	b9 01       	movw	r22, r18
 390:	90 01       	movw	r18, r0
 392:	0c 01       	movw	r0, r24
 394:	ca 01       	movw	r24, r20
 396:	a0 01       	movw	r20, r0
 398:	11 24       	eor	r1, r1
 39a:	ff 27       	eor	r31, r31
 39c:	59 1b       	sub	r21, r25
 39e:	99 f0       	breq	.+38     	; 0x3c6 <__addsf3x+0x60>
 3a0:	59 3f       	cpi	r21, 0xF9	; 249
 3a2:	50 f4       	brcc	.+20     	; 0x3b8 <__addsf3x+0x52>
 3a4:	50 3e       	cpi	r21, 0xE0	; 224
 3a6:	68 f1       	brcs	.+90     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3a8:	1a 16       	cp	r1, r26
 3aa:	f0 40       	sbci	r31, 0x00	; 0
 3ac:	a2 2f       	mov	r26, r18
 3ae:	23 2f       	mov	r18, r19
 3b0:	34 2f       	mov	r19, r20
 3b2:	44 27       	eor	r20, r20
 3b4:	58 5f       	subi	r21, 0xF8	; 248
 3b6:	f3 cf       	rjmp	.-26     	; 0x39e <__addsf3x+0x38>
 3b8:	46 95       	lsr	r20
 3ba:	37 95       	ror	r19
 3bc:	27 95       	ror	r18
 3be:	a7 95       	ror	r26
 3c0:	f0 40       	sbci	r31, 0x00	; 0
 3c2:	53 95       	inc	r21
 3c4:	c9 f7       	brne	.-14     	; 0x3b8 <__addsf3x+0x52>
 3c6:	7e f4       	brtc	.+30     	; 0x3e6 <__addsf3x+0x80>
 3c8:	1f 16       	cp	r1, r31
 3ca:	ba 0b       	sbc	r27, r26
 3cc:	62 0b       	sbc	r22, r18
 3ce:	73 0b       	sbc	r23, r19
 3d0:	84 0b       	sbc	r24, r20
 3d2:	ba f0       	brmi	.+46     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3d4:	91 50       	subi	r25, 0x01	; 1
 3d6:	a1 f0       	breq	.+40     	; 0x400 <__LOCK_REGION_LENGTH__>
 3d8:	ff 0f       	add	r31, r31
 3da:	bb 1f       	adc	r27, r27
 3dc:	66 1f       	adc	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	88 1f       	adc	r24, r24
 3e2:	c2 f7       	brpl	.-16     	; 0x3d4 <__addsf3x+0x6e>
 3e4:	0e c0       	rjmp	.+28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e6:	ba 0f       	add	r27, r26
 3e8:	62 1f       	adc	r22, r18
 3ea:	73 1f       	adc	r23, r19
 3ec:	84 1f       	adc	r24, r20
 3ee:	48 f4       	brcc	.+18     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f0:	87 95       	ror	r24
 3f2:	77 95       	ror	r23
 3f4:	67 95       	ror	r22
 3f6:	b7 95       	ror	r27
 3f8:	f7 95       	ror	r31
 3fa:	9e 3f       	cpi	r25, 0xFE	; 254
 3fc:	08 f0       	brcs	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	b0 cf       	rjmp	.-160    	; 0x360 <__addsf3+0x28>
 400:	93 95       	inc	r25
 402:	88 0f       	add	r24, r24
 404:	08 f0       	brcs	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	99 27       	eor	r25, r25
 408:	ee 0f       	add	r30, r30
 40a:	97 95       	ror	r25
 40c:	87 95       	ror	r24
 40e:	08 95       	ret

00000410 <__cmpsf2>:
 410:	0e 94 3c 02 	call	0x478	; 0x478 <__fp_cmp>
 414:	08 f4       	brcc	.+2      	; 0x418 <__cmpsf2+0x8>
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	08 95       	ret

0000041a <__fixunssfsi>:
 41a:	0e 94 90 02 	call	0x520	; 0x520 <__fp_splitA>
 41e:	88 f0       	brcs	.+34     	; 0x442 <__fixunssfsi+0x28>
 420:	9f 57       	subi	r25, 0x7F	; 127
 422:	98 f0       	brcs	.+38     	; 0x44a <__fixunssfsi+0x30>
 424:	b9 2f       	mov	r27, r25
 426:	99 27       	eor	r25, r25
 428:	b7 51       	subi	r27, 0x17	; 23
 42a:	b0 f0       	brcs	.+44     	; 0x458 <__fixunssfsi+0x3e>
 42c:	e1 f0       	breq	.+56     	; 0x466 <__fixunssfsi+0x4c>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	88 1f       	adc	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	1a f0       	brmi	.+6      	; 0x43e <__fixunssfsi+0x24>
 438:	ba 95       	dec	r27
 43a:	c9 f7       	brne	.-14     	; 0x42e <__fixunssfsi+0x14>
 43c:	14 c0       	rjmp	.+40     	; 0x466 <__fixunssfsi+0x4c>
 43e:	b1 30       	cpi	r27, 0x01	; 1
 440:	91 f0       	breq	.+36     	; 0x466 <__fixunssfsi+0x4c>
 442:	0e 94 aa 02 	call	0x554	; 0x554 <__fp_zero>
 446:	b1 e0       	ldi	r27, 0x01	; 1
 448:	08 95       	ret
 44a:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_zero>
 44e:	67 2f       	mov	r22, r23
 450:	78 2f       	mov	r23, r24
 452:	88 27       	eor	r24, r24
 454:	b8 5f       	subi	r27, 0xF8	; 248
 456:	39 f0       	breq	.+14     	; 0x466 <__fixunssfsi+0x4c>
 458:	b9 3f       	cpi	r27, 0xF9	; 249
 45a:	cc f3       	brlt	.-14     	; 0x44e <__fixunssfsi+0x34>
 45c:	86 95       	lsr	r24
 45e:	77 95       	ror	r23
 460:	67 95       	ror	r22
 462:	b3 95       	inc	r27
 464:	d9 f7       	brne	.-10     	; 0x45c <__fixunssfsi+0x42>
 466:	3e f4       	brtc	.+14     	; 0x476 <__fixunssfsi+0x5c>
 468:	90 95       	com	r25
 46a:	80 95       	com	r24
 46c:	70 95       	com	r23
 46e:	61 95       	neg	r22
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	8f 4f       	sbci	r24, 0xFF	; 255
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	08 95       	ret

00000478 <__fp_cmp>:
 478:	99 0f       	add	r25, r25
 47a:	00 08       	sbc	r0, r0
 47c:	55 0f       	add	r21, r21
 47e:	aa 0b       	sbc	r26, r26
 480:	e0 e8       	ldi	r30, 0x80	; 128
 482:	fe ef       	ldi	r31, 0xFE	; 254
 484:	16 16       	cp	r1, r22
 486:	17 06       	cpc	r1, r23
 488:	e8 07       	cpc	r30, r24
 48a:	f9 07       	cpc	r31, r25
 48c:	c0 f0       	brcs	.+48     	; 0x4be <__fp_cmp+0x46>
 48e:	12 16       	cp	r1, r18
 490:	13 06       	cpc	r1, r19
 492:	e4 07       	cpc	r30, r20
 494:	f5 07       	cpc	r31, r21
 496:	98 f0       	brcs	.+38     	; 0x4be <__fp_cmp+0x46>
 498:	62 1b       	sub	r22, r18
 49a:	73 0b       	sbc	r23, r19
 49c:	84 0b       	sbc	r24, r20
 49e:	95 0b       	sbc	r25, r21
 4a0:	39 f4       	brne	.+14     	; 0x4b0 <__fp_cmp+0x38>
 4a2:	0a 26       	eor	r0, r26
 4a4:	61 f0       	breq	.+24     	; 0x4be <__fp_cmp+0x46>
 4a6:	23 2b       	or	r18, r19
 4a8:	24 2b       	or	r18, r20
 4aa:	25 2b       	or	r18, r21
 4ac:	21 f4       	brne	.+8      	; 0x4b6 <__fp_cmp+0x3e>
 4ae:	08 95       	ret
 4b0:	0a 26       	eor	r0, r26
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <__fp_cmp+0x3e>
 4b4:	a1 40       	sbci	r26, 0x01	; 1
 4b6:	a6 95       	lsr	r26
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	81 1d       	adc	r24, r1
 4bc:	81 1d       	adc	r24, r1
 4be:	08 95       	ret

000004c0 <__fp_inf>:
 4c0:	97 f9       	bld	r25, 7
 4c2:	9f 67       	ori	r25, 0x7F	; 127
 4c4:	80 e8       	ldi	r24, 0x80	; 128
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	08 95       	ret

000004cc <__fp_nan>:
 4cc:	9f ef       	ldi	r25, 0xFF	; 255
 4ce:	80 ec       	ldi	r24, 0xC0	; 192
 4d0:	08 95       	ret

000004d2 <__fp_pscA>:
 4d2:	00 24       	eor	r0, r0
 4d4:	0a 94       	dec	r0
 4d6:	16 16       	cp	r1, r22
 4d8:	17 06       	cpc	r1, r23
 4da:	18 06       	cpc	r1, r24
 4dc:	09 06       	cpc	r0, r25
 4de:	08 95       	ret

000004e0 <__fp_pscB>:
 4e0:	00 24       	eor	r0, r0
 4e2:	0a 94       	dec	r0
 4e4:	12 16       	cp	r1, r18
 4e6:	13 06       	cpc	r1, r19
 4e8:	14 06       	cpc	r1, r20
 4ea:	05 06       	cpc	r0, r21
 4ec:	08 95       	ret

000004ee <__fp_round>:
 4ee:	09 2e       	mov	r0, r25
 4f0:	03 94       	inc	r0
 4f2:	00 0c       	add	r0, r0
 4f4:	11 f4       	brne	.+4      	; 0x4fa <__fp_round+0xc>
 4f6:	88 23       	and	r24, r24
 4f8:	52 f0       	brmi	.+20     	; 0x50e <__fp_round+0x20>
 4fa:	bb 0f       	add	r27, r27
 4fc:	40 f4       	brcc	.+16     	; 0x50e <__fp_round+0x20>
 4fe:	bf 2b       	or	r27, r31
 500:	11 f4       	brne	.+4      	; 0x506 <__fp_round+0x18>
 502:	60 ff       	sbrs	r22, 0
 504:	04 c0       	rjmp	.+8      	; 0x50e <__fp_round+0x20>
 506:	6f 5f       	subi	r22, 0xFF	; 255
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	8f 4f       	sbci	r24, 0xFF	; 255
 50c:	9f 4f       	sbci	r25, 0xFF	; 255
 50e:	08 95       	ret

00000510 <__fp_split3>:
 510:	57 fd       	sbrc	r21, 7
 512:	90 58       	subi	r25, 0x80	; 128
 514:	44 0f       	add	r20, r20
 516:	55 1f       	adc	r21, r21
 518:	59 f0       	breq	.+22     	; 0x530 <__fp_splitA+0x10>
 51a:	5f 3f       	cpi	r21, 0xFF	; 255
 51c:	71 f0       	breq	.+28     	; 0x53a <__fp_splitA+0x1a>
 51e:	47 95       	ror	r20

00000520 <__fp_splitA>:
 520:	88 0f       	add	r24, r24
 522:	97 fb       	bst	r25, 7
 524:	99 1f       	adc	r25, r25
 526:	61 f0       	breq	.+24     	; 0x540 <__fp_splitA+0x20>
 528:	9f 3f       	cpi	r25, 0xFF	; 255
 52a:	79 f0       	breq	.+30     	; 0x54a <__fp_splitA+0x2a>
 52c:	87 95       	ror	r24
 52e:	08 95       	ret
 530:	12 16       	cp	r1, r18
 532:	13 06       	cpc	r1, r19
 534:	14 06       	cpc	r1, r20
 536:	55 1f       	adc	r21, r21
 538:	f2 cf       	rjmp	.-28     	; 0x51e <__fp_split3+0xe>
 53a:	46 95       	lsr	r20
 53c:	f1 df       	rcall	.-30     	; 0x520 <__fp_splitA>
 53e:	08 c0       	rjmp	.+16     	; 0x550 <__fp_splitA+0x30>
 540:	16 16       	cp	r1, r22
 542:	17 06       	cpc	r1, r23
 544:	18 06       	cpc	r1, r24
 546:	99 1f       	adc	r25, r25
 548:	f1 cf       	rjmp	.-30     	; 0x52c <__fp_splitA+0xc>
 54a:	86 95       	lsr	r24
 54c:	71 05       	cpc	r23, r1
 54e:	61 05       	cpc	r22, r1
 550:	08 94       	sec
 552:	08 95       	ret

00000554 <__fp_zero>:
 554:	e8 94       	clt

00000556 <__fp_szero>:
 556:	bb 27       	eor	r27, r27
 558:	66 27       	eor	r22, r22
 55a:	77 27       	eor	r23, r23
 55c:	cb 01       	movw	r24, r22
 55e:	97 f9       	bld	r25, 7
 560:	08 95       	ret

00000562 <__gesf2>:
 562:	0e 94 3c 02 	call	0x478	; 0x478 <__fp_cmp>
 566:	08 f4       	brcc	.+2      	; 0x56a <__gesf2+0x8>
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	08 95       	ret

0000056c <__mulsf3>:
 56c:	0e 94 c9 02 	call	0x592	; 0x592 <__mulsf3x>
 570:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_round>
 574:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fp_pscA>
 578:	38 f0       	brcs	.+14     	; 0x588 <__mulsf3+0x1c>
 57a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_pscB>
 57e:	20 f0       	brcs	.+8      	; 0x588 <__mulsf3+0x1c>
 580:	95 23       	and	r25, r21
 582:	11 f0       	breq	.+4      	; 0x588 <__mulsf3+0x1c>
 584:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__fp_inf>
 588:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__fp_nan>
 58c:	11 24       	eor	r1, r1
 58e:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_szero>

00000592 <__mulsf3x>:
 592:	0e 94 88 02 	call	0x510	; 0x510 <__fp_split3>
 596:	70 f3       	brcs	.-36     	; 0x574 <__mulsf3+0x8>

00000598 <__mulsf3_pse>:
 598:	95 9f       	mul	r25, r21
 59a:	c1 f3       	breq	.-16     	; 0x58c <__mulsf3+0x20>
 59c:	95 0f       	add	r25, r21
 59e:	50 e0       	ldi	r21, 0x00	; 0
 5a0:	55 1f       	adc	r21, r21
 5a2:	62 9f       	mul	r22, r18
 5a4:	f0 01       	movw	r30, r0
 5a6:	72 9f       	mul	r23, r18
 5a8:	bb 27       	eor	r27, r27
 5aa:	f0 0d       	add	r31, r0
 5ac:	b1 1d       	adc	r27, r1
 5ae:	63 9f       	mul	r22, r19
 5b0:	aa 27       	eor	r26, r26
 5b2:	f0 0d       	add	r31, r0
 5b4:	b1 1d       	adc	r27, r1
 5b6:	aa 1f       	adc	r26, r26
 5b8:	64 9f       	mul	r22, r20
 5ba:	66 27       	eor	r22, r22
 5bc:	b0 0d       	add	r27, r0
 5be:	a1 1d       	adc	r26, r1
 5c0:	66 1f       	adc	r22, r22
 5c2:	82 9f       	mul	r24, r18
 5c4:	22 27       	eor	r18, r18
 5c6:	b0 0d       	add	r27, r0
 5c8:	a1 1d       	adc	r26, r1
 5ca:	62 1f       	adc	r22, r18
 5cc:	73 9f       	mul	r23, r19
 5ce:	b0 0d       	add	r27, r0
 5d0:	a1 1d       	adc	r26, r1
 5d2:	62 1f       	adc	r22, r18
 5d4:	83 9f       	mul	r24, r19
 5d6:	a0 0d       	add	r26, r0
 5d8:	61 1d       	adc	r22, r1
 5da:	22 1f       	adc	r18, r18
 5dc:	74 9f       	mul	r23, r20
 5de:	33 27       	eor	r19, r19
 5e0:	a0 0d       	add	r26, r0
 5e2:	61 1d       	adc	r22, r1
 5e4:	23 1f       	adc	r18, r19
 5e6:	84 9f       	mul	r24, r20
 5e8:	60 0d       	add	r22, r0
 5ea:	21 1d       	adc	r18, r1
 5ec:	82 2f       	mov	r24, r18
 5ee:	76 2f       	mov	r23, r22
 5f0:	6a 2f       	mov	r22, r26
 5f2:	11 24       	eor	r1, r1
 5f4:	9f 57       	subi	r25, 0x7F	; 127
 5f6:	50 40       	sbci	r21, 0x00	; 0
 5f8:	9a f0       	brmi	.+38     	; 0x620 <__mulsf3_pse+0x88>
 5fa:	f1 f0       	breq	.+60     	; 0x638 <__mulsf3_pse+0xa0>
 5fc:	88 23       	and	r24, r24
 5fe:	4a f0       	brmi	.+18     	; 0x612 <__mulsf3_pse+0x7a>
 600:	ee 0f       	add	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	bb 1f       	adc	r27, r27
 606:	66 1f       	adc	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	91 50       	subi	r25, 0x01	; 1
 60e:	50 40       	sbci	r21, 0x00	; 0
 610:	a9 f7       	brne	.-22     	; 0x5fc <__mulsf3_pse+0x64>
 612:	9e 3f       	cpi	r25, 0xFE	; 254
 614:	51 05       	cpc	r21, r1
 616:	80 f0       	brcs	.+32     	; 0x638 <__mulsf3_pse+0xa0>
 618:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__fp_inf>
 61c:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_szero>
 620:	5f 3f       	cpi	r21, 0xFF	; 255
 622:	e4 f3       	brlt	.-8      	; 0x61c <__mulsf3_pse+0x84>
 624:	98 3e       	cpi	r25, 0xE8	; 232
 626:	d4 f3       	brlt	.-12     	; 0x61c <__mulsf3_pse+0x84>
 628:	86 95       	lsr	r24
 62a:	77 95       	ror	r23
 62c:	67 95       	ror	r22
 62e:	b7 95       	ror	r27
 630:	f7 95       	ror	r31
 632:	e7 95       	ror	r30
 634:	9f 5f       	subi	r25, 0xFF	; 255
 636:	c1 f7       	brne	.-16     	; 0x628 <__mulsf3_pse+0x90>
 638:	fe 2b       	or	r31, r30
 63a:	88 0f       	add	r24, r24
 63c:	91 1d       	adc	r25, r1
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret

00000646 <_exit>:
 646:	f8 94       	cli

00000648 <__stop_program>:
 648:	ff cf       	rjmp	.-2      	; 0x648 <__stop_program>
