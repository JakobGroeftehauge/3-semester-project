
First Can message.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bcb  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ae6  00000000  00000000  00000e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000397  00000000  00000000  0000193d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059c  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000086  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000232a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <extra_delay>:
		
    }
}

void extra_delay(uint8_t delaytimes){
	for (uint8_t i = delaytimes; i > 0; i--){
  94:	88 23       	and	r24, r24
  96:	41 f0       	breq	.+16     	; 0xa8 <extra_delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	e7 e8       	ldi	r30, 0x87	; 135
  9a:	f3 e1       	ldi	r31, 0x13	; 19
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <extra_delay+0x8>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <extra_delay+0xe>
  a2:	00 00       	nop
  a4:	81 50       	subi	r24, 0x01	; 1
  a6:	c1 f7       	brne	.-16     	; 0x98 <extra_delay+0x4>
  a8:	08 95       	ret

000000aa <main>:


int main(void)
{
	//***** Chip initialization
	DDRC = 4; //Set TXCAN as output and RXCAN as input
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	87 b9       	out	0x07, r24	; 7
	
	bit_set(DDRD, BIT(1));
  ae:	51 9a       	sbi	0x0a, 1	; 10
	bit_set(DDRD, BIT(7));
  b0:	57 9a       	sbi	0x0a, 7	; 10
	
	bit_set(PORTD, BIT(7));
  b2:	5f 9a       	sbi	0x0b, 7	; 11
	
	int8_t hello = 1;

//***** CAN initialization *****************************************************

	CANGCON = ( 1 << SWRES );   // Software reset. Has to be done independently from setting the CAN controller in Enable mode.
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

	CANTCON = 0x00;         // CAN timing prescaler set to 0;
  ba:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	CANBT1 = 0x02;      	// Set baud rate to 125kb (assuming 8Mhz IOclk)
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;          // "" See page 240 in the datasheet
  c4:	8c e0       	ldi	r24, 0x0C	; 12
  c6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x37; 			// ""
  ca:	87 e3       	ldi	r24, 0x37	; 55
  cc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	for ( int8_t mob=0; mob<6; mob++ ) {
  d0:	80 e0       	ldi	r24, 0x00	; 0

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-5
  d2:	cd ee       	ldi	r28, 0xED	; 237
  d4:	d0 e0       	ldi	r29, 0x00	; 0

		CANCDMOB = 0x00;       		// Disable mob
  d6:	af ee       	ldi	r26, 0xEF	; 239
  d8:	b0 e0       	ldi	r27, 0x00	; 0

		CANSTMOB = 0x00;     		// Clear mob status register;
  da:	ee ee       	ldi	r30, 0xEE	; 238
  dc:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT2 = 0x0C;          // "" See page 240 in the datasheet
	CANBT3 = 0x37; 			// ""

	for ( int8_t mob=0; mob<6; mob++ ) {

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-5
  de:	98 2f       	mov	r25, r24
  e0:	92 95       	swap	r25
  e2:	90 7f       	andi	r25, 0xF0	; 240
  e4:	98 83       	st	Y, r25

		CANCDMOB = 0x00;       		// Disable mob
  e6:	1c 92       	st	X, r1

		CANSTMOB = 0x00;     		// Clear mob status register;
  e8:	10 82       	st	Z, r1
  ea:	8f 5f       	subi	r24, 0xFF	; 255

	CANBT1 = 0x02;      	// Set baud rate to 125kb (assuming 8Mhz IOclk)
	CANBT2 = 0x0C;          // "" See page 240 in the datasheet
	CANBT3 = 0x37; 			// ""

	for ( int8_t mob=0; mob<6; mob++ ) {
  ec:	86 30       	cpi	r24, 0x06	; 6
  ee:	b9 f7       	brne	.-18     	; 0xde <main+0x34>
		CANCDMOB = 0x00;       		// Disable mob

		CANSTMOB = 0x00;     		// Clear mob status register;
	}

	CANPAGE = ( 1 << MOBNB0 );		// Select MOB1
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	CANIDM1 = 0x00;   	// Clear Mask, let all IDs pass
  f6:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

	CANIDM2 = 0x00; 	// ""
  fa:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANIDM3 = 0x00; 	// ""
  fe:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>

	CANIDM4 = 0x00; 	// ""
 102:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>

	CANGCON |= ( 1 << ENASTB );
 106:	e8 ed       	ldi	r30, 0xD8	; 216
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	80 83       	st	Z, r24
	    
    while (1) 
    {
		// Transmit
		CANPAGE = 0x00;		// Select MOb0 for transmission
 110:	0f 2e       	mov	r0, r31
 112:	fd ee       	ldi	r31, 0xED	; 237
 114:	af 2e       	mov	r10, r31
 116:	b1 2c       	mov	r11, r1
 118:	f0 2d       	mov	r31, r0
		
		while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
 11a:	cc ed       	ldi	r28, 0xDC	; 220
 11c:	d0 e0       	ldi	r29, 0x00	; 0
		
		CANSTMOB = 0x00;    	// Clear mob status register
 11e:	0f 2e       	mov	r0, r31
 120:	fe ee       	ldi	r31, 0xEE	; 238
 122:	cf 2e       	mov	r12, r31
 124:	d1 2c       	mov	r13, r1
 126:	f0 2d       	mov	r31, r0
		
		CANIDT4 = 0x00;     	// Set can id to 7
 128:	0f 2e       	mov	r0, r31
 12a:	f0 ef       	ldi	r31, 0xF0	; 240
 12c:	ef 2e       	mov	r14, r31
 12e:	f1 2c       	mov	r15, r1
 130:	f0 2d       	mov	r31, r0
		
		CANIDT3 = 0x00;		// ""
 132:	01 ef       	ldi	r16, 0xF1	; 241
 134:	10 e0       	ldi	r17, 0x00	; 0

		CANIDT2 = (0b111 << 5);		// ""
 136:	0f 2e       	mov	r0, r31
 138:	f2 ef       	ldi	r31, 0xF2	; 242
 13a:	2f 2e       	mov	r2, r31
 13c:	31 2c       	mov	r3, r1
 13e:	f0 2d       	mov	r31, r0
		
		CANIDT1 = 0x00;		// ""
 140:	0f 2e       	mov	r0, r31
 142:	f3 ef       	ldi	r31, 0xF3	; 243
 144:	8f 2e       	mov	r8, r31
 146:	91 2c       	mov	r9, r1
 148:	f0 2d       	mov	r31, r0

		// CANMSG
		
		CANMSG = 0x88;
 14a:	0f 2e       	mov	r0, r31
 14c:	fa ef       	ldi	r31, 0xFA	; 250
 14e:	6f 2e       	mov	r6, r31
 150:	71 2c       	mov	r7, r1
 152:	f0 2d       	mov	r31, r0
		
		CANCDMOB = ( 1 << CONMOB0 ) | ( 1 << DLC0 ); 	// Enable transmission, data length=1 (CAN Standard rev 2.0A)
 154:	0f 2e       	mov	r0, r31
 156:	ff ee       	ldi	r31, 0xEF	; 239
 158:	4f 2e       	mov	r4, r31
 15a:	51 2c       	mov	r5, r1
 15c:	f0 2d       	mov	r31, r0
	CANGCON |= ( 1 << ENASTB );
	    
    while (1) 
    {
		// Transmit
		CANPAGE = 0x00;		// Select MOb0 for transmission
 15e:	f5 01       	movw	r30, r10
 160:	10 82       	st	Z, r1
		
		while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
 162:	88 81       	ld	r24, Y
 164:	80 fd       	sbrc	r24, 0
 166:	fd cf       	rjmp	.-6      	; 0x162 <main+0xb8>
		
		CANSTMOB = 0x00;    	// Clear mob status register
 168:	f6 01       	movw	r30, r12
 16a:	10 82       	st	Z, r1
		
		CANIDT4 = 0x00;     	// Set can id to 7
 16c:	f7 01       	movw	r30, r14
 16e:	10 82       	st	Z, r1
		
		CANIDT3 = 0x00;		// ""
 170:	f8 01       	movw	r30, r16
 172:	10 82       	st	Z, r1

		CANIDT2 = (0b111 << 5);		// ""
 174:	80 ee       	ldi	r24, 0xE0	; 224
 176:	f1 01       	movw	r30, r2
 178:	80 83       	st	Z, r24
		
		CANIDT1 = 0x00;		// ""
 17a:	f4 01       	movw	r30, r8
 17c:	10 82       	st	Z, r1

		// CANMSG
		
		CANMSG = 0x88;
 17e:	88 e8       	ldi	r24, 0x88	; 136
 180:	f3 01       	movw	r30, r6
 182:	80 83       	st	Z, r24
		
		CANCDMOB = ( 1 << CONMOB0 ) | ( 1 << DLC0 ); 	// Enable transmission, data length=1 (CAN Standard rev 2.0A)
 184:	81 e4       	ldi	r24, 0x41	; 65
 186:	f2 01       	movw	r30, r4
 188:	80 83       	st	Z, r24
		
		extra_delay(20);
 18a:	84 e1       	ldi	r24, 0x14	; 20
 18c:	0e 94 4a 00 	call	0x94	; 0x94 <extra_delay>
			hello = 0;
		}else{
			bit_clear(PORTD,BIT(1));
			hello = 1;
		}*/
		bit_flip(PORTD, BIT(1));
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	92 e0       	ldi	r25, 0x02	; 2
 194:	89 27       	eor	r24, r25
 196:	8b b9       	out	0x0b, r24	; 11
		
		
		
		
    }
 198:	e2 cf       	rjmp	.-60     	; 0x15e <main+0xb4>

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
