
First Can message.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aed  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a20  00000000  00000000  00000d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f6  00000000  00000000  00001751  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051b  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00001f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001fa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:


int main(void)
{
	//***** Chip initialization
	DDRC = 4; //Set TXCAN as output and RXCAN as input
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	87 b9       	out	0x07, r24	; 7
	
	bit_set(DDRD, BIT(1));
  98:	51 9a       	sbi	0x0a, 1	; 10
	bit_set(DDRD, BIT(7));
  9a:	57 9a       	sbi	0x0a, 7	; 10
	
	bit_set(PORTD, BIT(7));
  9c:	5f 9a       	sbi	0x0b, 7	; 11

//***** CAN initialization *****************************************************

	CANGCON = ( 1 << SWRES ) | (1 << ENASTB);   // Software reset
  9e:	93 e0       	ldi	r25, 0x03	; 3
  a0:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

	CANTCON = 0x00;         // CAN timing prescaler set to 0;
  a4:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	CANBT1 = 0x0E;      	// Set baud rate to 125kb (assuming 8Mhz IOclk)
  a8:	9e e0       	ldi	r25, 0x0E	; 14
  aa:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x04;          // ""
  ae:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x13; 			// ""
  b2:	83 e1       	ldi	r24, 0x13	; 19
  b4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	for ( int8_t mob=0; mob<6; mob++ ) {
  b8:	80 e0       	ldi	r24, 0x00	; 0

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-5
  ba:	cd ee       	ldi	r28, 0xED	; 237
  bc:	d0 e0       	ldi	r29, 0x00	; 0

		CANCDMOB = 0x00;       		// Disable mob
  be:	af ee       	ldi	r26, 0xEF	; 239
  c0:	b0 e0       	ldi	r27, 0x00	; 0

		CANSTMOB = 0x00;     		// Clear mob status register;
  c2:	ee ee       	ldi	r30, 0xEE	; 238
  c4:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT2 = 0x04;          // ""
	CANBT3 = 0x13; 			// ""

	for ( int8_t mob=0; mob<6; mob++ ) {

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-5
  c6:	98 2f       	mov	r25, r24
  c8:	92 95       	swap	r25
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	98 83       	st	Y, r25

		CANCDMOB = 0x00;       		// Disable mob
  ce:	1c 92       	st	X, r1

		CANSTMOB = 0x00;     		// Clear mob status register;
  d0:	10 82       	st	Z, r1
  d2:	8f 5f       	subi	r24, 0xFF	; 255

	CANBT1 = 0x0E;      	// Set baud rate to 125kb (assuming 8Mhz IOclk)
	CANBT2 = 0x04;          // ""
	CANBT3 = 0x13; 			// ""

	for ( int8_t mob=0; mob<6; mob++ ) {
  d4:	86 30       	cpi	r24, 0x06	; 6
  d6:	b9 f7       	brne	.-18     	; 0xc6 <main+0x32>
		CANCDMOB = 0x00;       		// Disable mob

		CANSTMOB = 0x00;     		// Clear mob status register;
	}

	CANPAGE = ( 1 << MOBNB0 );		// Select MOB1
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	CANIDM1 = 0x00;   	// Clear Mask, let all IDs pass
  de:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

	CANIDM2 = 0x00; 	// ""
  e2:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANIDM3 = 0x00; 	// ""
  e6:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>

	CANIDM4 = 0x00; 	// ""
  ea:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	//CANGCON |= ( 1 << ENASTB );
	    
    while (1) 
    {
		// Transmit
		CANPAGE = 0x00;		// Select MOb0 for transmission
  ee:	0f 2e       	mov	r0, r31
  f0:	fd ee       	ldi	r31, 0xED	; 237
  f2:	cf 2e       	mov	r12, r31
  f4:	d1 2c       	mov	r13, r1
  f6:	f0 2d       	mov	r31, r0
		
		while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
  f8:	ec ed       	ldi	r30, 0xDC	; 220
  fa:	f0 e0       	ldi	r31, 0x00	; 0
		
		CANSTMOB = 0x00;    	// Clear mob status register
  fc:	0f 2e       	mov	r0, r31
  fe:	fe ee       	ldi	r31, 0xEE	; 238
 100:	ef 2e       	mov	r14, r31
 102:	f1 2c       	mov	r15, r1
 104:	f0 2d       	mov	r31, r0
		
		CANIDT4 = 0x00;     	// Set can id to 7
 106:	00 ef       	ldi	r16, 0xF0	; 240
 108:	10 e0       	ldi	r17, 0x00	; 0
		
		CANIDT3 = 0x00;		// ""
 10a:	61 ef       	ldi	r22, 0xF1	; 241
 10c:	70 e0       	ldi	r23, 0x00	; 0

		CANIDT2 = (0b111 << 5);		// ""
 10e:	42 ef       	ldi	r20, 0xF2	; 242
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	0f 2e       	mov	r0, r31
 114:	f0 ee       	ldi	r31, 0xE0	; 224
 116:	af 2e       	mov	r10, r31
 118:	f0 2d       	mov	r31, r0
		
		CANIDT1 = 0x00;		// ""
 11a:	23 ef       	ldi	r18, 0xF3	; 243
 11c:	30 e0       	ldi	r19, 0x00	; 0

		// CANMSG
		
		CANMSG = 0x88;
 11e:	ca ef       	ldi	r28, 0xFA	; 250
 120:	d0 e0       	ldi	r29, 0x00	; 0
 122:	0f 2e       	mov	r0, r31
 124:	f8 e8       	ldi	r31, 0x88	; 136
 126:	bf 2e       	mov	r11, r31
 128:	f0 2d       	mov	r31, r0
		
		CANCDMOB = ( 1 << CONMOB0 ) | ( 1 << DLC0 ); 	// Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
 12a:	0f 2e       	mov	r0, r31
 12c:	ff ee       	ldi	r31, 0xEF	; 239
 12e:	8f 2e       	mov	r8, r31
 130:	91 2c       	mov	r9, r1
 132:	f0 2d       	mov	r31, r0
 134:	91 e4       	ldi	r25, 0x41	; 65
	//CANGCON |= ( 1 << ENASTB );
	    
    while (1) 
    {
		// Transmit
		CANPAGE = 0x00;		// Select MOb0 for transmission
 136:	d6 01       	movw	r26, r12
 138:	1c 92       	st	X, r1
		
		while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
 13a:	80 81       	ld	r24, Z
 13c:	80 fd       	sbrc	r24, 0
 13e:	fd cf       	rjmp	.-6      	; 0x13a <main+0xa6>
		
		CANSTMOB = 0x00;    	// Clear mob status register
 140:	d7 01       	movw	r26, r14
 142:	1c 92       	st	X, r1
		
		CANIDT4 = 0x00;     	// Set can id to 7
 144:	d8 01       	movw	r26, r16
 146:	1c 92       	st	X, r1
		
		CANIDT3 = 0x00;		// ""
 148:	db 01       	movw	r26, r22
 14a:	1c 92       	st	X, r1

		CANIDT2 = (0b111 << 5);		// ""
 14c:	da 01       	movw	r26, r20
 14e:	ac 92       	st	X, r10
		
		CANIDT1 = 0x00;		// ""
 150:	d9 01       	movw	r26, r18
 152:	1c 92       	st	X, r1

		// CANMSG
		
		CANMSG = 0x88;
 154:	b8 82       	st	Y, r11
		
		CANCDMOB = ( 1 << CONMOB0 ) | ( 1 << DLC0 ); 	// Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
 156:	d4 01       	movw	r26, r8
 158:	9c 93       	st	X, r25
		/*while ( ! ( CANSTMOB & ( 1 << TXOK ) ) );	// wait for TXOK flag set
		// todo: have this use interrupts
		CANCDMOB = 0x00;	// Disable Transmission

		CANSTMOB = 0x00;	// Clear TXOK flag*/
    }
 15a:	ed cf       	rjmp	.-38     	; 0x136 <main+0xa2>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
