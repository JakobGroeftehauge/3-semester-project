
First CAN TransmitReceive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000002b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbe  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b44  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000468  00000000  00000000  00001b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005dd  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c7  00000000  00000000  0000266d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a8 30       	cpi	r26, 0x08	; 8
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  9c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_18>:
#define F_CPU 8000000UL

void extra_delay(uint16_t delaytimes);

//***** Reception ISR **********************************
ISR ( CAN_INT_vect ){  				// use interrupts
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	3f 93       	push	r19
  b2:	4f 93       	push	r20
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31

  	int8_t length, savecanpage;
	
	savecanpage = CANPAGE;			// Save current MOB
  c0:	ed ee       	ldi	r30, 0xED	; 237
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	40 81       	ld	r20, Z

	CANPAGE = CANHPMOB & 0xF0;		// Selects MOB with highest priority interrupt
  c6:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
  ca:	80 7f       	andi	r24, 0xF0	; 240
  cc:	80 83       	st	Z, r24

	if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished							
  ce:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
  d2:	85 ff       	sbrs	r24, 5
  d4:	14 c0       	rjmp	.+40     	; 0xfe <__vector_18+0x5a>

  		length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
  d6:	30 91 ef 00 	lds	r19, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
  da:	3f 70       	andi	r19, 0x0F	; 15

  		for ( int8_t i = 0; i < length; i++ ){
  dc:	13 16       	cp	r1, r19
  de:	64 f4       	brge	.+24     	; 0xf8 <__vector_18+0x54>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
			
	    	data[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
  e4:	aa ef       	ldi	r26, 0xFA	; 250
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	2c 91       	ld	r18, X
  ea:	fc 01       	movw	r30, r24
  ec:	e0 50       	subi	r30, 0x00	; 0
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	20 83       	st	Z, r18
  f2:	01 96       	adiw	r24, 0x01	; 1

	if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished							

  		length = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received

  		for ( int8_t i = 0; i < length; i++ ){
  f4:	83 17       	cp	r24, r19
  f6:	c4 f3       	brlt	.-16     	; 0xe8 <__vector_18+0x44>
  
			//PORTB = data[0];

	  	} // for

		CANCDMOB = (( 1 << CONMOB1 ) /*| ( 1 << IDE )*/ | ( 8 << DLC0));  // Enable Reception 29 bit IDE DLC8
  f8:	88 e8       	ldi	r24, 0x88	; 136
  fa:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		
		// Note - the DLC field of the CANCDMO register is updated by the received MOb. If the value differs from expected DLC, an error is set

	} // if (CANSTMOB...	
	
	CANSTMOB = 0x00; 		// Reset reason on selected channel
  fe:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

	CANPAGE = savecanpage;		// Restore original MOB
 102:	40 93 ed 00 	sts	0x00ED, r20	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	4f 91       	pop	r20
 114:	3f 91       	pop	r19
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <chip_init>:

//***** chip Initialization **********************************
void chip_init(void){

	//***** Chip initialization
	DDRC = 4; //Set TXCAN as output and RXCAN as input
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	87 b9       	out	0x07, r24	; 7
	
	bit_set(DDRD, BIT(1));
 126:	51 9a       	sbi	0x0a, 1	; 10
	bit_set(DDRD, BIT(7));
 128:	57 9a       	sbi	0x0a, 7	; 10
	
	bit_set(PORTD, BIT(1));
 12a:	59 9a       	sbi	0x0b, 1	; 11
 12c:	08 95       	ret

0000012e <can_init>:

}

//***** CAN ialization *****************************************************
void can_init(void){     
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29

	CANGCON = ( 1 << SWRES );   // Software reset
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

	CANTCON = 0x00;         // CAN timing prescaler set to 0;					
 138:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	CANBT1 = 0x02;      	// Set baud rate to kb (assuming 8Mhz IOclk)
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	                                              
	CANBT2 = 0x04;          // ""
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	CANBT3 = 0x13; 		// ""
 148:	83 e1       	ldi	r24, 0x13	; 19
 14a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	for ( int8_t mob=0; mob<6; mob++ ) {  
 14e:	80 e0       	ldi	r24, 0x00	; 0

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-5
 150:	cd ee       	ldi	r28, 0xED	; 237
 152:	d0 e0       	ldi	r29, 0x00	; 0

		CANCDMOB = 0x00;       		// Disable mob
 154:	af ee       	ldi	r26, 0xEF	; 239
 156:	b0 e0       	ldi	r27, 0x00	; 0

		CANSTMOB = 0x00;     		// Clear mob status register;
 158:	ee ee       	ldi	r30, 0xEE	; 238
 15a:	f0 e0       	ldi	r31, 0x00	; 0

	CANBT3 = 0x13; 		// ""

	for ( int8_t mob=0; mob<6; mob++ ) {  

		CANPAGE = ( mob << 4 );     	// Selects Message Object 0-5
 15c:	98 2f       	mov	r25, r24
 15e:	92 95       	swap	r25
 160:	90 7f       	andi	r25, 0xF0	; 240
 162:	98 83       	st	Y, r25

		CANCDMOB = 0x00;       		// Disable mob
 164:	1c 92       	st	X, r1

		CANSTMOB = 0x00;     		// Clear mob status register;
 166:	10 82       	st	Z, r1
 168:	8f 5f       	subi	r24, 0xFF	; 255
	                                              
	CANBT2 = 0x04;          // ""

	CANBT3 = 0x13; 		// ""

	for ( int8_t mob=0; mob<6; mob++ ) {  
 16a:	86 30       	cpi	r24, 0x06	; 6
 16c:	b9 f7       	brne	.-18     	; 0x15c <can_init+0x2e>
		CANCDMOB = 0x00;       		// Disable mob

		CANSTMOB = 0x00;     		// Clear mob status register;
	}

	CANPAGE = ( 1 << MOBNB0 );		// Selecto MOB1
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	CANIE2 = ( 1 << IEMOB1 );   	// Enable interrupts on mob1 for reception and transmission
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

	CANGIE = ( 1 << ENIT ) | ( 1 << ENRX ) /*| ( 1 << ENTX )*/;   // Enable interrupts on receive
 17a:	80 ea       	ldi	r24, 0xA0	; 160
 17c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	
	CANIDM1 = 0x00;   	// Clear Mask, let all IDs pass    
 180:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

	CANIDM2 = 0x00; 	// ""
 184:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANIDM3 = 0x00; 	// ""
 188:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>

	CANIDM4 = 0x00; 	// ""    	
 18c:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>

	CANCDMOB = ( 1 << CONMOB1) | ( 8 << DLC0);  // Enable Reception 29 bit IDE DLC8
 190:	88 e8       	ldi	r24, 0x88	; 136
 192:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	
	CANGCON |= ( 1 << ENASTB );			// Enable mode. CAN channel enters in enable mode once 11 recessive bits have been read
 196:	e8 ed       	ldi	r30, 0xD8	; 216
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	80 83       	st	Z, r24

	sei();	
 1a0:	78 94       	sei

} 
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <can_tx>:

//***** transmit *****************************************************
void can_tx(void) { 

	CANPAGE = 0x00;		// Select MOb0 for transmission
 1a8:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	//while ( CANEN2 & ( 1 << ENMOB0 ) ); // Wait for MOb 0 to be free
	
	CANSTMOB = 0x00;    	// Clear mob status register
 1ac:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	CANIDT4 = 0x00;     	// Set can id to 0	
 1b0:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0x00;		// ""
 1b4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	CANIDT2 = (0b11 << 5);		// ""
 1b8:	80 e6       	ldi	r24, 0x60	; 96
 1ba:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	
	CANIDT1 = 0x00;		// ""
 1be:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	
	//for ( int8_t i = 0; i < 8; ++i ){

	CANMSG = 0x46;  // set message data for all 8 bytes to 55 (alternating 1s and 0s
 1c2:	ea ef       	ldi	r30, 0xFA	; 250
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	86 e4       	ldi	r24, 0x46	; 70
 1c8:	80 83       	st	Z, r24
	CANMSG = 0x55;
 1ca:	85 e5       	ldi	r24, 0x55	; 85
 1cc:	80 83       	st	Z, r24
	CANMSG = 0x43;
 1ce:	93 e4       	ldi	r25, 0x43	; 67
 1d0:	90 83       	st	Z, r25
	CANMSG = 0x4B;
 1d2:	9b e4       	ldi	r25, 0x4B	; 75
 1d4:	90 83       	st	Z, r25
	CANMSG = 0x20;
 1d6:	90 e2       	ldi	r25, 0x20	; 32
 1d8:	90 83       	st	Z, r25
	CANMSG = 0x59;
 1da:	99 e5       	ldi	r25, 0x59	; 89
 1dc:	90 83       	st	Z, r25
	CANMSG = 0x4F;
 1de:	9f e4       	ldi	r25, 0x4F	; 79
 1e0:	90 83       	st	Z, r25
	CANMSG = 0x55;
 1e2:	80 83       	st	Z, r24
	
	//} // for
	
	CANCDMOB = ( 1 << CONMOB0 ) | ( 8 << DLC0 ); 	// Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))			
 1e4:	88 e4       	ldi	r24, 0x48	; 72
 1e6:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	while ( ! ( CANSTMOB & ( 1 << TXOK ) ) );	// wait for TXOK flag set
 1ea:	ee ee       	ldi	r30, 0xEE	; 238
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	86 ff       	sbrs	r24, 6
 1f2:	fd cf       	rjmp	.-6      	; 0x1ee <can_tx+0x46>
// todo: have this use interrupts
	CANCDMOB = 0x00;	// Disable Transmission
 1f4:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANSTMOB = 0x00;	// Clear TXOK flag
 1f8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 1fc:	08 95       	ret

000001fe <extra_delay>:
	return(0);

}

void extra_delay(uint16_t delaytimes){
	for (uint16_t i = delaytimes; i > 0; i--){
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	41 f0       	breq	.+16     	; 0x212 <extra_delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	eb e4       	ldi	r30, 0x4B	; 75
 204:	fd e1       	ldi	r31, 0x1D	; 29
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <extra_delay+0x8>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <extra_delay+0xe>
 20c:	00 00       	nop
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	c1 f7       	brne	.-16     	; 0x202 <extra_delay+0x4>
 212:	08 95       	ret

00000214 <main>:
} 

//***** main *****************************************************
int main(){ 

    chip_init();	// Chip initialization
 214:	0e 94 91 00 	call	0x122	; 0x122 <chip_init>

 	can_init(); 	// Can initialization
 218:	0e 94 97 00 	call	0x12e	; 0x12e <can_init>

	

 	while ( 1 ) {	// Forever

		if (data[0] == 0x46){	// if 1st byta of received data is 0x01
 21c:	c0 e0       	ldi	r28, 0x00	; 0
 21e:	d1 e0       	ldi	r29, 0x01	; 1
 220:	88 81       	ld	r24, Y
 222:	86 34       	cpi	r24, 0x46	; 70
 224:	e9 f7       	brne	.-6      	; 0x220 <main+0xc>
			
			extra_delay(600);
 226:	88 e5       	ldi	r24, 0x58	; 88
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <extra_delay>
		
			can_tx();	// transmit
 22e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <can_tx>

			data[0] = 0x00;
 232:	18 82       	st	Y, r1
			
			bit_flip(PORTD, BIT(7));
 234:	8b b1       	in	r24, 0x0b	; 11
 236:	80 58       	subi	r24, 0x80	; 128
 238:	8b b9       	out	0x0b, r24	; 11
 23a:	f2 cf       	rjmp	.-28     	; 0x220 <main+0xc>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
