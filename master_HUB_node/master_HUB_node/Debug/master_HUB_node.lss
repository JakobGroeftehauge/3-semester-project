
master_HUB_node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019cf  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001044  00000000  00000000  00001f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a9d  00000000  00000000  00002fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000905  00000000  00000000  00003cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e7  00000000  00000000  00004601  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004de8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_15>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a4 30       	cpi	r26, 0x04	; 4
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  9c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <can_clear_all_mob>:

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	cd ee       	ldi	r28, 0xED	; 237
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	af ee       	ldi	r26, 0xEF	; 239
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	ee ee       	ldi	r30, 0xEE	; 238
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	98 2f       	mov	r25, r24
  b8:	92 95       	swap	r25
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	98 83       	st	Y, r25
  be:	1c 92       	st	X, r1
  c0:	10 82       	st	Z, r1
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	86 30       	cpi	r24, 0x06	; 6
  c6:	b9 f7       	brne	.-18     	; 0xb6 <can_clear_all_mob+0x12>
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate()
{
    Can_reset();
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    Can_conf_bt();
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  e0:	83 e1       	ldi	r24, 0x13	; 19
  e2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    return 1;
}
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	08 95       	ret

000000ea <can_init>:
}


uint8_t can_init()
{
	Can_bit_timing(1);
  ea:	0e 94 67 00 	call	0xce	; 0xce <can_fixed_baudrate>
	can_clear_all_mob();                        // c.f. function in "can_drv.c"
  ee:	0e 94 52 00 	call	0xa4	; 0xa4 <can_clear_all_mob>
	Can_enable();								// c.f. macro in "can_drv.h"
  f2:	e8 ed       	ldi	r30, 0xD8	; 216
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
	Can_enable_chosen_ints();                   // macro in "can_drv.h" - change to enable different general interrupts
  fc:	80 ea       	ldi	r24, 0xA0	; 160
  fe:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	return (1);
}
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	08 95       	ret

00000106 <initSensors>:
 #include "HUB_lib.h"



 void initSensors(sensorData* sensorNum[NUMBER_OF_SENSOR], st_cmd_t* transmitMOb)
 {
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <initSensors+0xe>
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	7a 83       	std	Y+2, r23	; 0x02
 11a:	69 83       	std	Y+1, r22	; 0x01
 11c:	8c 01       	movw	r16, r24
 11e:	7c 01       	movw	r14, r24
 120:	28 e0       	ldi	r18, 0x08	; 8
 122:	e2 0e       	add	r14, r18
 124:	f1 1c       	adc	r15, r1
	for(uint8_t i = 0; i < NUMBER_OF_SENSOR; i++)
	{
		sendServiceMessage(&sensorNum[i]->sensorStruct, &transmitMOb);
 126:	f8 01       	movw	r30, r16
 128:	81 91       	ld	r24, Z+
 12a:	91 91       	ld	r25, Z+
 12c:	8f 01       	movw	r16, r30
 12e:	be 01       	movw	r22, r28
 130:	6f 5f       	subi	r22, 0xFF	; 255
 132:	7f 4f       	sbci	r23, 0xFF	; 255
 134:	03 96       	adiw	r24, 0x03	; 3
 136:	0e 94 ae 01 	call	0x35c	; 0x35c <sendServiceMessage>



 void initSensors(sensorData* sensorNum[NUMBER_OF_SENSOR], st_cmd_t* transmitMOb)
 {
	for(uint8_t i = 0; i < NUMBER_OF_SENSOR; i++)
 13a:	0e 15       	cp	r16, r14
 13c:	1f 05       	cpc	r17, r15
 13e:	99 f7       	brne	.-26     	; 0x126 <initSensors+0x20>
	{
		sendServiceMessage(&sensorNum[i]->sensorStruct, &transmitMOb);
	}

 }
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	ff 90       	pop	r15
 14e:	ef 90       	pop	r14
 150:	08 95       	ret

00000152 <updateData>:



 void updateData(sensorData* sensorNum[NUMBER_OF_SENSOR], st_cmd_t* receiveMOb)
 {
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
	 for(uint8_t i = 0; i < NUMBER_OF_SENSOR; i++)
	 {

		 if(sensorNum[i]->sensorStruct.CAN_ID == receiveMOb->id)
 156:	fc 01       	movw	r30, r24
 158:	a0 81       	ld	r26, Z
 15a:	b1 81       	ldd	r27, Z+1	; 0x01
 15c:	fb 01       	movw	r30, r22
 15e:	41 81       	ldd	r20, Z+1	; 0x01
 160:	52 81       	ldd	r21, Z+2	; 0x02
 162:	13 96       	adiw	r26, 0x03	; 3
 164:	2d 91       	ld	r18, X+
 166:	3c 91       	ld	r19, X
 168:	14 97       	sbiw	r26, 0x04	; 4
 16a:	24 17       	cp	r18, r20
 16c:	35 07       	cpc	r19, r21
 16e:	71 f0       	breq	.+28     	; 0x18c <updateData+0x3a>
 170:	fc 01       	movw	r30, r24
 172:	32 96       	adiw	r30, 0x02	; 2
 174:	08 96       	adiw	r24, 0x08	; 8
 176:	ef 01       	movw	r28, r30
 178:	a1 91       	ld	r26, Z+
 17a:	b1 91       	ld	r27, Z+
 17c:	13 96       	adiw	r26, 0x03	; 3
 17e:	2d 91       	ld	r18, X+
 180:	3c 91       	ld	r19, X
 182:	14 97       	sbiw	r26, 0x04	; 4
 184:	24 17       	cp	r18, r20
 186:	35 07       	cpc	r19, r21
 188:	59 f4       	brne	.+22     	; 0x1a0 <updateData+0x4e>
 18a:	01 c0       	rjmp	.+2      	; 0x18e <updateData+0x3c>
 18c:	ec 01       	movw	r28, r24
		 {
			 sensorNum[i]->data = receiveMOb->pt_data;  //Change to support floats
 18e:	fb 01       	movw	r30, r22
 190:	86 81       	ldd	r24, Z+6	; 0x06
 192:	8c 93       	st	X, r24
			 sensorNum[i]->numberOfMessages++;
 194:	e8 81       	ld	r30, Y
 196:	f9 81       	ldd	r31, Y+1	; 0x01
 198:	81 81       	ldd	r24, Z+1	; 0x01
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	81 83       	std	Z+1, r24	; 0x01
			 return;
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <updateData+0x54>



 void updateData(sensorData* sensorNum[NUMBER_OF_SENSOR], st_cmd_t* receiveMOb)
 {
	 for(uint8_t i = 0; i < NUMBER_OF_SENSOR; i++)
 1a0:	e8 17       	cp	r30, r24
 1a2:	f9 07       	cpc	r31, r25
 1a4:	41 f7       	brne	.-48     	; 0x176 <updateData+0x24>
			 sensorNum[i]->numberOfMessages++;
			 return;
		 }
	 }

 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <chip_init>:
}

void chip_init(void){

	//***** Chip initialization
	DDRC = 4; //Set TXCAN as output and RXCAN as input
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	87 b9       	out	0x07, r24	; 7
	
	bit_set(DDRD, BIT(1));
 1b0:	51 9a       	sbi	0x0a, 1	; 10
	bit_set(DDRD, BIT(7));
 1b2:	57 9a       	sbi	0x0a, 7	; 10
	
	bit_set(PORTD, BIT(1));
 1b4:	59 9a       	sbi	0x0b, 1	; 11
 1b6:	08 95       	ret

000001b8 <main>:
volatile uint8_t receivedMessage; 
volatile uint8_t i; 


int main(void)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	cb 54       	subi	r28, 0x4B	; 75
 1c2:	d1 09       	sbc	r29, r1
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
	heartBeat = 0; 
 1ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <heartBeat>

	uint8_t receive_buffer[MSG_SIZE];
	st_cmd_t receiveMOb;
	receiveMOb.pt_data = &receive_buffer[0];
 1d2:	ce 01       	movw	r24, r28
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	98 8b       	std	Y+16, r25	; 0x10
 1d8:	8f 87       	std	Y+15, r24	; 0x0f
	receiveMOb.MObNumber = 0x01;
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	99 8b       	std	Y+17, r25	; 0x11
	receiveMOb.dlc = MSG_SIZE;
 1de:	88 e0       	ldi	r24, 0x08	; 8
 1e0:	8e 87       	std	Y+14, r24	; 0x0e
	receiveMOb.cmd = RX;
 1e2:	99 87       	std	Y+9, r25	; 0x09
	receiveMOb.id = 0x0000;
 1e4:	1b 86       	std	Y+11, r1	; 0x0b
 1e6:	1a 86       	std	Y+10, r1	; 0x0a


	uint8_t transmit_buffe[MSG_SIZE];
	st_cmd_t transmitMOb; 
	transmitMOb.pt_data = &transmit_buffe[0];
 1e8:	9e 01       	movw	r18, r28
 1ea:	2d 5e       	subi	r18, 0xED	; 237
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
 1ee:	3a a3       	std	Y+34, r19	; 0x22
 1f0:	29 a3       	std	Y+33, r18	; 0x21
	transmitMOb.MObNumber = 0x02; 
 1f2:	22 e0       	ldi	r18, 0x02	; 2
 1f4:	2b a3       	std	Y+35, r18	; 0x23
	transmitMOb.dlc = MSG_SIZE; 
 1f6:	88 a3       	std	Y+32, r24	; 0x20
	transmitMOb.cmd = TX; 
 1f8:	1b 8e       	std	Y+27, r1	; 0x1b
	transmitMOb.id = 0x0000;  
 1fa:	1d 8e       	std	Y+29, r1	; 0x1d
 1fc:	1c 8e       	std	Y+28, r1	; 0x1c

sensorData sensorList[NUMBER_OF_SENSOR];

//Setup sensorData structs

sensorList[0].sensorStruct.CAN_ID = 0x00FF;
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	39 a7       	std	Y+41, r19	; 0x29
 204:	28 a7       	std	Y+40, r18	; 0x28
sensorList[0].sensorStruct.sampling_frequency = 0xFF; 
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	8f a7       	std	Y+47, r24	; 0x2f
sensorList[0].sensorStruct.filter_parameter = 0xFF;  
 20a:	89 ab       	std	Y+49, r24	; 0x31
sensorList[0].sensorStruct.unit = 0xFF; 
 20c:	8b a7       	std	Y+43, r24	; 0x2b
sensorList[0].sensorStruct.filter_type = 0xFF;
 20e:	88 ab       	std	Y+48, r24	; 0x30
sensorList[0].sensorStruct.range_max = 0xFF;
 210:	8d a7       	std	Y+45, r24	; 0x2d
sensorList[0].sensorStruct.range_min = 0xFF;
 212:	8c a7       	std	Y+44, r24	; 0x2c
sensorList[0].data = 0; 
 214:	1d a2       	std	Y+37, r1	; 0x25
sensorList[0].isSCS = 1; 
 216:	9f a3       	std	Y+39, r25	; 0x27

sensorList[1].sensorStruct.CAN_ID = 0x00FF;
 218:	3e ab       	std	Y+54, r19	; 0x36
 21a:	2d ab       	std	Y+53, r18	; 0x35
sensorList[1].sensorStruct.sampling_frequency = 0xFF;
 21c:	8c af       	std	Y+60, r24	; 0x3c
sensorList[1].sensorStruct.filter_parameter = 0xFF;
 21e:	8e af       	std	Y+62, r24	; 0x3e
sensorList[1].sensorStruct.unit = 0xFF;
 220:	88 af       	std	Y+56, r24	; 0x38
sensorList[1].sensorStruct.filter_type = 0xFF;
 222:	8d af       	std	Y+61, r24	; 0x3d
sensorList[1].sensorStruct.range_max = 0xFF;
 224:	8a af       	std	Y+58, r24	; 0x3a
sensorList[1].sensorStruct.range_min = 0xFF;
 226:	89 af       	std	Y+57, r24	; 0x39
sensorList[1].data = 0;
 228:	1a aa       	std	Y+50, r1	; 0x32
sensorList[1].isSCS = 1;
 22a:	9c ab       	std	Y+52, r25	; 0x34

sensorList[2].sensorStruct.CAN_ID = 0x00FF;
 22c:	24 96       	adiw	r28, 0x04	; 4
 22e:	3f af       	std	Y+63, r19	; 0x3f
 230:	2e af       	std	Y+62, r18	; 0x3e
 232:	24 97       	sbiw	r28, 0x04	; 4
sensorList[2].sensorStruct.sampling_frequency = 0xFF;
 234:	2a 96       	adiw	r28, 0x0a	; 10
 236:	8f af       	std	Y+63, r24	; 0x3f
 238:	2a 97       	sbiw	r28, 0x0a	; 10
sensorList[2].sensorStruct.filter_parameter = 0xFF;
 23a:	2c 96       	adiw	r28, 0x0c	; 12
 23c:	8f af       	std	Y+63, r24	; 0x3f
 23e:	2c 97       	sbiw	r28, 0x0c	; 12
sensorList[2].sensorStruct.unit = 0xFF;
 240:	26 96       	adiw	r28, 0x06	; 6
 242:	8f af       	std	Y+63, r24	; 0x3f
 244:	26 97       	sbiw	r28, 0x06	; 6
sensorList[2].sensorStruct.filter_type = 0xFF;
 246:	2b 96       	adiw	r28, 0x0b	; 11
 248:	8f af       	std	Y+63, r24	; 0x3f
 24a:	2b 97       	sbiw	r28, 0x0b	; 11
sensorList[2].sensorStruct.range_max = 0xFF;
 24c:	28 96       	adiw	r28, 0x08	; 8
 24e:	8f af       	std	Y+63, r24	; 0x3f
 250:	28 97       	sbiw	r28, 0x08	; 8
sensorList[2].sensorStruct.range_min = 0xFF;
 252:	27 96       	adiw	r28, 0x07	; 7
 254:	8f af       	std	Y+63, r24	; 0x3f
 256:	27 97       	sbiw	r28, 0x07	; 7
sensorList[2].data = 0;
 258:	1f ae       	std	Y+63, r1	; 0x3f
sensorList[2].isSCS = 1;
 25a:	22 96       	adiw	r28, 0x02	; 2
 25c:	9f af       	std	Y+63, r25	; 0x3f
 25e:	22 97       	sbiw	r28, 0x02	; 2

// Add more....
chip_init();
 260:	0e 94 d6 00 	call	0x1ac	; 0x1ac <chip_init>
can_init();
 264:	0e 94 75 00 	call	0xea	; 0xea <can_init>
initSensors(&sensorList[NUMBER_OF_SENSOR], &transmitMOb);
 268:	be 01       	movw	r22, r28
 26a:	65 5e       	subi	r22, 0xE5	; 229
 26c:	7f 4f       	sbci	r23, 0xFF	; 255
 26e:	ce 01       	movw	r24, r28
 270:	84 5b       	subi	r24, 0xB4	; 180
 272:	9f 4f       	sbci	r25, 0xFF	; 255
 274:	0e 94 83 00 	call	0x106	; 0x106 <initSensors>
sei();
 278:	78 94       	sei


if(tick > 0)
 27a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 27e:	88 23       	and	r24, r24
 280:	a9 f1       	breq	.+106    	; 0x2ec <main+0x134>
{



if(receivedMessage > 0)
 282:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receivedMessage>
 286:	88 23       	and	r24, r24
 288:	61 f0       	breq	.+24     	; 0x2a2 <main+0xea>
{
	updateData(&sensorList, &receiveMOb);
 28a:	be 01       	movw	r22, r28
 28c:	67 5f       	subi	r22, 0xF7	; 247
 28e:	7f 4f       	sbci	r23, 0xFF	; 255
 290:	ce 01       	movw	r24, r28
 292:	85 96       	adiw	r24, 0x25	; 37
 294:	0e 94 a9 00 	call	0x152	; 0x152 <updateData>

	receivedMessage--; 
 298:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receivedMessage>
 29c:	81 50       	subi	r24, 0x01	; 1
 29e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <receivedMessage>
}
    
if(heartBeat > 20)
 2a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartBeat>
 2a6:	85 31       	cpi	r24, 0x15	; 21
 2a8:	08 f1       	brcs	.+66     	; 0x2ec <main+0x134>
{
	for (i = 0; i < NUMBER_OF_SENSOR; i++)
 2aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 2ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2b2:	83 30       	cpi	r24, 0x03	; 3
 2b4:	c8 f4       	brcc	.+50     	; 0x2e8 <main+0x130>
	{

		if(sensorList[i].isSCS == 1)
 2b6:	9d e0       	ldi	r25, 0x0D	; 13
 2b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2bc:	e1 e0       	ldi	r30, 0x01	; 1
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	ec 0f       	add	r30, r28
 2c2:	fd 1f       	adc	r31, r29
 2c4:	98 9f       	mul	r25, r24
 2c6:	e0 0d       	add	r30, r0
 2c8:	f1 1d       	adc	r31, r1
 2ca:	11 24       	eor	r1, r1
 2cc:	86 a1       	ldd	r24, Z+38	; 0x26
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	11 f4       	brne	.+4      	; 0x2d6 <main+0x11e>
		{

			if(sensorList[i].numberOfMessages < 0)
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
	receivedMessage--; 
}
    
if(heartBeat > 20)
{
	for (i = 0; i < NUMBER_OF_SENSOR; i++)
 2d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2da:	8f 5f       	subi	r24, 0xFF	; 255
 2dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e4:	83 30       	cpi	r24, 0x03	; 3
 2e6:	40 f3       	brcs	.-48     	; 0x2b8 <main+0x100>

		}

	}
 
heartBeat = 0; 
 2e8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <heartBeat>



}

tick--; 
 2ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 2f0:	81 50       	subi	r24, 0x01	; 1
 2f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
}
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	c5 5b       	subi	r28, 0xB5	; 181
 2fc:	df 4f       	sbci	r29, 0xFF	; 255
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <__vector_15>:
}



ISR(TIMER0_COMPA_vect)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	8f 93       	push	r24
	tick++;
 31a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
	heartBeat++; 
 324:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartBeat>
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <heartBeat>

}
 32e:	8f 91       	pop	r24
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_18>:

ISR( CAN_INT_vect )
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
	receivedMessage++;
 346:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receivedMessage>
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <receivedMessage>

 350:	8f 91       	pop	r24
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <sendServiceMessage>:
	//ACK_FROM_NODE(sensor); //NEEDS TO BE MADE!. TRANSMIT THE STRUCT BACK
}

// sendServiceMessage puts parameters into array, which can be sent
void sendServiceMessage(sensor_at_node* sensorAtNode, st_cmd_t* transmitMOb)//sensor_Types type, units unit, uint8_t range_min, uint8_t range_max, uint8_t trans_frq, uint8_t sampl_frq, uint8_t filt_type, uint8_t filt_par)
{
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	fc 01       	movw	r30, r24
 362:	db 01       	movw	r26, r22
	transmitMOb->pt_data[1] = (sensorAtNode->sensor_Type & 0b00001111) << 4+ (sensorAtNode->unit & 0b00001111);
 364:	16 96       	adiw	r26, 0x06	; 6
 366:	cd 91       	ld	r28, X+
 368:	dc 91       	ld	r29, X
 36a:	17 97       	sbiw	r26, 0x07	; 7
 36c:	82 81       	ldd	r24, Z+2	; 0x02
 36e:	8f 70       	andi	r24, 0x0F	; 15
 370:	93 81       	ldd	r25, Z+3	; 0x03
 372:	9f 70       	andi	r25, 0x0F	; 15
 374:	9c 5f       	subi	r25, 0xFC	; 252
 376:	01 c0       	rjmp	.+2      	; 0x37a <sendServiceMessage+0x1e>
 378:	88 0f       	add	r24, r24
 37a:	9a 95       	dec	r25
 37c:	ea f7       	brpl	.-6      	; 0x378 <sendServiceMessage+0x1c>
 37e:	89 83       	std	Y+1, r24	; 0x01
	transmitMOb->pt_data[2] = sensorAtNode->range_min;
 380:	16 96       	adiw	r26, 0x06	; 6
 382:	cd 91       	ld	r28, X+
 384:	dc 91       	ld	r29, X
 386:	17 97       	sbiw	r26, 0x07	; 7
 388:	84 81       	ldd	r24, Z+4	; 0x04
 38a:	8a 83       	std	Y+2, r24	; 0x02
	transmitMOb->pt_data[3] = sensorAtNode->range_max;
 38c:	16 96       	adiw	r26, 0x06	; 6
 38e:	cd 91       	ld	r28, X+
 390:	dc 91       	ld	r29, X
 392:	17 97       	sbiw	r26, 0x07	; 7
 394:	85 81       	ldd	r24, Z+5	; 0x05
 396:	8b 83       	std	Y+3, r24	; 0x03
	transmitMOb->pt_data[4] = (sensorAtNode->transmission_frequency & 0b00001111) << 4 + (sensorAtNode->sampling_frequency & 0b00001111); 
 398:	16 96       	adiw	r26, 0x06	; 6
 39a:	cd 91       	ld	r28, X+
 39c:	dc 91       	ld	r29, X
 39e:	17 97       	sbiw	r26, 0x07	; 7
 3a0:	86 81       	ldd	r24, Z+6	; 0x06
 3a2:	8f 70       	andi	r24, 0x0F	; 15
 3a4:	97 81       	ldd	r25, Z+7	; 0x07
 3a6:	9f 70       	andi	r25, 0x0F	; 15
 3a8:	9c 5f       	subi	r25, 0xFC	; 252
 3aa:	01 c0       	rjmp	.+2      	; 0x3ae <sendServiceMessage+0x52>
 3ac:	88 0f       	add	r24, r24
 3ae:	9a 95       	dec	r25
 3b0:	ea f7       	brpl	.-6      	; 0x3ac <sendServiceMessage+0x50>
 3b2:	8c 83       	std	Y+4, r24	; 0x04
	transmitMOb->pt_data[5] = (sensorAtNode->filter_type & 0b00001111) << 4 + (sensorAtNode->filter_parameter & 0b00001111); 
 3b4:	16 96       	adiw	r26, 0x06	; 6
 3b6:	0d 90       	ld	r0, X+
 3b8:	bc 91       	ld	r27, X
 3ba:	a0 2d       	mov	r26, r0
 3bc:	80 85       	ldd	r24, Z+8	; 0x08
 3be:	8f 70       	andi	r24, 0x0F	; 15
 3c0:	91 85       	ldd	r25, Z+9	; 0x09
 3c2:	9f 70       	andi	r25, 0x0F	; 15
 3c4:	9c 5f       	subi	r25, 0xFC	; 252
 3c6:	01 c0       	rjmp	.+2      	; 0x3ca <sendServiceMessage+0x6e>
 3c8:	88 0f       	add	r24, r24
 3ca:	9a 95       	dec	r25
 3cc:	ea f7       	brpl	.-6      	; 0x3c8 <sendServiceMessage+0x6c>
 3ce:	15 96       	adiw	r26, 0x05	; 5
 3d0:	8c 93       	st	X, r24
}
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
