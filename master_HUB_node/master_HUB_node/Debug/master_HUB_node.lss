
master_HUB_node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d19  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2e  00000000  00000000  000010ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fa  00000000  00000000  00001bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063e  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000116  00000000  00000000  000025a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_15>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a4 30       	cpi	r26, 0x04	; 4
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  9c:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <updateData>:
tick--; 
}


void updateData(sensorData* sensorNum[NUMBER_OF_SENSOR], st_cmd_t* receiveMOb)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	ac 01       	movw	r20, r24
for(i = 0; i < NUMBER_OF_SENSOR; i++)
  aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b2:	84 30       	cpi	r24, 0x04	; 4
  b4:	08 f0       	brcs	.+2      	; 0xb8 <updateData+0x14>
  b6:	48 c0       	rjmp	.+144    	; 0x148 <updateData+0xa4>
{

	if(sensorNum[i]->id == receiveMOb->id)
  b8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
  bc:	eb 01       	movw	r28, r22
  be:	a9 81       	ldd	r26, Y+1	; 0x01
  c0:	ba 81       	ldd	r27, Y+2	; 0x02
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	ee 0f       	add	r30, r30
  c6:	ff 1f       	adc	r31, r31
  c8:	e4 0f       	add	r30, r20
  ca:	f5 1f       	adc	r31, r21
  cc:	01 90       	ld	r0, Z+
  ce:	f0 81       	ld	r31, Z
  d0:	e0 2d       	mov	r30, r0
  d2:	80 81       	ld	r24, Z
  d4:	91 81       	ldd	r25, Z+1	; 0x01
  d6:	8a 17       	cp	r24, r26
  d8:	9b 07       	cpc	r25, r27
  da:	69 f5       	brne	.+90     	; 0x136 <updateData+0x92>
  dc:	0f c0       	rjmp	.+30     	; 0xfc <updateData+0x58>
  de:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	e4 0f       	add	r30, r20
  ea:	f5 1f       	adc	r31, r21
  ec:	01 90       	ld	r0, Z+
  ee:	f0 81       	ld	r31, Z
  f0:	e0 2d       	mov	r30, r0
  f2:	20 81       	ld	r18, Z
  f4:	31 81       	ldd	r19, Z+1	; 0x01
  f6:	2a 17       	cp	r18, r26
  f8:	3b 07       	cpc	r19, r27
  fa:	e9 f4       	brne	.+58     	; 0x136 <updateData+0x92>
	{
	sensorNum[i]->data = receiveMOb->pt_data;  //Change to support floats
  fc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e4 0f       	add	r30, r20
 108:	f5 1f       	adc	r31, r21
 10a:	01 90       	ld	r0, Z+
 10c:	f0 81       	ld	r31, Z
 10e:	e0 2d       	mov	r30, r0
 110:	db 01       	movw	r26, r22
 112:	16 96       	adiw	r26, 0x06	; 6
 114:	8c 91       	ld	r24, X
 116:	82 83       	std	Z+2, r24	; 0x02
	sensorNum[i]->numberOfMessages++;
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	fa 01       	movw	r30, r20
 124:	e8 0f       	add	r30, r24
 126:	f9 1f       	adc	r31, r25
 128:	01 90       	ld	r0, Z+
 12a:	f0 81       	ld	r31, Z
 12c:	e0 2d       	mov	r30, r0
 12e:	83 81       	ldd	r24, Z+3	; 0x03
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	83 83       	std	Z+3, r24	; 0x03
	return; 
 134:	09 c0       	rjmp	.+18     	; 0x148 <updateData+0xa4>
}


void updateData(sensorData* sensorNum[NUMBER_OF_SENSOR], st_cmd_t* receiveMOb)
{
for(i = 0; i < NUMBER_OF_SENSOR; i++)
 136:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 13a:	9f 5f       	subi	r25, 0xFF	; 255
 13c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 140:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 144:	94 30       	cpi	r25, 0x04	; 4
 146:	58 f2       	brcs	.-106    	; 0xde <updateData+0x3a>
	sensorNum[i]->numberOfMessages++;
	return; 
	}
}

}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <main>:
uint8_t numberOfMessages; 
uint8_t isSCS; 
} sensorData;

int main(void)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	a6 97       	sbiw	r28, 0x26	; 38
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
	heartBeat = 0; 
 162:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <heartBeat>

	uint8_t receive_buffer[MSG_SIZE];
	st_cmd_t receiveMOb;
	receiveMOb.pt_data = &receive_buffer[0];
 166:	ce 01       	movw	r24, r28
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	98 8b       	std	Y+16, r25	; 0x10
 16c:	8f 87       	std	Y+15, r24	; 0x0f
	receiveMOb.MObNumber = 0x01;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	89 8b       	std	Y+17, r24	; 0x11
	receiveMOb.dlc = MSG_SIZE;
 172:	98 e0       	ldi	r25, 0x08	; 8
 174:	9e 87       	std	Y+14, r25	; 0x0e
	receiveMOb.cmd = RX;
 176:	89 87       	std	Y+9, r24	; 0x09
	receiveMOb.id = 0x0000;
 178:	1b 86       	std	Y+11, r1	; 0x0b
 17a:	1a 86       	std	Y+10, r1	; 0x0a

sensorData sensorList[NUMBER_OF_SENSOR];

//Setup sensorData structs

sensorList[0].id = 0x00FF;
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	3c 8b       	std	Y+20, r19	; 0x14
 182:	2b 8b       	std	Y+19, r18	; 0x13
sensorList[0].data = 0; 
 184:	1d 8a       	std	Y+21, r1	; 0x15
sensorList[0].isSCS = 1; 
 186:	8f 8b       	std	Y+23, r24	; 0x17

// Add more....

if(tick > 0)
 188:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 18c:	88 23       	and	r24, r24
 18e:	d1 f1       	breq	.+116    	; 0x204 <main+0xb6>
{



if(receivedMessage > 0)
 190:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receivedMessage>
 194:	88 23       	and	r24, r24
 196:	61 f0       	breq	.+24     	; 0x1b0 <main+0x62>
{
	updateData(&sensorList, &receiveMOb);
 198:	be 01       	movw	r22, r28
 19a:	67 5f       	subi	r22, 0xF7	; 247
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
 19e:	ce 01       	movw	r24, r28
 1a0:	43 96       	adiw	r24, 0x13	; 19
 1a2:	0e 94 52 00 	call	0xa4	; 0xa4 <updateData>
	receivedMessage--; 
 1a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receivedMessage>
 1aa:	81 50       	subi	r24, 0x01	; 1
 1ac:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <receivedMessage>
}
    
if(heartBeat > 20)
 1b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartBeat>
 1b4:	85 31       	cpi	r24, 0x15	; 21
 1b6:	30 f1       	brcs	.+76     	; 0x204 <main+0xb6>
{
	for (i = 0; i < NUMBER_OF_SENSOR; i++)
 1b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c0:	84 30       	cpi	r24, 0x04	; 4
 1c2:	f0 f4       	brcc	.+60     	; 0x200 <main+0xb2>
	{

		if(sensorList[i].isSCS == 1)
 1c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	8e 0f       	add	r24, r30
 1d6:	9f 1f       	adc	r25, r31
 1d8:	e1 e0       	ldi	r30, 0x01	; 1
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ec 0f       	add	r30, r28
 1de:	fd 1f       	adc	r31, r29
 1e0:	e8 0f       	add	r30, r24
 1e2:	f9 1f       	adc	r31, r25
 1e4:	86 89       	ldd	r24, Z+22	; 0x16
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	11 f4       	brne	.+4      	; 0x1ee <main+0xa0>
		{

			if(sensorList[i].numberOfMessages < 0)
 1ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
	receivedMessage--; 
}
    
if(heartBeat > 20)
{
	for (i = 0; i < NUMBER_OF_SENSOR; i++)
 1ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	10 f3       	brcs	.-60     	; 0x1c4 <main+0x76>

		}

	}
 
heartBeat = 0; 
 200:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <heartBeat>


}


tick--; 
 204:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 208:	81 50       	subi	r24, 0x01	; 1
 20a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
}
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	a6 96       	adiw	r28, 0x26	; 38
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <__vector_15>:

}


ISR(TIMER0_COMPA_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
	tick++;
 230:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
	heartBeat++; 
 23a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartBeat>
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <heartBeat>

}
 244:	8f 91       	pop	r24
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <__vector_18>:

ISR( CAN_INT_vect )
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	8f 93       	push	r24
	receivedMessage++;
 25c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receivedMessage>
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <receivedMessage>

 266:	8f 91       	pop	r24
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
