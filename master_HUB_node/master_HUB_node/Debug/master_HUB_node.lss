
master_HUB_node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000a60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000193e  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc3  00000000  00000000  00002536  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c20  00000000  00000000  000034f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  0000411c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000945  00000000  00000000  00004418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000572  00000000  00000000  00004d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000052cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 ac 03 	jmp	0x758	; 0x758 <__vector_15>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 cb 03 	jmp	0x796	; 0x796 <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a4 30       	cpi	r26, 0x04	; 4
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 39 02 	call	0x472	; 0x472 <main>
  9c:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <can_clear_all_mob>:

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	19 82       	std	Y+1, r1	; 0x01
  b0:	12 c0       	rjmp	.+36     	; 0xd6 <can_clear_all_mob+0x32>
  b2:	8d ee       	ldi	r24, 0xED	; 237
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	29 81       	ldd	r18, Y+1	; 0x01
  b8:	22 95       	swap	r18
  ba:	20 7f       	andi	r18, 0xF0	; 240
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
  c0:	8f ee       	ldi	r24, 0xEF	; 239
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	fc 01       	movw	r30, r24
  c6:	10 82       	st	Z, r1
  c8:	8e ee       	ldi	r24, 0xEE	; 238
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	10 82       	st	Z, r1
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	89 83       	std	Y+1, r24	; 0x01
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	86 30       	cpi	r24, 0x06	; 6
  da:	58 f3       	brcs	.-42     	; 0xb2 <can_clear_all_mob+0xe>
  dc:	00 00       	nop
  de:	0f 90       	pop	r0
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate()
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
    Can_reset();
  ee:	88 ed       	ldi	r24, 0xD8	; 216
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
    Can_conf_bt();
  f8:	82 ee       	ldi	r24, 0xE2	; 226
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	22 e0       	ldi	r18, 0x02	; 2
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
 102:	83 ee       	ldi	r24, 0xE3	; 227
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	24 e0       	ldi	r18, 0x04	; 4
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
 10c:	84 ee       	ldi	r24, 0xE4	; 228
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	23 e1       	ldi	r18, 0x13	; 19
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
    return 1;
 116:	81 e0       	ldi	r24, 0x01	; 1
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <setup_receive_mob>:

void setup_receive_mob(st_cmd_t* MObStruct){
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	00 d0       	rcall	.+0      	; 0x124 <setup_receive_mob+0x6>
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	9a 83       	std	Y+2, r25	; 0x02
 12a:	89 83       	std	Y+1, r24	; 0x01
	
	CANPAGE = ( MObStruct->MObNumber << MOBNB0);			//Set canpage to the current mob
 12c:	8d ee       	ldi	r24, 0xED	; 237
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	29 81       	ldd	r18, Y+1	; 0x01
 132:	3a 81       	ldd	r19, Y+2	; 0x02
 134:	f9 01       	movw	r30, r18
 136:	20 85       	ldd	r18, Z+8	; 0x08
 138:	22 95       	swap	r18
 13a:	20 7f       	andi	r18, 0xF0	; 240
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
	
	CANIE2 |= ( 1 << MObStruct->MObNumber);				// Enable interrupts for the current mob
 140:	8e ed       	ldi	r24, 0xDE	; 222
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	2e ed       	ldi	r18, 0xDE	; 222
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	f9 01       	movw	r30, r18
 14a:	20 81       	ld	r18, Z
 14c:	62 2f       	mov	r22, r18
 14e:	29 81       	ldd	r18, Y+1	; 0x01
 150:	3a 81       	ldd	r19, Y+2	; 0x02
 152:	f9 01       	movw	r30, r18
 154:	20 85       	ldd	r18, Z+8	; 0x08
 156:	42 2f       	mov	r20, r18
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <setup_receive_mob+0x46>
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	4a 95       	dec	r20
 166:	e2 f7       	brpl	.-8      	; 0x160 <setup_receive_mob+0x42>
 168:	26 2b       	or	r18, r22
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
	
	CANIDM1 = (MObStruct->mask / 8);   	// Setup mask with the ID's to be received
 16e:	87 ef       	ldi	r24, 0xF7	; 247
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	29 81       	ldd	r18, Y+1	; 0x01
 174:	3a 81       	ldd	r19, Y+2	; 0x02
 176:	f9 01       	movw	r30, r18
 178:	23 81       	ldd	r18, Z+3	; 0x03
 17a:	34 81       	ldd	r19, Z+4	; 0x04
 17c:	36 95       	lsr	r19
 17e:	27 95       	ror	r18
 180:	36 95       	lsr	r19
 182:	27 95       	ror	r18
 184:	36 95       	lsr	r19
 186:	27 95       	ror	r18
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18

	CANIDM2 = ((MObStruct->mask & 0x07) << 5); 	// ""
 18c:	86 ef       	ldi	r24, 0xF6	; 246
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	29 81       	ldd	r18, Y+1	; 0x01
 192:	3a 81       	ldd	r19, Y+2	; 0x02
 194:	f9 01       	movw	r30, r18
 196:	23 81       	ldd	r18, Z+3	; 0x03
 198:	34 81       	ldd	r19, Z+4	; 0x04
 19a:	22 95       	swap	r18
 19c:	22 0f       	add	r18, r18
 19e:	20 7e       	andi	r18, 0xE0	; 224
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18

	CANIDM3 = 0x00; 	// ""
 1a4:	85 ef       	ldi	r24, 0xF5	; 245
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	fc 01       	movw	r30, r24
 1aa:	10 82       	st	Z, r1

	CANIDM4 = 0x00; 	// ""
 1ac:	84 ef       	ldi	r24, 0xF4	; 244
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fc 01       	movw	r30, r24
 1b2:	10 82       	st	Z, r1
	
	CANCDMOB = ( 1 << CONMOB1) | ( 8 << DLC0);
 1b4:	8f ee       	ldi	r24, 0xEF	; 239
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	28 e8       	ldi	r18, 0x88	; 136
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
	
 1be:	00 00       	nop
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <can_cmd>:
	CANSTMOB = 0x00; //reset MOb status register

	// Note - the DLC field of the CANCDMO register is updated by the received MOb. If the value differs from expected DLC, an error is set

} 
}
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <can_cmd+0x6>
 1d0:	1f 92       	push	r1
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	9b 83       	std	Y+3, r25	; 0x03
 1d8:	8a 83       	std	Y+2, r24	; 0x02
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	9b 81       	ldd	r25, Y+3	; 0x03
 1de:	fc 01       	movw	r30, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	88 2f       	mov	r24, r24
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	19 f0       	breq	.+6      	; 0x1f0 <can_cmd+0x26>
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	39 f0       	breq	.+14     	; 0x1fc <can_cmd+0x32>
 1ee:	0c c0       	rjmp	.+24     	; 0x208 <can_cmd+0x3e>
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
 1f2:	9b 81       	ldd	r25, Y+3	; 0x03
 1f4:	0e 94 1d 01 	call	0x23a	; 0x23a <can_tx>
 1f8:	19 82       	std	Y+1, r1	; 0x01
 1fa:	13 c0       	rjmp	.+38     	; 0x222 <can_cmd+0x58>
 1fc:	8a 81       	ldd	r24, Y+2	; 0x02
 1fe:	9b 81       	ldd	r25, Y+3	; 0x03
 200:	0e 94 8f 00 	call	0x11e	; 0x11e <setup_receive_mob>
 204:	19 82       	std	Y+1, r1	; 0x01
 206:	0d c0       	rjmp	.+26     	; 0x222 <can_cmd+0x58>
 208:	8b e2       	ldi	r24, 0x2B	; 43
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	2b e2       	ldi	r18, 0x2B	; 43
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	f9 01       	movw	r30, r18
 212:	30 81       	ld	r19, Z
 214:	20 e8       	ldi	r18, 0x80	; 128
 216:	23 27       	eor	r18, r19
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	89 83       	std	Y+1, r24	; 0x01
 220:	00 00       	nop
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	88 23       	and	r24, r24
 226:	11 f4       	brne	.+4      	; 0x22c <can_cmd+0x62>
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	01 c0       	rjmp	.+2      	; 0x22e <can_cmd+0x64>
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <can_tx>:
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	00 d0       	rcall	.+0      	; 0x240 <can_tx+0x6>
 240:	1f 92       	push	r1
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	9b 83       	std	Y+3, r25	; 0x03
 248:	8a 83       	std	Y+2, r24	; 0x02
 24a:	8a 81       	ldd	r24, Y+2	; 0x02
 24c:	9b 81       	ldd	r25, Y+3	; 0x03
 24e:	fc 01       	movw	r30, r24
 250:	80 85       	ldd	r24, Z+8	; 0x08
 252:	86 30       	cpi	r24, 0x06	; 6
 254:	08 f0       	brcs	.+2      	; 0x258 <can_tx+0x1e>
 256:	66 c0       	rjmp	.+204    	; 0x324 <can_tx+0xea>
 258:	8d ee       	ldi	r24, 0xED	; 237
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	2a 81       	ldd	r18, Y+2	; 0x02
 25e:	3b 81       	ldd	r19, Y+3	; 0x03
 260:	f9 01       	movw	r30, r18
 262:	20 85       	ldd	r18, Z+8	; 0x08
 264:	22 95       	swap	r18
 266:	20 7f       	andi	r18, 0xF0	; 240
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
 26c:	8e ee       	ldi	r24, 0xEE	; 238
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	fc 01       	movw	r30, r24
 272:	10 82       	st	Z, r1
 274:	83 ef       	ldi	r24, 0xF3	; 243
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	2a 81       	ldd	r18, Y+2	; 0x02
 27a:	3b 81       	ldd	r19, Y+3	; 0x03
 27c:	f9 01       	movw	r30, r18
 27e:	21 81       	ldd	r18, Z+1	; 0x01
 280:	32 81       	ldd	r19, Z+2	; 0x02
 282:	36 95       	lsr	r19
 284:	27 95       	ror	r18
 286:	36 95       	lsr	r19
 288:	27 95       	ror	r18
 28a:	36 95       	lsr	r19
 28c:	27 95       	ror	r18
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
 292:	82 ef       	ldi	r24, 0xF2	; 242
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	2a 81       	ldd	r18, Y+2	; 0x02
 298:	3b 81       	ldd	r19, Y+3	; 0x03
 29a:	f9 01       	movw	r30, r18
 29c:	21 81       	ldd	r18, Z+1	; 0x01
 29e:	32 81       	ldd	r19, Z+2	; 0x02
 2a0:	22 95       	swap	r18
 2a2:	22 0f       	add	r18, r18
 2a4:	20 7e       	andi	r18, 0xE0	; 224
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
 2aa:	81 ef       	ldi	r24, 0xF1	; 241
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	fc 01       	movw	r30, r24
 2b0:	10 82       	st	Z, r1
 2b2:	80 ef       	ldi	r24, 0xF0	; 240
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	fc 01       	movw	r30, r24
 2b8:	10 82       	st	Z, r1
 2ba:	19 82       	std	Y+1, r1	; 0x01
 2bc:	13 c0       	rjmp	.+38     	; 0x2e4 <can_tx+0xaa>
 2be:	8a ef       	ldi	r24, 0xFA	; 250
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	2a 81       	ldd	r18, Y+2	; 0x02
 2c4:	3b 81       	ldd	r19, Y+3	; 0x03
 2c6:	f9 01       	movw	r30, r18
 2c8:	46 81       	ldd	r20, Z+6	; 0x06
 2ca:	57 81       	ldd	r21, Z+7	; 0x07
 2cc:	29 81       	ldd	r18, Y+1	; 0x01
 2ce:	22 2f       	mov	r18, r18
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	24 0f       	add	r18, r20
 2d4:	35 1f       	adc	r19, r21
 2d6:	f9 01       	movw	r30, r18
 2d8:	20 81       	ld	r18, Z
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	89 83       	std	Y+1, r24	; 0x01
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	88 30       	cpi	r24, 0x08	; 8
 2e8:	50 f3       	brcs	.-44     	; 0x2be <can_tx+0x84>
 2ea:	8f ee       	ldi	r24, 0xEF	; 239
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	2a 81       	ldd	r18, Y+2	; 0x02
 2f0:	3b 81       	ldd	r19, Y+3	; 0x03
 2f2:	f9 01       	movw	r30, r18
 2f4:	25 81       	ldd	r18, Z+5	; 0x05
 2f6:	20 64       	ori	r18, 0x40	; 64
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
 2fc:	00 00       	nop
 2fe:	8e ee       	ldi	r24, 0xEE	; 238
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	fc 01       	movw	r30, r24
 304:	80 81       	ld	r24, Z
 306:	88 2f       	mov	r24, r24
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	80 74       	andi	r24, 0x40	; 64
 30c:	99 27       	eor	r25, r25
 30e:	89 2b       	or	r24, r25
 310:	b1 f3       	breq	.-20     	; 0x2fe <can_tx+0xc4>
 312:	8f ee       	ldi	r24, 0xEF	; 239
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	fc 01       	movw	r30, r24
 318:	10 82       	st	Z, r1
 31a:	8e ee       	ldi	r24, 0xEE	; 238
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	fc 01       	movw	r30, r24
 320:	10 82       	st	Z, r1
 322:	01 c0       	rjmp	.+2      	; 0x326 <can_tx+0xec>
 324:	00 00       	nop
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <can_init>:


uint8_t can_init()
{
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
	Can_bit_timing(1);
 33a:	0e 94 73 00 	call	0xe6	; 0xe6 <can_fixed_baudrate>
	can_clear_all_mob();                        // c.f. function in "can_drv.c"
 33e:	0e 94 52 00 	call	0xa4	; 0xa4 <can_clear_all_mob>
	Can_enable();								// c.f. macro in "can_drv.h"
 342:	88 ed       	ldi	r24, 0xD8	; 216
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	28 ed       	ldi	r18, 0xD8	; 216
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	f9 01       	movw	r30, r18
 34c:	20 81       	ld	r18, Z
 34e:	22 60       	ori	r18, 0x02	; 2
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18
	Can_enable_chosen_ints();                   // macro in "can_drv.h" - change to enable different general interrupts
 354:	8b ed       	ldi	r24, 0xDB	; 219
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	20 ea       	ldi	r18, 0xA0	; 160
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
	return (1);
 35e:	81 e0       	ldi	r24, 0x01	; 1
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <initSensors>:
 #include "Timer_drv.h"



 void initSensors(sensorData* sensorNum[NUMBER_OF_SENSOR], st_cmd_t* transmitMOb)
 {
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	00 d0       	rcall	.+0      	; 0x36c <initSensors+0x6>
 36c:	00 d0       	rcall	.+0      	; 0x36e <initSensors+0x8>
 36e:	1f 92       	push	r1
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	9b 83       	std	Y+3, r25	; 0x03
 376:	8a 83       	std	Y+2, r24	; 0x02
 378:	7d 83       	std	Y+5, r23	; 0x05
 37a:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8_t i = 0; i < NUMBER_OF_SENSOR; i++)
 37c:	19 82       	std	Y+1, r1	; 0x01
 37e:	15 c0       	rjmp	.+42     	; 0x3aa <initSensors+0x44>
	{
		sendServiceMessage(&sensorNum[i]->sensorStruct, transmitMOb);
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	88 2f       	mov	r24, r24
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	2a 81       	ldd	r18, Y+2	; 0x02
 38c:	3b 81       	ldd	r19, Y+3	; 0x03
 38e:	82 0f       	add	r24, r18
 390:	93 1f       	adc	r25, r19
 392:	fc 01       	movw	r30, r24
 394:	80 81       	ld	r24, Z
 396:	91 81       	ldd	r25, Z+1	; 0x01
 398:	03 96       	adiw	r24, 0x03	; 3
 39a:	2c 81       	ldd	r18, Y+4	; 0x04
 39c:	3d 81       	ldd	r19, Y+5	; 0x05
 39e:	b9 01       	movw	r22, r18
 3a0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <sendServiceMessage>



 void initSensors(sensorData* sensorNum[NUMBER_OF_SENSOR], st_cmd_t* transmitMOb)
 {
	for(uint8_t i = 0; i < NUMBER_OF_SENSOR; i++)
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	8f 5f       	subi	r24, 0xFF	; 255
 3a8:	89 83       	std	Y+1, r24	; 0x01
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	83 30       	cpi	r24, 0x03	; 3
 3ae:	40 f3       	brcs	.-48     	; 0x380 <initSensors+0x1a>
	{
		sendServiceMessage(&sensorNum[i]->sensorStruct, transmitMOb);
	}

 }
 3b0:	00 00       	nop
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <updateData>:



 void updateData(sensorData* sensorNum[NUMBER_OF_SENSOR], st_cmd_t* receiveMOb)
 {
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <updateData+0x6>
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <updateData+0x8>
 3ca:	1f 92       	push	r1
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	9b 83       	std	Y+3, r25	; 0x03
 3d2:	8a 83       	std	Y+2, r24	; 0x02
 3d4:	7d 83       	std	Y+5, r23	; 0x05
 3d6:	6c 83       	std	Y+4, r22	; 0x04
	 for(uint8_t i = 0; i < NUMBER_OF_SENSOR; i++)
 3d8:	19 82       	std	Y+1, r1	; 0x01
 3da:	3f c0       	rjmp	.+126    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	 {

		 if(sensorNum[i]->sensorStruct.CAN_ID == receiveMOb->id)
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	88 2f       	mov	r24, r24
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	2a 81       	ldd	r18, Y+2	; 0x02
 3e8:	3b 81       	ldd	r19, Y+3	; 0x03
 3ea:	82 0f       	add	r24, r18
 3ec:	93 1f       	adc	r25, r19
 3ee:	fc 01       	movw	r30, r24
 3f0:	80 81       	ld	r24, Z
 3f2:	91 81       	ldd	r25, Z+1	; 0x01
 3f4:	fc 01       	movw	r30, r24
 3f6:	23 81       	ldd	r18, Z+3	; 0x03
 3f8:	34 81       	ldd	r19, Z+4	; 0x04
 3fa:	8c 81       	ldd	r24, Y+4	; 0x04
 3fc:	9d 81       	ldd	r25, Y+5	; 0x05
 3fe:	fc 01       	movw	r30, r24
 400:	81 81       	ldd	r24, Z+1	; 0x01
 402:	92 81       	ldd	r25, Z+2	; 0x02
 404:	28 17       	cp	r18, r24
 406:	39 07       	cpc	r19, r25
 408:	29 f5       	brne	.+74     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		 {
			 sensorNum[i]->data = receiveMOb->pt_data;  //Change to support floats
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	88 2f       	mov	r24, r24
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	2a 81       	ldd	r18, Y+2	; 0x02
 416:	3b 81       	ldd	r19, Y+3	; 0x03
 418:	82 0f       	add	r24, r18
 41a:	93 1f       	adc	r25, r19
 41c:	fc 01       	movw	r30, r24
 41e:	80 81       	ld	r24, Z
 420:	91 81       	ldd	r25, Z+1	; 0x01
 422:	2c 81       	ldd	r18, Y+4	; 0x04
 424:	3d 81       	ldd	r19, Y+5	; 0x05
 426:	f9 01       	movw	r30, r18
 428:	26 81       	ldd	r18, Z+6	; 0x06
 42a:	37 81       	ldd	r19, Z+7	; 0x07
 42c:	fc 01       	movw	r30, r24
 42e:	20 83       	st	Z, r18
			 sensorNum[i]->numberOfMessages++;
 430:	89 81       	ldd	r24, Y+1	; 0x01
 432:	88 2f       	mov	r24, r24
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	2a 81       	ldd	r18, Y+2	; 0x02
 43c:	3b 81       	ldd	r19, Y+3	; 0x03
 43e:	82 0f       	add	r24, r18
 440:	93 1f       	adc	r25, r19
 442:	fc 01       	movw	r30, r24
 444:	80 81       	ld	r24, Z
 446:	91 81       	ldd	r25, Z+1	; 0x01
 448:	fc 01       	movw	r30, r24
 44a:	21 81       	ldd	r18, Z+1	; 0x01
 44c:	2f 5f       	subi	r18, 0xFF	; 255
 44e:	fc 01       	movw	r30, r24
 450:	21 83       	std	Z+1, r18	; 0x01
			 return;
 452:	07 c0       	rjmp	.+14     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>



 void updateData(sensorData* sensorNum[NUMBER_OF_SENSOR], st_cmd_t* receiveMOb)
 {
	 for(uint8_t i = 0; i < NUMBER_OF_SENSOR; i++)
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	8f 5f       	subi	r24, 0xFF	; 255
 458:	89 83       	std	Y+1, r24	; 0x01
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	83 30       	cpi	r24, 0x03	; 3
 45e:	08 f4       	brcc	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	bd cf       	rjmp	.-134    	; 0x3dc <updateData+0x1a>
			 sensorNum[i]->numberOfMessages++;
			 return;
		 }
	 }

 462:	0f 90       	pop	r0
 464:	0f 90       	pop	r0
 466:	0f 90       	pop	r0
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <main>:
volatile uint8_t receivedMessage; 
volatile uint8_t i; 


int main(void)
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	c5 57       	subi	r28, 0x75	; 117
 47c:	d1 09       	sbc	r29, r1
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
	chip_init();
 488:	0e 94 84 03 	call	0x708	; 0x708 <chip_init>
	can_init();
 48c:	0e 94 99 01 	call	0x332	; 0x332 <can_init>
	TimerSetup();
 490:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <TimerSetup>
	
	//bit_flip(PORTD, BIT(7));
	heartBeat = 0; 
 494:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <heartBeat>

	uint8_t receive_buffer[MSG_SIZE];
	st_cmd_t receiveMOb;
	receiveMOb.pt_data = &receive_buffer[0];
 498:	ce 01       	movw	r24, r28
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	98 8b       	std	Y+16, r25	; 0x10
 49e:	8f 87       	std	Y+15, r24	; 0x0f
	receiveMOb.MObNumber = 0x01;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	89 8b       	std	Y+17, r24	; 0x11
	receiveMOb.dlc = MSG_SIZE;
 4a4:	88 e0       	ldi	r24, 0x08	; 8
 4a6:	8e 87       	std	Y+14, r24	; 0x0e
	receiveMOb.cmd = RX;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	89 87       	std	Y+9, r24	; 0x09
	receiveMOb.id = 0x0000;
 4ac:	1b 86       	std	Y+11, r1	; 0x0b
 4ae:	1a 86       	std	Y+10, r1	; 0x0a


	uint8_t transmit_buffer[MSG_SIZE];
	st_cmd_t transmitMOb; 
	transmitMOb.pt_data = &transmit_buffer[0];
 4b0:	ce 01       	movw	r24, r28
 4b2:	43 96       	adiw	r24, 0x13	; 19
 4b4:	9a a3       	std	Y+34, r25	; 0x22
 4b6:	89 a3       	std	Y+33, r24	; 0x21
	transmitMOb.MObNumber = 0x02;
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	8b a3       	std	Y+35, r24	; 0x23
	transmitMOb.dlc = MSG_SIZE; 
 4bc:	88 e0       	ldi	r24, 0x08	; 8
 4be:	88 a3       	std	Y+32, r24	; 0x20
	transmitMOb.cmd = TX; 
 4c0:	1b 8e       	std	Y+27, r1	; 0x1b
	transmitMOb.id = 0x0000;  
 4c2:	1d 8e       	std	Y+29, r1	; 0x1d
 4c4:	1c 8e       	std	Y+28, r1	; 0x1c
polyCoef coefList1[2]; 
polyCoef coefList2[2];
polyCoef coefList3[2];


coefList1[0].floatCoef = 23.545; 
 4c6:	9e 01       	movw	r18, r28
 4c8:	22 5a       	subi	r18, 0xA2	; 162
 4ca:	3f 4f       	sbci	r19, 0xFF	; 255
 4cc:	89 e2       	ldi	r24, 0x29	; 41
 4ce:	9c e5       	ldi	r25, 0x5C	; 92
 4d0:	ac eb       	ldi	r26, 0xBC	; 188
 4d2:	b1 e4       	ldi	r27, 0x41	; 65
 4d4:	f9 01       	movw	r30, r18
 4d6:	80 83       	st	Z, r24
 4d8:	91 83       	std	Z+1, r25	; 0x01
 4da:	a2 83       	std	Z+2, r26	; 0x02
 4dc:	b3 83       	std	Z+3, r27	; 0x03
coefList1[1].floatCoef = 343.214; 
 4de:	9e 01       	movw	r18, r28
 4e0:	22 5a       	subi	r18, 0xA2	; 162
 4e2:	3f 4f       	sbci	r19, 0xFF	; 255
 4e4:	84 e6       	ldi	r24, 0x64	; 100
 4e6:	9b e9       	ldi	r25, 0x9B	; 155
 4e8:	ab ea       	ldi	r26, 0xAB	; 171
 4ea:	b3 e4       	ldi	r27, 0x43	; 67
 4ec:	f9 01       	movw	r30, r18
 4ee:	84 83       	std	Z+4, r24	; 0x04
 4f0:	95 83       	std	Z+5, r25	; 0x05
 4f2:	a6 83       	std	Z+6, r26	; 0x06
 4f4:	b7 83       	std	Z+7, r27	; 0x07

coefList2[0].floatCoef = 23.545;
 4f6:	9e 01       	movw	r18, r28
 4f8:	2a 59       	subi	r18, 0x9A	; 154
 4fa:	3f 4f       	sbci	r19, 0xFF	; 255
 4fc:	89 e2       	ldi	r24, 0x29	; 41
 4fe:	9c e5       	ldi	r25, 0x5C	; 92
 500:	ac eb       	ldi	r26, 0xBC	; 188
 502:	b1 e4       	ldi	r27, 0x41	; 65
 504:	f9 01       	movw	r30, r18
 506:	80 83       	st	Z, r24
 508:	91 83       	std	Z+1, r25	; 0x01
 50a:	a2 83       	std	Z+2, r26	; 0x02
 50c:	b3 83       	std	Z+3, r27	; 0x03
coefList2[1].floatCoef = 343.214;
 50e:	9e 01       	movw	r18, r28
 510:	2a 59       	subi	r18, 0x9A	; 154
 512:	3f 4f       	sbci	r19, 0xFF	; 255
 514:	84 e6       	ldi	r24, 0x64	; 100
 516:	9b e9       	ldi	r25, 0x9B	; 155
 518:	ab ea       	ldi	r26, 0xAB	; 171
 51a:	b3 e4       	ldi	r27, 0x43	; 67
 51c:	f9 01       	movw	r30, r18
 51e:	84 83       	std	Z+4, r24	; 0x04
 520:	95 83       	std	Z+5, r25	; 0x05
 522:	a6 83       	std	Z+6, r26	; 0x06
 524:	b7 83       	std	Z+7, r27	; 0x07

coefList3[0].floatCoef = 23.545;
 526:	9e 01       	movw	r18, r28
 528:	22 59       	subi	r18, 0x92	; 146
 52a:	3f 4f       	sbci	r19, 0xFF	; 255
 52c:	89 e2       	ldi	r24, 0x29	; 41
 52e:	9c e5       	ldi	r25, 0x5C	; 92
 530:	ac eb       	ldi	r26, 0xBC	; 188
 532:	b1 e4       	ldi	r27, 0x41	; 65
 534:	f9 01       	movw	r30, r18
 536:	80 83       	st	Z, r24
 538:	91 83       	std	Z+1, r25	; 0x01
 53a:	a2 83       	std	Z+2, r26	; 0x02
 53c:	b3 83       	std	Z+3, r27	; 0x03
coefList3[1].floatCoef = 343.214;
 53e:	9e 01       	movw	r18, r28
 540:	22 59       	subi	r18, 0x92	; 146
 542:	3f 4f       	sbci	r19, 0xFF	; 255
 544:	84 e6       	ldi	r24, 0x64	; 100
 546:	9b e9       	ldi	r25, 0x9B	; 155
 548:	ab ea       	ldi	r26, 0xAB	; 171
 54a:	b3 e4       	ldi	r27, 0x43	; 67
 54c:	f9 01       	movw	r30, r18
 54e:	84 83       	std	Z+4, r24	; 0x04
 550:	95 83       	std	Z+5, r25	; 0x05
 552:	a6 83       	std	Z+6, r26	; 0x06
 554:	b7 83       	std	Z+7, r27	; 0x07
//Setup sensorData structs

sensorList[0].sensorStruct.CAN_ID = 0x00FF;
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	99 a7       	std	Y+41, r25	; 0x29
 55c:	88 a7       	std	Y+40, r24	; 0x28
sensorList[0].sensorStruct.samplingfreq = 0xFF; 
 55e:	8f ef       	ldi	r24, 0xFF	; 255
 560:	8c ab       	std	Y+52, r24	; 0x34
sensorList[0].sensorStruct.period = 2;
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	8c a7       	std	Y+44, r24	; 0x2c
sensorList[0].sensorStruct.cutOffFreq = 2; 
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	8d a7       	std	Y+45, r24	; 0x2d
sensorList[0].sensorStruct.unit = celsius; 
 56a:	1b a6       	std	Y+43, r1	; 0x2b
sensorList[0].sensorStruct.sensor_Type = other_sensor;
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	8a a7       	std	Y+42, r24	; 0x2a
sensorList[0].sensorStruct.totalNumberOfpolynomials = 2;
 570:	82 e0       	ldi	r24, 0x02	; 2
 572:	8f ab       	std	Y+55, r24	; 0x37
sensorList[0].sensorStruct.polynomialList = &coefList1[0]; 
 574:	ce 01       	movw	r24, r28
 576:	82 5a       	subi	r24, 0xA2	; 162
 578:	9f 4f       	sbci	r25, 0xFF	; 255
 57a:	9e ab       	std	Y+54, r25	; 0x36
 57c:	8d ab       	std	Y+53, r24	; 0x35
sensorList[0].data = 0;
 57e:	1d a2       	std	Y+37, r1	; 0x25
sensorList[0].isSCS = 1; 
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	8f a3       	std	Y+39, r24	; 0x27


sensorList[1].sensorStruct.CAN_ID = 0x00FF;
 584:	8f ef       	ldi	r24, 0xFF	; 255
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	9c af       	std	Y+60, r25	; 0x3c
 58a:	8b af       	std	Y+59, r24	; 0x3b
sensorList[1].sensorStruct.samplingfreq = 2;
 58c:	ce 01       	movw	r24, r28
 58e:	89 5b       	subi	r24, 0xB9	; 185
 590:	9f 4f       	sbci	r25, 0xFF	; 255
 592:	22 e0       	ldi	r18, 0x02	; 2
 594:	fc 01       	movw	r30, r24
 596:	20 83       	st	Z, r18
sensorList[1].sensorStruct.period = 2; 
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	8f af       	std	Y+63, r24	; 0x3f
sensorList[1].sensorStruct.unit = celsius;
 59c:	1e ae       	std	Y+62, r1	; 0x3e
sensorList[1].sensorStruct.sensor_Type = other_sensor;
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	8d af       	std	Y+61, r24	; 0x3d
sensorList[1].sensorStruct.totalNumberOfpolynomials = 2;
 5a2:	ce 01       	movw	r24, r28
 5a4:	86 5b       	subi	r24, 0xB6	; 182
 5a6:	9f 4f       	sbci	r25, 0xFF	; 255
 5a8:	22 e0       	ldi	r18, 0x02	; 2
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
sensorList[0].sensorStruct.polynomialList = &coefList2[0]; 
 5ae:	ce 01       	movw	r24, r28
 5b0:	8a 59       	subi	r24, 0x9A	; 154
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	9e ab       	std	Y+54, r25	; 0x36
 5b6:	8d ab       	std	Y+53, r24	; 0x35
sensorList[1].data = 0;
 5b8:	18 ae       	std	Y+56, r1	; 0x38
sensorList[1].isSCS = 1;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	8a af       	std	Y+58, r24	; 0x3a

sensorList[2].sensorStruct.CAN_ID = 0x00FF;
 5be:	ce 01       	movw	r24, r28
 5c0:	82 5b       	subi	r24, 0xB2	; 178
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	2f ef       	ldi	r18, 0xFF	; 255
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	fc 01       	movw	r30, r24
 5ca:	31 83       	std	Z+1, r19	; 0x01
 5cc:	20 83       	st	Z, r18
sensorList[2].sensorStruct.samplingfreq = 0xFF;
 5ce:	ce 01       	movw	r24, r28
 5d0:	86 5a       	subi	r24, 0xA6	; 166
 5d2:	9f 4f       	sbci	r25, 0xFF	; 255
 5d4:	2f ef       	ldi	r18, 0xFF	; 255
 5d6:	fc 01       	movw	r30, r24
 5d8:	20 83       	st	Z, r18
sensorList[2].sensorStruct.unit = celsius;
 5da:	ce 01       	movw	r24, r28
 5dc:	8f 5a       	subi	r24, 0xAF	; 175
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	fc 01       	movw	r30, r24
 5e2:	10 82       	st	Z, r1
sensorList[2].sensorStruct.sensor_Type = other_sensor;
 5e4:	ce 01       	movw	r24, r28
 5e6:	80 5b       	subi	r24, 0xB0	; 176
 5e8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ea:	22 e0       	ldi	r18, 0x02	; 2
 5ec:	fc 01       	movw	r30, r24
 5ee:	20 83       	st	Z, r18
sensorList[2].sensorStruct.totalNumberOfpolynomials = 2;
 5f0:	ce 01       	movw	r24, r28
 5f2:	83 5a       	subi	r24, 0xA3	; 163
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	22 e0       	ldi	r18, 0x02	; 2
 5f8:	fc 01       	movw	r30, r24
 5fa:	20 83       	st	Z, r18
sensorList[0].sensorStruct.polynomialList = &coefList3[0]; 
 5fc:	ce 01       	movw	r24, r28
 5fe:	82 59       	subi	r24, 0x92	; 146
 600:	9f 4f       	sbci	r25, 0xFF	; 255
 602:	9e ab       	std	Y+54, r25	; 0x36
 604:	8d ab       	std	Y+53, r24	; 0x35
sensorList[2].data = 0;
 606:	ce 01       	movw	r24, r28
 608:	85 5b       	subi	r24, 0xB5	; 181
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	fc 01       	movw	r30, r24
 60e:	10 82       	st	Z, r1
sensorList[2].isSCS = 1;
 610:	ce 01       	movw	r24, r28
 612:	83 5b       	subi	r24, 0xB3	; 179
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	fc 01       	movw	r30, r24
 61a:	20 83       	st	Z, r18


initSensors(&sensorList, &transmitMOb);
 61c:	9e 01       	movw	r18, r28
 61e:	25 5e       	subi	r18, 0xE5	; 229
 620:	3f 4f       	sbci	r19, 0xFF	; 255
 622:	ce 01       	movw	r24, r28
 624:	85 96       	adiw	r24, 0x25	; 37
 626:	b9 01       	movw	r22, r18
 628:	0e 94 b3 01 	call	0x366	; 0x366 <initSensors>

sei();
 62c:	78 94       	sei

while(1)
{

	if(receivedMessage > 0)
 62e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receivedMessage>
 632:	88 23       	and	r24, r24
 634:	69 f0       	breq	.+26     	; 0x650 <main+0x1de>
	{
		updateData(&sensorList, &receiveMOb);
 636:	9e 01       	movw	r18, r28
 638:	27 5f       	subi	r18, 0xF7	; 247
 63a:	3f 4f       	sbci	r19, 0xFF	; 255
 63c:	ce 01       	movw	r24, r28
 63e:	85 96       	adiw	r24, 0x25	; 37
 640:	b9 01       	movw	r22, r18
 642:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <updateData>
		receivedMessage--; 
 646:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receivedMessage>
 64a:	81 50       	subi	r24, 0x01	; 1
 64c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <receivedMessage>
	}

	if(tick > 0)
 650:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 654:	88 23       	and	r24, r24
 656:	09 f4       	brne	.+2      	; 0x65a <main+0x1e8>
 658:	4c c0       	rjmp	.+152    	; 0x6f2 <main+0x280>
	{
    
		if(heartBeat > 20)
 65a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartBeat>
 65e:	85 31       	cpi	r24, 0x15	; 21
 660:	08 f4       	brcc	.+2      	; 0x664 <main+0x1f2>
 662:	47 c0       	rjmp	.+142    	; 0x6f2 <main+0x280>
		{
			for (i = 0; i < NUMBER_OF_SENSOR; i++)
 664:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 668:	3d c0       	rjmp	.+122    	; 0x6e4 <main+0x272>
			{

				if(sensorList[i].isSCS == 1)
 66a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 66e:	28 2f       	mov	r18, r24
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	43 e1       	ldi	r20, 0x13	; 19
 674:	42 9f       	mul	r20, r18
 676:	c0 01       	movw	r24, r0
 678:	43 9f       	mul	r20, r19
 67a:	90 0d       	add	r25, r0
 67c:	11 24       	eor	r1, r1
 67e:	9e 01       	movw	r18, r28
 680:	2f 5f       	subi	r18, 0xFF	; 255
 682:	3f 4f       	sbci	r19, 0xFF	; 255
 684:	82 0f       	add	r24, r18
 686:	93 1f       	adc	r25, r19
 688:	86 96       	adiw	r24, 0x26	; 38
 68a:	fc 01       	movw	r30, r24
 68c:	80 81       	ld	r24, Z
 68e:	81 30       	cpi	r24, 0x01	; 1
 690:	21 f5       	brne	.+72     	; 0x6da <main+0x268>
				{

					if(sensorList[i].numberOfMessages == 0)
 692:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 696:	28 2f       	mov	r18, r24
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	43 e1       	ldi	r20, 0x13	; 19
 69c:	42 9f       	mul	r20, r18
 69e:	c0 01       	movw	r24, r0
 6a0:	43 9f       	mul	r20, r19
 6a2:	90 0d       	add	r25, r0
 6a4:	11 24       	eor	r1, r1
 6a6:	9e 01       	movw	r18, r28
 6a8:	2f 5f       	subi	r18, 0xFF	; 255
 6aa:	3f 4f       	sbci	r19, 0xFF	; 255
 6ac:	82 0f       	add	r24, r18
 6ae:	93 1f       	adc	r25, r19
 6b0:	85 96       	adiw	r24, 0x25	; 37
 6b2:	fc 01       	movw	r30, r24
 6b4:	80 81       	ld	r24, Z
					{
						//Send alert
					}

					sensorList[i].numberOfMessages = 0; 
 6b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6ba:	28 2f       	mov	r18, r24
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	43 e1       	ldi	r20, 0x13	; 19
 6c0:	42 9f       	mul	r20, r18
 6c2:	c0 01       	movw	r24, r0
 6c4:	43 9f       	mul	r20, r19
 6c6:	90 0d       	add	r25, r0
 6c8:	11 24       	eor	r1, r1
 6ca:	9e 01       	movw	r18, r28
 6cc:	2f 5f       	subi	r18, 0xFF	; 255
 6ce:	3f 4f       	sbci	r19, 0xFF	; 255
 6d0:	82 0f       	add	r24, r18
 6d2:	93 1f       	adc	r25, r19
 6d4:	85 96       	adiw	r24, 0x25	; 37
 6d6:	fc 01       	movw	r30, r24
 6d8:	10 82       	st	Z, r1
	if(tick > 0)
	{
    
		if(heartBeat > 20)
		{
			for (i = 0; i < NUMBER_OF_SENSOR; i++)
 6da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6de:	8f 5f       	subi	r24, 0xFF	; 255
 6e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 6e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6e8:	83 30       	cpi	r24, 0x03	; 3
 6ea:	08 f4       	brcc	.+2      	; 0x6ee <main+0x27c>
 6ec:	be cf       	rjmp	.-132    	; 0x66a <main+0x1f8>
					sensorList[i].numberOfMessages = 0; 
				}

			}
 
			heartBeat = 0; 
 6ee:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <heartBeat>
		}



	}
	heartBeat++; 
 6f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartBeat>
 6f6:	8f 5f       	subi	r24, 0xFF	; 255
 6f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <heartBeat>
	tick--; 
 6fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 700:	81 50       	subi	r24, 0x01	; 1
 702:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
}
 706:	93 cf       	rjmp	.-218    	; 0x62e <main+0x1bc>

00000708 <chip_init>:

}


void chip_init(void){
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	cd b7       	in	r28, 0x3d	; 61
 70e:	de b7       	in	r29, 0x3e	; 62

	//***** Chip initialization
	DDRC = 4; //Set TXCAN as output and RXCAN as input
 710:	87 e2       	ldi	r24, 0x27	; 39
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	24 e0       	ldi	r18, 0x04	; 4
 716:	fc 01       	movw	r30, r24
 718:	20 83       	st	Z, r18
	
	bit_set(DDRD, BIT(1));
 71a:	8a e2       	ldi	r24, 0x2A	; 42
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	2a e2       	ldi	r18, 0x2A	; 42
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	f9 01       	movw	r30, r18
 724:	20 81       	ld	r18, Z
 726:	22 60       	ori	r18, 0x02	; 2
 728:	fc 01       	movw	r30, r24
 72a:	20 83       	st	Z, r18
	bit_set(DDRD, BIT(7));
 72c:	8a e2       	ldi	r24, 0x2A	; 42
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	2a e2       	ldi	r18, 0x2A	; 42
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	f9 01       	movw	r30, r18
 736:	20 81       	ld	r18, Z
 738:	20 68       	ori	r18, 0x80	; 128
 73a:	fc 01       	movw	r30, r24
 73c:	20 83       	st	Z, r18
	
	bit_set(PORTD, BIT(1));
 73e:	8b e2       	ldi	r24, 0x2B	; 43
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	2b e2       	ldi	r18, 0x2B	; 43
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	f9 01       	movw	r30, r18
 748:	20 81       	ld	r18, Z
 74a:	22 60       	ori	r18, 0x02	; 2
 74c:	fc 01       	movw	r30, r24
 74e:	20 83       	st	Z, r18
	//bit_set(PORTD, BIT(7));

}
 750:	00 00       	nop
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	08 95       	ret

00000758 <__vector_15>:



ISR(TIMER0_COMPA_vect)
{
 758:	1f 92       	push	r1
 75a:	0f 92       	push	r0
 75c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 760:	0f 92       	push	r0
 762:	11 24       	eor	r1, r1
 764:	8f 93       	push	r24
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	cd b7       	in	r28, 0x3d	; 61
 76c:	de b7       	in	r29, 0x3e	; 62
	tick++;
 76e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 772:	8f 5f       	subi	r24, 0xFF	; 255
 774:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
	heartBeat++; 
 778:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <heartBeat>
 77c:	8f 5f       	subi	r24, 0xFF	; 255
 77e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <heartBeat>
}
 782:	00 00       	nop
 784:	df 91       	pop	r29
 786:	cf 91       	pop	r28
 788:	8f 91       	pop	r24
 78a:	0f 90       	pop	r0
 78c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 790:	0f 90       	pop	r0
 792:	1f 90       	pop	r1
 794:	18 95       	reti

00000796 <__vector_18>:

ISR( CAN_INT_vect )
{
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 79e:	0f 92       	push	r0
 7a0:	11 24       	eor	r1, r1
 7a2:	8f 93       	push	r24
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	cd b7       	in	r28, 0x3d	; 61
 7aa:	de b7       	in	r29, 0x3e	; 62
	receivedMessage++;
 7ac:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receivedMessage>
 7b0:	8f 5f       	subi	r24, 0xFF	; 255
 7b2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <receivedMessage>

 7b6:	00 00       	nop
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	8f 91       	pop	r24
 7be:	0f 90       	pop	r0
 7c0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 7c4:	0f 90       	pop	r0
 7c6:	1f 90       	pop	r1
 7c8:	18 95       	reti

000007ca <sendServiceMessage>:
	//ACK_FROM_NODE(sensor); //NEEDS TO BE MADE!. TRANSMIT THE STRUCT BACK
}

// sendServiceMessage puts parameters into array, which can be sent
void sendServiceMessage(sensor_at_node* sensorAtNode, st_cmd_t* transmitMOb)//sensor_Types type, units unit, uint8_t range_min, uint8_t range_max, uint8_t trans_frq, uint8_t sampl_frq, uint8_t filt_type, uint8_t filt_par)
{
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	00 d0       	rcall	.+0      	; 0x7d0 <sendServiceMessage+0x6>
 7d0:	00 d0       	rcall	.+0      	; 0x7d2 <sendServiceMessage+0x8>
 7d2:	00 d0       	rcall	.+0      	; 0x7d4 <sendServiceMessage+0xa>
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	9c 83       	std	Y+4, r25	; 0x04
 7da:	8b 83       	std	Y+3, r24	; 0x03
 7dc:	7e 83       	std	Y+6, r23	; 0x06
 7de:	6d 83       	std	Y+5, r22	; 0x05
	transmitMOb->pt_data[0] = 0b11000011;
 7e0:	8d 81       	ldd	r24, Y+5	; 0x05
 7e2:	9e 81       	ldd	r25, Y+6	; 0x06
 7e4:	fc 01       	movw	r30, r24
 7e6:	86 81       	ldd	r24, Z+6	; 0x06
 7e8:	97 81       	ldd	r25, Z+7	; 0x07
 7ea:	23 ec       	ldi	r18, 0xC3	; 195
 7ec:	fc 01       	movw	r30, r24
 7ee:	20 83       	st	Z, r18
	
	//transmitMOb->pt_data[1] = sensorAtNode->sensor_Type << 4 | sensorAtNode->unit;
	transmitMOb->pt_data[2] = (sensorAtNode->period);
 7f0:	8d 81       	ldd	r24, Y+5	; 0x05
 7f2:	9e 81       	ldd	r25, Y+6	; 0x06
 7f4:	fc 01       	movw	r30, r24
 7f6:	86 81       	ldd	r24, Z+6	; 0x06
 7f8:	97 81       	ldd	r25, Z+7	; 0x07
 7fa:	02 96       	adiw	r24, 0x02	; 2
 7fc:	2b 81       	ldd	r18, Y+3	; 0x03
 7fe:	3c 81       	ldd	r19, Y+4	; 0x04
 800:	f9 01       	movw	r30, r18
 802:	24 81       	ldd	r18, Z+4	; 0x04
 804:	fc 01       	movw	r30, r24
 806:	20 83       	st	Z, r18
	transmitMOb->pt_data[3] = sensorAtNode->cutOffFreq;
 808:	8d 81       	ldd	r24, Y+5	; 0x05
 80a:	9e 81       	ldd	r25, Y+6	; 0x06
 80c:	fc 01       	movw	r30, r24
 80e:	86 81       	ldd	r24, Z+6	; 0x06
 810:	97 81       	ldd	r25, Z+7	; 0x07
 812:	03 96       	adiw	r24, 0x03	; 3
 814:	2b 81       	ldd	r18, Y+3	; 0x03
 816:	3c 81       	ldd	r19, Y+4	; 0x04
 818:	f9 01       	movw	r30, r18
 81a:	25 81       	ldd	r18, Z+5	; 0x05
 81c:	fc 01       	movw	r30, r24
 81e:	20 83       	st	Z, r18
	
	for (uint8_t i = 4; i < 8; i++)
 820:	84 e0       	ldi	r24, 0x04	; 4
 822:	89 83       	std	Y+1, r24	; 0x01
 824:	03 c0       	rjmp	.+6      	; 0x82c <sendServiceMessage+0x62>
 826:	89 81       	ldd	r24, Y+1	; 0x01
 828:	8f 5f       	subi	r24, 0xFF	; 255
 82a:	89 83       	std	Y+1, r24	; 0x01
 82c:	89 81       	ldd	r24, Y+1	; 0x01
 82e:	88 30       	cpi	r24, 0x08	; 8
 830:	d0 f3       	brcs	.-12     	; 0x826 <sendServiceMessage+0x5c>
	{
	//transmitMOb->pt_data[i] = sensorAtNode->totalNumberOfpolynomials;
	} 

	can_cmd(transmitMOb); //Send first message
 832:	8d 81       	ldd	r24, Y+5	; 0x05
 834:	9e 81       	ldd	r25, Y+6	; 0x06
 836:	0e 94 e5 00 	call	0x1ca	; 0x1ca <can_cmd>

	for (uint8_t i = 0; i < sensorAtNode->totalNumberOfpolynomials; i++)
 83a:	1a 82       	std	Y+2, r1	; 0x02
 83c:	a7 c0       	rjmp	.+334    	; 0x98c <__stack+0x8d>
	{
	transmitMOb->pt_data[0] = 0b11000101;
 83e:	8d 81       	ldd	r24, Y+5	; 0x05
 840:	9e 81       	ldd	r25, Y+6	; 0x06
 842:	fc 01       	movw	r30, r24
 844:	86 81       	ldd	r24, Z+6	; 0x06
 846:	97 81       	ldd	r25, Z+7	; 0x07
 848:	25 ec       	ldi	r18, 0xC5	; 197
 84a:	fc 01       	movw	r30, r24
 84c:	20 83       	st	Z, r18
	transmitMOb->pt_data[1] = ((i+1) << 4) & sensorAtNode->totalNumberOfpolynomials;
 84e:	8d 81       	ldd	r24, Y+5	; 0x05
 850:	9e 81       	ldd	r25, Y+6	; 0x06
 852:	fc 01       	movw	r30, r24
 854:	86 81       	ldd	r24, Z+6	; 0x06
 856:	97 81       	ldd	r25, Z+7	; 0x07
 858:	01 96       	adiw	r24, 0x01	; 1
 85a:	2a 81       	ldd	r18, Y+2	; 0x02
 85c:	22 2f       	mov	r18, r18
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	2f 5f       	subi	r18, 0xFF	; 255
 862:	3f 4f       	sbci	r19, 0xFF	; 255
 864:	22 95       	swap	r18
 866:	32 95       	swap	r19
 868:	30 7f       	andi	r19, 0xF0	; 240
 86a:	32 27       	eor	r19, r18
 86c:	20 7f       	andi	r18, 0xF0	; 240
 86e:	32 27       	eor	r19, r18
 870:	42 2f       	mov	r20, r18
 872:	2b 81       	ldd	r18, Y+3	; 0x03
 874:	3c 81       	ldd	r19, Y+4	; 0x04
 876:	f9 01       	movw	r30, r18
 878:	27 85       	ldd	r18, Z+15	; 0x0f
 87a:	24 23       	and	r18, r20
 87c:	fc 01       	movw	r30, r24
 87e:	20 83       	st	Z, r18
	transmitMOb->pt_data[2] = sensorAtNode->polynomialList[i].binCoef & 0xFF;
 880:	8d 81       	ldd	r24, Y+5	; 0x05
 882:	9e 81       	ldd	r25, Y+6	; 0x06
 884:	fc 01       	movw	r30, r24
 886:	86 81       	ldd	r24, Z+6	; 0x06
 888:	97 81       	ldd	r25, Z+7	; 0x07
 88a:	9c 01       	movw	r18, r24
 88c:	2e 5f       	subi	r18, 0xFE	; 254
 88e:	3f 4f       	sbci	r19, 0xFF	; 255
 890:	8b 81       	ldd	r24, Y+3	; 0x03
 892:	9c 81       	ldd	r25, Y+4	; 0x04
 894:	fc 01       	movw	r30, r24
 896:	45 85       	ldd	r20, Z+13	; 0x0d
 898:	56 85       	ldd	r21, Z+14	; 0x0e
 89a:	8a 81       	ldd	r24, Y+2	; 0x02
 89c:	88 2f       	mov	r24, r24
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	88 0f       	add	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	84 0f       	add	r24, r20
 8aa:	95 1f       	adc	r25, r21
 8ac:	fc 01       	movw	r30, r24
 8ae:	80 81       	ld	r24, Z
 8b0:	91 81       	ldd	r25, Z+1	; 0x01
 8b2:	a2 81       	ldd	r26, Z+2	; 0x02
 8b4:	b3 81       	ldd	r27, Z+3	; 0x03
 8b6:	f9 01       	movw	r30, r18
 8b8:	80 83       	st	Z, r24
	transmitMOb->pt_data[3] = sensorAtNode->polynomialList[i].binCoef >> 8 & 0xFF;
 8ba:	8d 81       	ldd	r24, Y+5	; 0x05
 8bc:	9e 81       	ldd	r25, Y+6	; 0x06
 8be:	fc 01       	movw	r30, r24
 8c0:	86 81       	ldd	r24, Z+6	; 0x06
 8c2:	97 81       	ldd	r25, Z+7	; 0x07
 8c4:	9c 01       	movw	r18, r24
 8c6:	2d 5f       	subi	r18, 0xFD	; 253
 8c8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ca:	8b 81       	ldd	r24, Y+3	; 0x03
 8cc:	9c 81       	ldd	r25, Y+4	; 0x04
 8ce:	fc 01       	movw	r30, r24
 8d0:	45 85       	ldd	r20, Z+13	; 0x0d
 8d2:	56 85       	ldd	r21, Z+14	; 0x0e
 8d4:	8a 81       	ldd	r24, Y+2	; 0x02
 8d6:	88 2f       	mov	r24, r24
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	88 0f       	add	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	84 0f       	add	r24, r20
 8e4:	95 1f       	adc	r25, r21
 8e6:	fc 01       	movw	r30, r24
 8e8:	80 81       	ld	r24, Z
 8ea:	91 81       	ldd	r25, Z+1	; 0x01
 8ec:	a2 81       	ldd	r26, Z+2	; 0x02
 8ee:	b3 81       	ldd	r27, Z+3	; 0x03
 8f0:	89 2f       	mov	r24, r25
 8f2:	9a 2f       	mov	r25, r26
 8f4:	ab 2f       	mov	r26, r27
 8f6:	bb 27       	eor	r27, r27
 8f8:	f9 01       	movw	r30, r18
 8fa:	80 83       	st	Z, r24
	transmitMOb->pt_data[4] = sensorAtNode->polynomialList[i].binCoef >> 16 & 0xFF;
 8fc:	8d 81       	ldd	r24, Y+5	; 0x05
 8fe:	9e 81       	ldd	r25, Y+6	; 0x06
 900:	fc 01       	movw	r30, r24
 902:	86 81       	ldd	r24, Z+6	; 0x06
 904:	97 81       	ldd	r25, Z+7	; 0x07
 906:	9c 01       	movw	r18, r24
 908:	2c 5f       	subi	r18, 0xFC	; 252
 90a:	3f 4f       	sbci	r19, 0xFF	; 255
 90c:	8b 81       	ldd	r24, Y+3	; 0x03
 90e:	9c 81       	ldd	r25, Y+4	; 0x04
 910:	fc 01       	movw	r30, r24
 912:	45 85       	ldd	r20, Z+13	; 0x0d
 914:	56 85       	ldd	r21, Z+14	; 0x0e
 916:	8a 81       	ldd	r24, Y+2	; 0x02
 918:	88 2f       	mov	r24, r24
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	88 0f       	add	r24, r24
 91e:	99 1f       	adc	r25, r25
 920:	88 0f       	add	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	84 0f       	add	r24, r20
 926:	95 1f       	adc	r25, r21
 928:	fc 01       	movw	r30, r24
 92a:	80 81       	ld	r24, Z
 92c:	91 81       	ldd	r25, Z+1	; 0x01
 92e:	a2 81       	ldd	r26, Z+2	; 0x02
 930:	b3 81       	ldd	r27, Z+3	; 0x03
 932:	cd 01       	movw	r24, r26
 934:	aa 27       	eor	r26, r26
 936:	bb 27       	eor	r27, r27
 938:	f9 01       	movw	r30, r18
 93a:	80 83       	st	Z, r24
	transmitMOb->pt_data[5] = sensorAtNode->polynomialList[i].binCoef >> 24 & 0xFF;
 93c:	8d 81       	ldd	r24, Y+5	; 0x05
 93e:	9e 81       	ldd	r25, Y+6	; 0x06
 940:	fc 01       	movw	r30, r24
 942:	86 81       	ldd	r24, Z+6	; 0x06
 944:	97 81       	ldd	r25, Z+7	; 0x07
 946:	9c 01       	movw	r18, r24
 948:	2b 5f       	subi	r18, 0xFB	; 251
 94a:	3f 4f       	sbci	r19, 0xFF	; 255
 94c:	8b 81       	ldd	r24, Y+3	; 0x03
 94e:	9c 81       	ldd	r25, Y+4	; 0x04
 950:	fc 01       	movw	r30, r24
 952:	45 85       	ldd	r20, Z+13	; 0x0d
 954:	56 85       	ldd	r21, Z+14	; 0x0e
 956:	8a 81       	ldd	r24, Y+2	; 0x02
 958:	88 2f       	mov	r24, r24
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	88 0f       	add	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	84 0f       	add	r24, r20
 966:	95 1f       	adc	r25, r21
 968:	fc 01       	movw	r30, r24
 96a:	80 81       	ld	r24, Z
 96c:	91 81       	ldd	r25, Z+1	; 0x01
 96e:	a2 81       	ldd	r26, Z+2	; 0x02
 970:	b3 81       	ldd	r27, Z+3	; 0x03
 972:	8b 2f       	mov	r24, r27
 974:	99 27       	eor	r25, r25
 976:	aa 27       	eor	r26, r26
 978:	bb 27       	eor	r27, r27
 97a:	f9 01       	movw	r30, r18
 97c:	80 83       	st	Z, r24
	can_cmd(transmitMOb);
 97e:	8d 81       	ldd	r24, Y+5	; 0x05
 980:	9e 81       	ldd	r25, Y+6	; 0x06
 982:	0e 94 e5 00 	call	0x1ca	; 0x1ca <can_cmd>
	//transmitMOb->pt_data[i] = sensorAtNode->totalNumberOfpolynomials;
	} 

	can_cmd(transmitMOb); //Send first message

	for (uint8_t i = 0; i < sensorAtNode->totalNumberOfpolynomials; i++)
 986:	8a 81       	ldd	r24, Y+2	; 0x02
 988:	8f 5f       	subi	r24, 0xFF	; 255
 98a:	8a 83       	std	Y+2, r24	; 0x02
 98c:	8b 81       	ldd	r24, Y+3	; 0x03
 98e:	9c 81       	ldd	r25, Y+4	; 0x04
 990:	fc 01       	movw	r30, r24
 992:	97 85       	ldd	r25, Z+15	; 0x0f
 994:	8a 81       	ldd	r24, Y+2	; 0x02
 996:	89 17       	cp	r24, r25
 998:	08 f4       	brcc	.+2      	; 0x99c <__stack+0x9d>
 99a:	51 cf       	rjmp	.-350    	; 0x83e <sendServiceMessage+0x74>
	transmitMOb->pt_data[5] = sensorAtNode->polynomialList[i].binCoef >> 24 & 0xFF;
	can_cmd(transmitMOb);
	}


}
 99c:	00 00       	nop
 99e:	26 96       	adiw	r28, 0x06	; 6
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	f8 94       	cli
 9a4:	de bf       	out	0x3e, r29	; 62
 9a6:	0f be       	out	0x3f, r0	; 63
 9a8:	cd bf       	out	0x3d, r28	; 61
 9aa:	df 91       	pop	r29
 9ac:	cf 91       	pop	r28
 9ae:	08 95       	ret

000009b0 <TimerSetup>:
 */ 

#include "Timer_drv.h"

void TimerSetup() //Find new name !!
{
 9b0:	cf 93       	push	r28
 9b2:	df 93       	push	r29
 9b4:	cd b7       	in	r28, 0x3d	; 61
 9b6:	de b7       	in	r29, 0x3e	; 62
	Timer0_CTC1();
 9b8:	84 e4       	ldi	r24, 0x44	; 68
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	22 e0       	ldi	r18, 0x02	; 2
 9be:	fc 01       	movw	r30, r24
 9c0:	20 83       	st	Z, r18
	Timer0_CTC2();
 9c2:	85 e4       	ldi	r24, 0x45	; 69
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	23 e0       	ldi	r18, 0x03	; 3
 9c8:	fc 01       	movw	r30, r24
 9ca:	20 83       	st	Z, r18
	Timer0_interrupt();
 9cc:	8e e6       	ldi	r24, 0x6E	; 110
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	22 e0       	ldi	r18, 0x02	; 2
 9d2:	fc 01       	movw	r30, r24
 9d4:	20 83       	st	Z, r18
	Timer0_1ms();
 9d6:	87 e4       	ldi	r24, 0x47	; 71
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	2a ef       	ldi	r18, 0xFA	; 250
 9dc:	fc 01       	movw	r30, r24
 9de:	20 83       	st	Z, r18
}
 9e0:	00 00       	nop
 9e2:	df 91       	pop	r29
 9e4:	cf 91       	pop	r28
 9e6:	08 95       	ret

000009e8 <_exit>:
 9e8:	f8 94       	cli

000009ea <__stop_program>:
 9ea:	ff cf       	rjmp	.-2      	; 0x9ea <__stop_program>
