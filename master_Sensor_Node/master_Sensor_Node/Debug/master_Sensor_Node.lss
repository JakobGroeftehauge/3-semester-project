
master_Sensor_Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a9e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800100  00800100  00000b12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e19  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001163  00000000  00000000  00002b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e40  00000000  00000000  00003c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  00004ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f8  00000000  00000000  00004e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ed7  00000000  00000000  00005840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006717  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_15>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_27>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	ac 32       	cpi	r26, 0x2C	; 44
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 da 01 	call	0x3b4	; 0x3b4 <main>
  9c:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <ADCSetup>:

#include "ADC_drv.h"

void ADCSetup() //Find new name !!
{
	ADC_setup();
  a4:	84 ec       	ldi	r24, 0xC4	; 196
  a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADC_pin1();
  aa:	55 98       	cbi	0x0a, 5	; 10
	ADC_pin2();
  ac:	26 98       	cbi	0x04, 6	; 4
	ADC_pin3();
  ae:	3c 98       	cbi	0x07, 4	; 7
  b0:	08 95       	ret

000000b2 <Wire_off>:
	}
	Wire_off(ADC_data,sensor);
}

void Wire_off(uint16_t data ,sensor_at_node* sensor)
{
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	ec 01       	movw	r28, r24
  bc:	8b 01       	movw	r16, r22
	
	if (data<102)
  be:	86 36       	cpi	r24, 0x66	; 102
  c0:	91 05       	cpc	r25, r1
  c2:	20 f4       	brcc	.+8      	; 0xcc <Wire_off+0x1a>
	{
		// FUNCTION TRANSMIT ERROR MESSAGE FOR LOW WIRE-OFF DETECTION!!
		sendError(sensor,0b00000001);
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	c8 01       	movw	r24, r16
  c8:	0e 94 49 03 	call	0x692	; 0x692 <sendError>
	}
	if (data>921)
  cc:	ca 39       	cpi	r28, 0x9A	; 154
  ce:	d3 40       	sbci	r29, 0x03	; 3
  d0:	20 f0       	brcs	.+8      	; 0xda <Wire_off+0x28>
	{
		// FUNCTION TRANSMIT ERROR MESSAGE FOR HIGH WIRE-OFF DETECTION!!
		sendError(sensor,0b00000010);
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	c8 01       	movw	r24, r16
  d6:	0e 94 49 03 	call	0x692	; 0x692 <sendError>
	}
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	1f 91       	pop	r17
  e0:	0f 91       	pop	r16
  e2:	08 95       	ret

000000e4 <sampleData>:
#include "Sampling_Data.h"
#include <avr/interrupt.h>


void sampleData(sensor_at_node* sensor)
{
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
	float ADC_data=0;
	uint16_t buffer=0;
	
	
	if (sensor->sensorNumber == 1) 
  ee:	88 89       	ldd	r24, Y+16	; 0x10
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	f9 f4       	brne	.+62     	; 0x132 <sampleData+0x4e>
	{
		ADC_input1();
  f4:	82 e4       	ldi	r24, 0x42	; 66
  f6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ADC_Start();
  fa:	0a e7       	ldi	r16, 0x7A	; 122
  fc:	10 e0       	ldi	r17, 0x00	; 0
  fe:	f8 01       	movw	r30, r16
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
		while(ADIF == 0)
		{
			bit_flip(PORTD,BIT(7));
		}
		buffer =ADCL; //shifter med 4
 106:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		buffer += ADCH*256;
 10a:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		ADC_data = buffer;
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	76 2f       	mov	r23, r22
 112:	66 27       	eor	r22, r22
 114:	68 0f       	add	r22, r24
 116:	71 1d       	adc	r23, r1
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__floatunsisf>
		bit_set(ADCSRA,BIT(4));
 120:	f8 01       	movw	r30, r16
 122:	20 81       	ld	r18, Z
 124:	20 61       	ori	r18, 0x10	; 16
 126:	20 83       	st	Z, r18
		//filterfunction(ADC_data;
		//ADC_data = 0;
		sensor->filterValue=ADC_data;	
 128:	6e 83       	std	Y+6, r22	; 0x06
 12a:	7f 83       	std	Y+7, r23	; 0x07
 12c:	88 87       	std	Y+8, r24	; 0x08
 12e:	99 87       	std	Y+9, r25	; 0x09
 130:	24 c0       	rjmp	.+72     	; 0x17a <sampleData+0x96>
	} 
	else if (sensor->sensorNumber==2)
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	f9 f4       	brne	.+62     	; 0x174 <sampleData+0x90>
{	
		ADC_input2(); //ADC7
 136:	87 e4       	ldi	r24, 0x47	; 71
 138:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ADC_Start();
 13c:	0a e7       	ldi	r16, 0x7A	; 122
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	f8 01       	movw	r30, r16
 142:	80 81       	ld	r24, Z
 144:	80 64       	ori	r24, 0x40	; 64
 146:	80 83       	st	Z, r24
		
		while(ADIF == 0)
		{
			
		}
		buffer =ADCL; //shifter med 4
 148:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		buffer += ADCH*256;
 14c:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		ADC_data = buffer;
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	76 2f       	mov	r23, r22
 154:	66 27       	eor	r22, r22
 156:	68 0f       	add	r22, r24
 158:	71 1d       	adc	r23, r1
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__floatunsisf>
		bit_set(ADCSRA,BIT(4));
 162:	f8 01       	movw	r30, r16
 164:	20 81       	ld	r18, Z
 166:	20 61       	ori	r18, 0x10	; 16
 168:	20 83       	st	Z, r18
		//filterfunction(ADC_data);
		sensor->filterValue=ADC_data;
 16a:	6e 83       	std	Y+6, r22	; 0x06
 16c:	7f 83       	std	Y+7, r23	; 0x07
 16e:	88 87       	std	Y+8, r24	; 0x08
 170:	99 87       	std	Y+9, r25	; 0x09
 172:	03 c0       	rjmp	.+6      	; 0x17a <sampleData+0x96>
#include <avr/interrupt.h>


void sampleData(sensor_at_node* sensor)
{
	float ADC_data=0;
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	cb 01       	movw	r24, r22
		ADC_data = buffer;
		bit_set(ADCSRA,BIT(4));
		//filterfunction(ADC_data);
		sensor->filterValue=ADC_data;
	}
	Wire_off(ADC_data,sensor);
 17a:	0e 94 b8 04 	call	0x970	; 0x970 <__fixunssfsi>
 17e:	dc 01       	movw	r26, r24
 180:	cb 01       	movw	r24, r22
 182:	be 01       	movw	r22, r28
 184:	0e 94 59 00 	call	0xb2	; 0xb2 <Wire_off>
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <TimerSetup>:

#include "Timer_drv.h"

void TimerSetup() //Find new name !!
{
	Timer0_CTC1();
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	84 bd       	out	0x24, r24	; 36
	Timer0_CTC2();
 196:	93 e0       	ldi	r25, 0x03	; 3
 198:	95 bd       	out	0x25, r25	; 37
	Timer0_interrupt();
 19a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	Timer0_1ms();
 19e:	8a ef       	ldi	r24, 0xFA	; 250
 1a0:	87 bd       	out	0x27, r24	; 39
 1a2:	08 95       	ret

000001a4 <can_clear_all_mob>:

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	cd ee       	ldi	r28, 0xED	; 237
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	af ee       	ldi	r26, 0xEF	; 239
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	ee ee       	ldi	r30, 0xEE	; 238
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	98 2f       	mov	r25, r24
 1b8:	92 95       	swap	r25
 1ba:	90 7f       	andi	r25, 0xF0	; 240
 1bc:	98 83       	st	Y, r25
 1be:	1c 92       	st	X, r1
 1c0:	10 82       	st	Z, r1
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	86 30       	cpi	r24, 0x06	; 6
 1c6:	b9 f7       	brne	.-18     	; 0x1b6 <can_clear_all_mob+0x12>
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate()
{
    Can_reset();
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    Can_conf_bt();
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 1da:	84 e0       	ldi	r24, 0x04	; 4
 1dc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 1e0:	83 e1       	ldi	r24, 0x13	; 19
 1e2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    return 1;
}
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	08 95       	ret

000001ea <setup_receive_mob>:

void setup_receive_mob(st_cmd_t* MObStruct){
 1ea:	fc 01       	movw	r30, r24
	
	CANPAGE = ( MObStruct->MObNumber << MOBNB0);			//Set canpage to the current mob
 1ec:	80 85       	ldd	r24, Z+8	; 0x08
 1ee:	82 95       	swap	r24
 1f0:	80 7f       	andi	r24, 0xF0	; 240
 1f2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	CANIE2 |= ( 1 << MObStruct->MObNumber);				// Enable interrupts for the current mob
 1f6:	ae ed       	ldi	r26, 0xDE	; 222
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	8c 91       	ld	r24, X
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	00 84       	ldd	r0, Z+8	; 0x08
 202:	02 c0       	rjmp	.+4      	; 0x208 <setup_receive_mob+0x1e>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <setup_receive_mob+0x1a>
 20c:	28 2b       	or	r18, r24
 20e:	2c 93       	st	X, r18
	
	CANIDM1 = (MObStruct->mask / 8);   	// Setup mask with the ID's to be received
 210:	83 81       	ldd	r24, Z+3	; 0x03
 212:	94 81       	ldd	r25, Z+4	; 0x04
 214:	96 95       	lsr	r25
 216:	87 95       	ror	r24
 218:	96 95       	lsr	r25
 21a:	87 95       	ror	r24
 21c:	96 95       	lsr	r25
 21e:	87 95       	ror	r24
 220:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

	CANIDM2 = ((MObStruct->mask & 0x07) << 5); 	// ""
 224:	83 81       	ldd	r24, Z+3	; 0x03
 226:	82 95       	swap	r24
 228:	88 0f       	add	r24, r24
 22a:	80 7e       	andi	r24, 0xE0	; 224
 22c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANIDM3 = 0x00; 	// ""
 230:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>

	CANIDM4 = 0x00; 	// ""
 234:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	
	CANCDMOB = ( 1 << CONMOB1) | ( 8 << DLC0);
 238:	88 e8       	ldi	r24, 0x88	; 136
 23a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 23e:	08 95       	ret

00000240 <can_tx>:
		}	
		//return ACCEPTED;
	
	}

void can_tx(st_cmd_t* MObStruct) {
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	dc 01       	movw	r26, r24

	uint8_t i;   
	if (MObStruct->MObNumber < 6)
 246:	18 96       	adiw	r26, 0x08	; 8
 248:	8c 91       	ld	r24, X
 24a:	18 97       	sbiw	r26, 0x08	; 8
 24c:	86 30       	cpi	r24, 0x06	; 6
 24e:	e8 f5       	brcc	.+122    	; 0x2ca <can_tx+0x8a>
	{
	CANPAGE = MObStruct->MObNumber << MOBNB0;		// Select MOb0 for transmission
 250:	82 95       	swap	r24
 252:	80 7f       	andi	r24, 0xF0	; 240
 254:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	}
	else return; 

	
	
	CANSTMOB = 0x00;    	// Clear mob status register
 258:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

		CANIDT1 = ((MObStruct->id) / 8) ; 	// Set can id to 0
 25c:	11 96       	adiw	r26, 0x01	; 1
 25e:	8d 91       	ld	r24, X+
 260:	9c 91       	ld	r25, X
 262:	12 97       	sbiw	r26, 0x02	; 2
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	96 95       	lsr	r25
 26a:	87 95       	ror	r24
 26c:	96 95       	lsr	r25
 26e:	87 95       	ror	r24
 270:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (((MObStruct->id) & 0x07) << 5);
 274:	11 96       	adiw	r26, 0x01	; 1
 276:	8c 91       	ld	r24, X
 278:	11 97       	sbiw	r26, 0x01	; 1
 27a:	82 95       	swap	r24
 27c:	88 0f       	add	r24, r24
 27e:	80 7e       	andi	r24, 0xE0	; 224
 280:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0x00;		// ""
 284:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0x00;		// ""
 288:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
	//Set_can_ID(MObStruct->id);

	for (i=0; i < MSG_SIZE; i++)
	{
	CANMSG = MObStruct->pt_data[i]; 
 290:	ca ef       	ldi	r28, 0xFA	; 250
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	16 96       	adiw	r26, 0x06	; 6
 296:	ed 91       	ld	r30, X+
 298:	fc 91       	ld	r31, X
 29a:	17 97       	sbiw	r26, 0x07	; 7
 29c:	e2 0f       	add	r30, r18
 29e:	f3 1f       	adc	r31, r19
 2a0:	90 81       	ld	r25, Z
 2a2:	98 83       	st	Y, r25
 2a4:	2f 5f       	subi	r18, 0xFF	; 255
 2a6:	3f 4f       	sbci	r19, 0xFF	; 255
		CANIDT2 = (((MObStruct->id) & 0x07) << 5);
		CANIDT3 = 0x00;		// ""
		CANIDT4 = 0x00;		// ""
	//Set_can_ID(MObStruct->id);

	for (i=0; i < MSG_SIZE; i++)
 2a8:	28 30       	cpi	r18, 0x08	; 8
 2aa:	31 05       	cpc	r19, r1
 2ac:	99 f7       	brne	.-26     	; 0x294 <can_tx+0x54>
	{
	CANMSG = MObStruct->pt_data[i]; 
	}
	
	CANCDMOB = ( 1 << CONMOB0 ) | ( (MObStruct->dlc) << DLC0 ); 	// Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
 2ae:	15 96       	adiw	r26, 0x05	; 5
 2b0:	8c 91       	ld	r24, X
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	while ( ! ( CANSTMOB & ( 1 << TXOK ) ) );	// wait for TXOK flag set
 2b8:	ee ee       	ldi	r30, 0xEE	; 238
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	86 ff       	sbrs	r24, 6
 2c0:	fd cf       	rjmp	.-6      	; 0x2bc <can_tx+0x7c>
	// todo: have this use interrupts
	CANCDMOB = 0x00;	// Disable Transmission
 2c2:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANSTMOB = 0x00;	// Clear TXOK flag
 2c6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <can_cmd>:
 

uint8_t can_cmd(st_cmd_t* MObStruct)
{
uint8_t status; 
switch(MObStruct->cmd)
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 81       	ld	r18, Z
 2d4:	22 23       	and	r18, r18
 2d6:	19 f0       	breq	.+6      	; 0x2de <can_cmd+0xe>
 2d8:	21 30       	cpi	r18, 0x01	; 1
 2da:	21 f0       	breq	.+8      	; 0x2e4 <can_cmd+0x14>
 2dc:	06 c0       	rjmp	.+12     	; 0x2ea <can_cmd+0x1a>
	{
	case TX:
			can_tx(MObStruct); 
 2de:	0e 94 20 01 	call	0x240	; 0x240 <can_tx>
			status = 0; 
			//MObStruct->status = DONE; 
			break; 
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <can_cmd+0x24>

	case RX:
			setup_receive_mob(MObStruct);
 2e4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <setup_receive_mob>
			status = 0; 
			//MObStruct->status = DONE; 
			break; 
 2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <can_cmd+0x24>

	default:
			//MObStruct->status = NOT_ACCEPTED;
			bit_flip(PORTD, BIT(7));
 2ea:	8b b1       	in	r24, 0x0b	; 11
 2ec:	80 58       	subi	r24, 0x80	; 128
 2ee:	8b b9       	out	0x0b, r24	; 11
		{
		return ACCEPTED;
		}	
		else
		{
		 return NOT_ACCEPTED;
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	08 95       	ret
			status = 0x01;
			break; 
	}
		if (status == 0x00)
		{
		return ACCEPTED;
 2f4:	82 e0       	ldi	r24, 0x02	; 2
		{
		 return NOT_ACCEPTED;
		}	
		//return ACCEPTED;
	
	}
 2f6:	08 95       	ret

000002f8 <transfer_data>:
	CANSTMOB = 0x00;	// Clear TXOK flag

}

void transfer_data(st_cmd_t* recieveMOb)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	dc 01       	movw	r26, r24

CANPAGE = recieveMOb->MObNumber << 4;
 2fe:	18 96       	adiw	r26, 0x08	; 8
 300:	8c 91       	ld	r24, X
 302:	18 97       	sbiw	r26, 0x08	; 8
 304:	82 95       	swap	r24
 306:	80 7f       	andi	r24, 0xF0	; 240
 308:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

 recieveMOb->id = CANIDT1*8 + (CANIDT2/32);
 30c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 310:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	22 95       	swap	r18
 324:	26 95       	lsr	r18
 326:	27 70       	andi	r18, 0x07	; 7
 328:	82 0f       	add	r24, r18
 32a:	91 1d       	adc	r25, r1
 32c:	12 96       	adiw	r26, 0x02	; 2
 32e:	9c 93       	st	X, r25
 330:	8e 93       	st	-X, r24
 332:	11 97       	sbiw	r26, 0x01	; 1
 

if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished
 334:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 338:	85 ff       	sbrs	r24, 5
 33a:	26 c0       	rjmp	.+76     	; 0x388 <transfer_data+0x90>

	recieveMOb->dlc = ( CANCDMOB & 0x0F );	// Save number of bytes to be recieved
 33c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	15 96       	adiw	r26, 0x05	; 5
 344:	8c 93       	st	X, r24
 346:	15 97       	sbiw	r26, 0x05	; 5



	for (int8_t i = 0; i < recieveMOb->dlc; i++){
 348:	88 23       	and	r24, r24
 34a:	c9 f0       	breq	.+50     	; 0x37e <transfer_data+0x86>
 34c:	90 e0       	ldi	r25, 0x00	; 0

		recieveMOb->pt_data[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
 34e:	ca ef       	ldi	r28, 0xFA	; 250
 350:	d0 e0       	ldi	r29, 0x00	; 0
 352:	88 81       	ld	r24, Y
 354:	16 96       	adiw	r26, 0x06	; 6
 356:	ed 91       	ld	r30, X+
 358:	fc 91       	ld	r31, X
 35a:	17 97       	sbiw	r26, 0x07	; 7
 35c:	e9 0f       	add	r30, r25
 35e:	f1 1d       	adc	r31, r1
 360:	97 fd       	sbrc	r25, 7
 362:	fa 95       	dec	r31
 364:	80 83       	st	Z, r24
 366:	9f 5f       	subi	r25, 0xFF	; 255

	recieveMOb->dlc = ( CANCDMOB & 0x0F );	// Save number of bytes to be recieved



	for (int8_t i = 0; i < recieveMOb->dlc; i++){
 368:	49 2f       	mov	r20, r25
 36a:	09 2e       	mov	r0, r25
 36c:	00 0c       	add	r0, r0
 36e:	55 0b       	sbc	r21, r21
 370:	15 96       	adiw	r26, 0x05	; 5
 372:	2c 91       	ld	r18, X
 374:	15 97       	sbiw	r26, 0x05	; 5
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	42 17       	cp	r20, r18
 37a:	53 07       	cpc	r21, r19
 37c:	54 f3       	brlt	.-44     	; 0x352 <transfer_data+0x5a>

		recieveMOb->pt_data[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
	} 

	CANCDMOB = (( 1 << CONMOB1 ) | ( 8 << DLC0));  //Enable transmission, set data length to 8. 
 37e:	88 e8       	ldi	r24, 0x88	; 136
 380:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	
	CANSTMOB = 0x00; //reset MOb status register
 384:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

	// Note - the DLC field of the CANCDMO register is updated by the received MOb. If the value differs from expected DLC, an error is set

} 
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <can_init>:


uint8_t can_init()
{
	Can_bit_timing(1);
 38e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <can_fixed_baudrate>
	can_clear_all_mob();                        // c.f. function in "can_drv.c"
 392:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <can_clear_all_mob>
	Can_enable();								// c.f. macro in "can_drv.h"
 396:	e8 ed       	ldi	r30, 0xD8	; 216
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	82 60       	ori	r24, 0x02	; 2
 39e:	80 83       	st	Z, r24
	Can_enable_chosen_ints();                   // macro in "can_drv.h" - change to enable different general interrupts
 3a0:	80 ea       	ldi	r24, 0xA0	; 160
 3a2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	return (1);
}
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	08 95       	ret

000003aa <node_init>:
}

void node_init(void){

	//***** Chip initialization
	DDRC = 4; //Set TXCAN as output and RXCAN as input
 3aa:	84 e0       	ldi	r24, 0x04	; 4
 3ac:	87 b9       	out	0x07, r24	; 7
	
	bit_set(DDRD, BIT(1));
 3ae:	51 9a       	sbi	0x0a, 1	; 10
	bit_set(DDRD, BIT(7));
 3b0:	57 9a       	sbi	0x0a, 7	; 10
 3b2:	08 95       	ret

000003b4 <main>:
volatile uint8_t tick = 0; // Used by the timer
volatile uint8_t receivedMessages = 0; 
volatile sensor_at_node Sensorlist[NUMBER_OF_SENSOR];
volatile uint8_t data[MSG_SIZE];
int main(void)
{
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
 3bc:	ce 56       	subi	r28, 0x6E	; 110
 3be:	d1 09       	sbc	r29, r1
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	f8 94       	cli
 3c4:	de bf       	out	0x3e, r29	; 62
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	cd bf       	out	0x3d, r28	; 61
	uint8_t transmitCounter2 = 0;

	//Setup recieve MOb
	uint8_t recieve_buffer[MSG_SIZE];
	st_cmd_t recieveMOb; 
	recieveMOb.pt_data = &recieve_buffer[0];
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	98 8b       	std	Y+16, r25	; 0x10
 3d0:	8f 87       	std	Y+15, r24	; 0x0f
	recieveMOb.MObNumber = 0x00; 
 3d2:	19 8a       	std	Y+17, r1	; 0x11
	recieveMOb.dlc = MSG_SIZE; 
 3d4:	88 e0       	ldi	r24, 0x08	; 8
 3d6:	8e 87       	std	Y+14, r24	; 0x0e
	recieveMOb.cmd = RX; 
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	99 87       	std	Y+9, r25	; 0x09
	recieveMOb.mask = 0x0000;
 3dc:	1d 86       	std	Y+13, r1	; 0x0d
 3de:	1c 86       	std	Y+12, r1	; 0x0c
	transmitMOb.id = 0x00010;  
	
	//Setup transmit MOb for sensor0
	uint8_t transmit0_buffer[MSG_SIZE];
	st_cmd_t transmitMOb0;
	transmitMOb0.pt_data = &transmit_buffer[0];
 3e0:	9e 01       	movw	r18, r28
 3e2:	2d 5e       	subi	r18, 0xED	; 237
 3e4:	3f 4f       	sbci	r19, 0xFF	; 255
 3e6:	3a a3       	std	Y+34, r19	; 0x22
 3e8:	29 a3       	std	Y+33, r18	; 0x21
	transmitMOb0.MObNumber = 0x01;
 3ea:	9b a3       	std	Y+35, r25	; 0x23
	transmitMOb0.dlc = MSG_SIZE;
 3ec:	88 a3       	std	Y+32, r24	; 0x20
	transmitMOb0.cmd = TX;
 3ee:	1b 8e       	std	Y+27, r1	; 0x1b
	transmitMOb0.id = Sensor1_ID;
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	5d 8f       	std	Y+29, r21	; 0x1d
 3f6:	4c 8f       	std	Y+28, r20	; 0x1c
	Sensorlist[0].CAN_ID =	Sensor1_ID;
 3f8:	e2 e0       	ldi	r30, 0x02	; 2
 3fa:	f1 e0       	ldi	r31, 0x01	; 1
 3fc:	51 83       	std	Z+1, r21	; 0x01
 3fe:	40 83       	st	Z, r20
	Sensorlist[0].transmissionMOb = &transmitMOb0;
 400:	ae 01       	movw	r20, r28
 402:	45 5e       	subi	r20, 0xE5	; 229
 404:	5f 4f       	sbci	r21, 0xFF	; 255
 406:	53 87       	std	Z+11, r21	; 0x0b
 408:	42 87       	std	Z+10, r20	; 0x0a
	
	//Setup transmit MOb for sensor0
	uint8_t transmit1_buffer[MSG_SIZE];
	st_cmd_t transmitMOb1;
	transmitMOb1.pt_data = &transmit_buffer[0];
 40a:	3c a7       	std	Y+44, r19	; 0x2c
 40c:	2b a7       	std	Y+43, r18	; 0x2b
	transmitMOb1.MObNumber = 0x02;
 40e:	92 e0       	ldi	r25, 0x02	; 2
 410:	9d a7       	std	Y+45, r25	; 0x2d
	transmitMOb1.dlc = MSG_SIZE;
 412:	8a a7       	std	Y+42, r24	; 0x2a
	transmitMOb1.cmd = TX;
 414:	1d a2       	std	Y+37, r1	; 0x25
	transmitMOb1.id = Sensor2_ID;
 416:	22 e0       	ldi	r18, 0x02	; 2
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	3f a3       	std	Y+39, r19	; 0x27
 41c:	2e a3       	std	Y+38, r18	; 0x26
	Sensorlist[1].CAN_ID = Sensor2_ID;
 41e:	32 8b       	std	Z+18, r19	; 0x12
 420:	21 8b       	std	Z+17, r18	; 0x11
	Sensorlist[1].transmissionMOb = &transmitMOb1;
 422:	9e 01       	movw	r18, r28
 424:	2b 5d       	subi	r18, 0xDB	; 219
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	34 8f       	std	Z+28, r19	; 0x1c
 42a:	23 8f       	std	Z+27, r18	; 0x1b
	
	//Setup polynomiallist for each sensor;
	float polynomialListe1[polynomialSize];
	Sensorlist[0].polynomialList = &polynomialListe1;
 42c:	26 5f       	subi	r18, 0xF6	; 246
 42e:	3f 4f       	sbci	r19, 0xFF	; 255
 430:	36 87       	std	Z+14, r19	; 0x0e
 432:	25 87       	std	Z+13, r18	; 0x0d
	Sensorlist[0].totalNumberOfpolynomials = polynomialSize;
 434:	87 87       	std	Z+15, r24	; 0x0f
	
	
	float polynomialListe2[polynomialSize];
	Sensorlist[1].polynomialList = &polynomialListe2;
 436:	20 5e       	subi	r18, 0xE0	; 224
 438:	3f 4f       	sbci	r19, 0xFF	; 255
 43a:	37 8f       	std	Z+31, r19	; 0x1f
 43c:	26 8f       	std	Z+30, r18	; 0x1e
	Sensorlist[1].totalNumberOfpolynomials = polynomialSize;
 43e:	80 a3       	std	Z+32, r24	; 0x20
	
	//Setup sensor number (used to sample data)
	if (Sensorlist[0].CAN_ID>Sensorlist[1].CAN_ID)
 440:	20 81       	ld	r18, Z
 442:	31 81       	ldd	r19, Z+1	; 0x01
 444:	81 89       	ldd	r24, Z+17	; 0x11
 446:	92 89       	ldd	r25, Z+18	; 0x12
 448:	82 17       	cp	r24, r18
 44a:	93 07       	cpc	r25, r19
 44c:	28 f4       	brcc	.+10     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
	{
		Sensorlist[0].sensorNumber = 1;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	80 8b       	std	Z+16, r24	; 0x10
		Sensorlist[1].sensorNumber = 2;	
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	81 a3       	std	Z+33, r24	; 0x21
 456:	06 c0       	rjmp	.+12     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	}
	else
	{
		Sensorlist[1].sensorNumber = 1;
 458:	e2 e0       	ldi	r30, 0x02	; 2
 45a:	f1 e0       	ldi	r31, 0x01	; 1
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	81 a3       	std	Z+33, r24	; 0x21
		Sensorlist[0].sensorNumber = 2;
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	80 8b       	std	Z+16, r24	; 0x10
	}
	
	node_init();			//Setup for pins for output
 464:	0e 94 d5 01 	call	0x3aa	; 0x3aa <node_init>
	can_init(); 
 468:	0e 94 c7 01 	call	0x38e	; 0x38e <can_init>
	ADCSetup();				// ADC Drive 
 46c:	0e 94 52 00 	call	0xa4	; 0xa4 <ADCSetup>
	TimerSetup();			// Timer Drive
 470:	0e 94 c9 00 	call	0x192	; 0x192 <TimerSetup>
	can_cmd(&recieveMOb);	// Setting up recieveMOb
 474:	ce 01       	movw	r24, r28
 476:	09 96       	adiw	r24, 0x09	; 9
 478:	0e 94 68 01 	call	0x2d0	; 0x2d0 <can_cmd>
	sei();					// Global interrupt enable
 47c:	78 94       	sei
	
	//Initialize variable used by main program
	uint8_t samplingCounter1 = 0;
	uint8_t samplingCounter2 = 0;
	uint8_t transmitCounter1 = 0;
	uint8_t transmitCounter2 = 0;
 47e:	e1 2c       	mov	r14, r1
	
	
	//Initialize variable used by main program
	uint8_t samplingCounter1 = 0;
	uint8_t samplingCounter2 = 0;
	uint8_t transmitCounter1 = 0;
 480:	91 2c       	mov	r9, r1
{
	
	
	//Initialize variable used by main program
	uint8_t samplingCounter1 = 0;
	uint8_t samplingCounter2 = 0;
 482:	a1 2c       	mov	r10, r1
int main(void)
{
	
	
	//Initialize variable used by main program
	uint8_t samplingCounter1 = 0;
 484:	b1 2c       	mov	r11, r1

while(1)
{
	if (receivedMessages > 0)		// Received Messages interrupt (A message is received and is ready to be read)
	{
		Sensorlist[1].samplingfreq=0xFF;
 486:	02 e0       	ldi	r16, 0x02	; 2
 488:	11 e0       	ldi	r17, 0x01	; 1
 48a:	ff 24       	eor	r15, r15
 48c:	fa 94       	dec	r15
 48e:	c0 2e       	mov	r12, r16
 490:	d1 2e       	mov	r13, r17
	sei();					// Global interrupt enable


while(1)
{
	if (receivedMessages > 0)		// Received Messages interrupt (A message is received and is ready to be read)
 492:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 496:	88 23       	and	r24, r24
 498:	91 f0       	breq	.+36     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
	{
		Sensorlist[1].samplingfreq=0xFF;
 49a:	f8 01       	movw	r30, r16
 49c:	f5 8e       	std	Z+29, r15	; 0x1d
		Sensorlist[1].period =0xff;
 49e:	f5 8a       	std	Z+21, r15	; 0x15
		Sensorlist[0].samplingfreq=0xFF;
 4a0:	f4 86       	std	Z+12, r15	; 0x0c
		Sensorlist[0].period =0xff;
 4a2:	f4 82       	std	Z+4, r15	; 0x04
		transfer_data(&recieveMOb);	// Transfer the received data to rec
 4a4:	ce 01       	movw	r24, r28
 4a6:	09 96       	adiw	r24, 0x09	; 9
 4a8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <transfer_data>
		decodeMessage(&recieveMOb,&Sensorlist,NUMBER_OF_SENSOR);
 4ac:	42 e0       	ldi	r20, 0x02	; 2
 4ae:	6c 2d       	mov	r22, r12
 4b0:	7d 2d       	mov	r23, r13
 4b2:	ce 01       	movw	r24, r28
 4b4:	09 96       	adiw	r24, 0x09	; 9
 4b6:	0e 94 11 04 	call	0x822	; 0x822 <decodeMessage>
		receivedMessages = 0;
 4ba:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	
	if (tick>=1)			// Timer interrupt counter (1ms)
 4be:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 4c2:	88 23       	and	r24, r24
 4c4:	31 f3       	breq	.-52     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
	{
		tick--;				
 4c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 4ca:	81 50       	subi	r24, 0x01	; 1
 4cc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
		samplingCounter1++;	// Sampling counter 1
 4d0:	b3 94       	inc	r11
		samplingCounter2++;	// Sampling counter 2
 4d2:	a3 94       	inc	r10
		transmitCounter1++;	// Transmitting counter 1
 4d4:	93 94       	inc	r9
		transmitCounter2++;	// Transmitting counter 2
 4d6:	e3 94       	inc	r14

	
		if (samplingCounter1 >= Sensorlist[0].samplingfreq && Sensorlist[0].samplingfreq !=0 )
 4d8:	f8 01       	movw	r30, r16
 4da:	84 85       	ldd	r24, Z+12	; 0x0c
 4dc:	b8 16       	cp	r11, r24
 4de:	38 f0       	brcs	.+14     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4e0:	84 85       	ldd	r24, Z+12	; 0x0c
 4e2:	88 23       	and	r24, r24
 4e4:	21 f0       	breq	.+8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
		{
			sampleData(&Sensorlist[0]);
 4e6:	c8 01       	movw	r24, r16
 4e8:	0e 94 72 00 	call	0xe4	; 0xe4 <sampleData>
			samplingCounter1 = 0;
 4ec:	b1 2c       	mov	r11, r1
		}
		if (samplingCounter2 >= Sensorlist[1].samplingfreq && Sensorlist[1].samplingfreq !=0  )
 4ee:	f8 01       	movw	r30, r16
 4f0:	85 8d       	ldd	r24, Z+29	; 0x1d
 4f2:	a8 16       	cp	r10, r24
 4f4:	40 f0       	brcs	.+16     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4f6:	85 8d       	ldd	r24, Z+29	; 0x1d
 4f8:	88 23       	and	r24, r24
 4fa:	29 f0       	breq	.+10     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		{
			sampleData(&Sensorlist[1]);
 4fc:	83 e1       	ldi	r24, 0x13	; 19
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	0e 94 72 00 	call	0xe4	; 0xe4 <sampleData>
			samplingCounter2 = 0;
 504:	a1 2c       	mov	r10, r1
		}
		
		if (transmitCounter1 >= Sensorlist[0].period && Sensorlist[0].period != 0)
 506:	f8 01       	movw	r30, r16
 508:	84 81       	ldd	r24, Z+4	; 0x04
 50a:	98 16       	cp	r9, r24
 50c:	38 f0       	brcs	.+14     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 50e:	84 81       	ldd	r24, Z+4	; 0x04
 510:	88 23       	and	r24, r24
 512:	21 f0       	breq	.+8      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
		{
			sendFilteretData(&Sensorlist[0]);
 514:	c8 01       	movw	r24, r16
 516:	0e 94 90 03 	call	0x720	; 0x720 <sendFilteretData>
			transmitCounter1=0;
 51a:	91 2c       	mov	r9, r1
		}
		if (transmitCounter2 >= Sensorlist[1].period && Sensorlist[1].period != 0)
 51c:	f8 01       	movw	r30, r16
 51e:	85 89       	ldd	r24, Z+21	; 0x15
 520:	e8 16       	cp	r14, r24
 522:	08 f4       	brcc	.+2      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 524:	b6 cf       	rjmp	.-148    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 526:	85 89       	ldd	r24, Z+21	; 0x15
 528:	88 23       	and	r24, r24
 52a:	09 f4       	brne	.+2      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52c:	b2 cf       	rjmp	.-156    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		{
			sendFilteretData(&Sensorlist[1]);
 52e:	83 e1       	ldi	r24, 0x13	; 19
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 90 03 	call	0x720	; 0x720 <sendFilteretData>
			transmitCounter2=0;
 536:	e1 2c       	mov	r14, r1
 538:	ac cf       	rjmp	.-168    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>

0000053a <__vector_15>:
	bit_set(DDRD, BIT(1));
	bit_set(DDRD, BIT(7));
}

ISR(TIMER0_COMPA_vect)
{
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	8f 93       	push	r24
	tick++;
 546:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 54a:	8f 5f       	subi	r24, 0xFF	; 255
 54c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
}
 550:	8f 91       	pop	r24
 552:	0f 90       	pop	r0
 554:	0f be       	out	0x3f, r0	; 63
 556:	0f 90       	pop	r0
 558:	1f 90       	pop	r1
 55a:	18 95       	reti

0000055c <__vector_18>:

ISR( CAN_INT_vect )
{
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	8f 93       	push	r24
	receivedMessages++; 
 568:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 56c:	8f 5f       	subi	r24, 0xFF	; 255
 56e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 572:	8f 91       	pop	r24
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

0000057e <__vector_27>:

ISR(ADC_vect)
{
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	8f 93       	push	r24
	bit_flip(PORTD,BIT(7));
 58a:	8b b1       	in	r24, 0x0b	; 11
 58c:	80 58       	subi	r24, 0x80	; 128
 58e:	8b b9       	out	0x0b, r24	; 11
}
 590:	8f 91       	pop	r24
 592:	0f 90       	pop	r0
 594:	0f be       	out	0x3f, r0	; 63
 596:	0f 90       	pop	r0
 598:	1f 90       	pop	r1
 59a:	18 95       	reti

0000059c <decodeCoefficient>:
	{
		result +=sensor->polynomialList[i+1]*pow(filterValue,i+1);
	}
	
	return result;
}
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	db 01       	movw	r26, r22
 5a2:	11 96       	adiw	r26, 0x01	; 1
 5a4:	ec 91       	ld	r30, X
 5a6:	11 97       	sbiw	r26, 0x01	; 1
 5a8:	2e 2f       	mov	r18, r30
 5aa:	2f 70       	andi	r18, 0x0F	; 15
 5ac:	ec 01       	movw	r28, r24
 5ae:	2f 87       	std	Y+15, r18	; 0x0f
 5b0:	e0 7f       	andi	r30, 0xF0	; 240
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	f6 95       	lsr	r31
 5b6:	e7 95       	ror	r30
 5b8:	f6 95       	lsr	r31
 5ba:	e7 95       	ror	r30
 5bc:	8d 85       	ldd	r24, Y+13	; 0x0d
 5be:	9e 85       	ldd	r25, Y+14	; 0x0e
 5c0:	e8 0f       	add	r30, r24
 5c2:	f9 1f       	adc	r31, r25
 5c4:	15 96       	adiw	r26, 0x05	; 5
 5c6:	5c 91       	ld	r21, X
 5c8:	15 97       	sbiw	r26, 0x05	; 5
 5ca:	14 96       	adiw	r26, 0x04	; 4
 5cc:	4c 91       	ld	r20, X
 5ce:	14 97       	sbiw	r26, 0x04	; 4
 5d0:	13 96       	adiw	r26, 0x03	; 3
 5d2:	3c 91       	ld	r19, X
 5d4:	13 97       	sbiw	r26, 0x03	; 3
 5d6:	12 96       	adiw	r26, 0x02	; 2
 5d8:	2c 91       	ld	r18, X
 5da:	85 2f       	mov	r24, r21
 5dc:	94 2f       	mov	r25, r20
 5de:	a3 2f       	mov	r26, r19
 5e0:	b2 2f       	mov	r27, r18
 5e2:	80 83       	st	Z, r24
 5e4:	91 83       	std	Z+1, r25	; 0x01
 5e6:	a2 83       	std	Z+2, r26	; 0x02
 5e8:	b3 83       	std	Z+3, r27	; 0x03
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <ACK_TO_Hub>:
 5f0:	fc 01       	movw	r30, r24
 5f2:	a2 85       	ldd	r26, Z+10	; 0x0a
 5f4:	b3 85       	ldd	r27, Z+11	; 0x0b
 5f6:	16 96       	adiw	r26, 0x06	; 6
 5f8:	0d 90       	ld	r0, X+
 5fa:	bc 91       	ld	r27, X
 5fc:	a0 2d       	mov	r26, r0
 5fe:	84 ec       	ldi	r24, 0xC4	; 196
 600:	8c 93       	st	X, r24
 602:	a2 85       	ldd	r26, Z+10	; 0x0a
 604:	b3 85       	ldd	r27, Z+11	; 0x0b
 606:	16 96       	adiw	r26, 0x06	; 6
 608:	0d 90       	ld	r0, X+
 60a:	bc 91       	ld	r27, X
 60c:	a0 2d       	mov	r26, r0
 60e:	92 81       	ldd	r25, Z+2	; 0x02
 610:	83 81       	ldd	r24, Z+3	; 0x03
 612:	20 e1       	ldi	r18, 0x10	; 16
 614:	92 9f       	mul	r25, r18
 616:	80 0d       	add	r24, r0
 618:	11 24       	eor	r1, r1
 61a:	11 96       	adiw	r26, 0x01	; 1
 61c:	8c 93       	st	X, r24
 61e:	a2 85       	ldd	r26, Z+10	; 0x0a
 620:	b3 85       	ldd	r27, Z+11	; 0x0b
 622:	16 96       	adiw	r26, 0x06	; 6
 624:	0d 90       	ld	r0, X+
 626:	bc 91       	ld	r27, X
 628:	a0 2d       	mov	r26, r0
 62a:	84 81       	ldd	r24, Z+4	; 0x04
 62c:	12 96       	adiw	r26, 0x02	; 2
 62e:	8c 93       	st	X, r24
 630:	a2 85       	ldd	r26, Z+10	; 0x0a
 632:	b3 85       	ldd	r27, Z+11	; 0x0b
 634:	16 96       	adiw	r26, 0x06	; 6
 636:	0d 90       	ld	r0, X+
 638:	bc 91       	ld	r27, X
 63a:	a0 2d       	mov	r26, r0
 63c:	85 81       	ldd	r24, Z+5	; 0x05
 63e:	13 96       	adiw	r26, 0x03	; 3
 640:	8c 93       	st	X, r24
 642:	a2 85       	ldd	r26, Z+10	; 0x0a
 644:	b3 85       	ldd	r27, Z+11	; 0x0b
 646:	16 96       	adiw	r26, 0x06	; 6
 648:	0d 90       	ld	r0, X+
 64a:	bc 91       	ld	r27, X
 64c:	a0 2d       	mov	r26, r0
 64e:	85 81       	ldd	r24, Z+5	; 0x05
 650:	14 96       	adiw	r26, 0x04	; 4
 652:	8c 93       	st	X, r24
 654:	a2 85       	ldd	r26, Z+10	; 0x0a
 656:	b3 85       	ldd	r27, Z+11	; 0x0b
 658:	16 96       	adiw	r26, 0x06	; 6
 65a:	0d 90       	ld	r0, X+
 65c:	bc 91       	ld	r27, X
 65e:	a0 2d       	mov	r26, r0
 660:	84 85       	ldd	r24, Z+12	; 0x0c
 662:	15 96       	adiw	r26, 0x05	; 5
 664:	8c 93       	st	X, r24
 666:	a2 85       	ldd	r26, Z+10	; 0x0a
 668:	b3 85       	ldd	r27, Z+11	; 0x0b
 66a:	16 96       	adiw	r26, 0x06	; 6
 66c:	0d 90       	ld	r0, X+
 66e:	bc 91       	ld	r27, X
 670:	a0 2d       	mov	r26, r0
 672:	87 85       	ldd	r24, Z+15	; 0x0f
 674:	16 96       	adiw	r26, 0x06	; 6
 676:	8c 93       	st	X, r24
 678:	a2 85       	ldd	r26, Z+10	; 0x0a
 67a:	b3 85       	ldd	r27, Z+11	; 0x0b
 67c:	16 96       	adiw	r26, 0x06	; 6
 67e:	0d 90       	ld	r0, X+
 680:	bc 91       	ld	r27, X
 682:	a0 2d       	mov	r26, r0
 684:	17 96       	adiw	r26, 0x07	; 7
 686:	1c 92       	st	X, r1
 688:	82 85       	ldd	r24, Z+10	; 0x0a
 68a:	93 85       	ldd	r25, Z+11	; 0x0b
 68c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <can_cmd>
 690:	08 95       	ret

00000692 <sendError>:
 692:	fc 01       	movw	r30, r24
 694:	a2 85       	ldd	r26, Z+10	; 0x0a
 696:	b3 85       	ldd	r27, Z+11	; 0x0b
 698:	16 96       	adiw	r26, 0x06	; 6
 69a:	0d 90       	ld	r0, X+
 69c:	bc 91       	ld	r27, X
 69e:	a0 2d       	mov	r26, r0
 6a0:	80 ea       	ldi	r24, 0xA0	; 160
 6a2:	8c 93       	st	X, r24
 6a4:	a2 85       	ldd	r26, Z+10	; 0x0a
 6a6:	b3 85       	ldd	r27, Z+11	; 0x0b
 6a8:	16 96       	adiw	r26, 0x06	; 6
 6aa:	0d 90       	ld	r0, X+
 6ac:	bc 91       	ld	r27, X
 6ae:	a0 2d       	mov	r26, r0
 6b0:	11 96       	adiw	r26, 0x01	; 1
 6b2:	6c 93       	st	X, r22
 6b4:	a2 85       	ldd	r26, Z+10	; 0x0a
 6b6:	b3 85       	ldd	r27, Z+11	; 0x0b
 6b8:	16 96       	adiw	r26, 0x06	; 6
 6ba:	0d 90       	ld	r0, X+
 6bc:	bc 91       	ld	r27, X
 6be:	a0 2d       	mov	r26, r0
 6c0:	80 81       	ld	r24, Z
 6c2:	12 96       	adiw	r26, 0x02	; 2
 6c4:	8c 93       	st	X, r24
 6c6:	a2 85       	ldd	r26, Z+10	; 0x0a
 6c8:	b3 85       	ldd	r27, Z+11	; 0x0b
 6ca:	16 96       	adiw	r26, 0x06	; 6
 6cc:	0d 90       	ld	r0, X+
 6ce:	bc 91       	ld	r27, X
 6d0:	a0 2d       	mov	r26, r0
 6d2:	13 96       	adiw	r26, 0x03	; 3
 6d4:	1c 92       	st	X, r1
 6d6:	a2 85       	ldd	r26, Z+10	; 0x0a
 6d8:	b3 85       	ldd	r27, Z+11	; 0x0b
 6da:	16 96       	adiw	r26, 0x06	; 6
 6dc:	0d 90       	ld	r0, X+
 6de:	bc 91       	ld	r27, X
 6e0:	a0 2d       	mov	r26, r0
 6e2:	14 96       	adiw	r26, 0x04	; 4
 6e4:	1c 92       	st	X, r1
 6e6:	a2 85       	ldd	r26, Z+10	; 0x0a
 6e8:	b3 85       	ldd	r27, Z+11	; 0x0b
 6ea:	16 96       	adiw	r26, 0x06	; 6
 6ec:	0d 90       	ld	r0, X+
 6ee:	bc 91       	ld	r27, X
 6f0:	a0 2d       	mov	r26, r0
 6f2:	15 96       	adiw	r26, 0x05	; 5
 6f4:	1c 92       	st	X, r1
 6f6:	a2 85       	ldd	r26, Z+10	; 0x0a
 6f8:	b3 85       	ldd	r27, Z+11	; 0x0b
 6fa:	16 96       	adiw	r26, 0x06	; 6
 6fc:	0d 90       	ld	r0, X+
 6fe:	bc 91       	ld	r27, X
 700:	a0 2d       	mov	r26, r0
 702:	16 96       	adiw	r26, 0x06	; 6
 704:	1c 92       	st	X, r1
 706:	a2 85       	ldd	r26, Z+10	; 0x0a
 708:	b3 85       	ldd	r27, Z+11	; 0x0b
 70a:	16 96       	adiw	r26, 0x06	; 6
 70c:	0d 90       	ld	r0, X+
 70e:	bc 91       	ld	r27, X
 710:	a0 2d       	mov	r26, r0
 712:	17 96       	adiw	r26, 0x07	; 7
 714:	1c 92       	st	X, r1
 716:	82 85       	ldd	r24, Z+10	; 0x0a
 718:	93 85       	ldd	r25, Z+11	; 0x0b
 71a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <can_cmd>
 71e:	08 95       	ret

00000720 <sendFilteretData>:

extern void sendFilteretData(sensor_at_node* Sensor)		// Sends the filtered data from the sensors given as parameters. Data comes from the struct and will be updated by another function.
{
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
 724:	00 d0       	rcall	.+0      	; 0x726 <sendFilteretData+0x6>
 726:	00 d0       	rcall	.+0      	; 0x728 <sendFilteretData+0x8>
 728:	cd b7       	in	r28, 0x3d	; 61
 72a:	de b7       	in	r29, 0x3e	; 62
 72c:	fc 01       	movw	r30, r24
	//float polynomialValue = runPolynomial(Sensor);
	float polynomialValue = Sensor->filterValue;
 72e:	86 81       	ldd	r24, Z+6	; 0x06
 730:	97 81       	ldd	r25, Z+7	; 0x07
 732:	a0 85       	ldd	r26, Z+8	; 0x08
 734:	b1 85       	ldd	r27, Z+9	; 0x09
 736:	89 83       	std	Y+1, r24	; 0x01
 738:	9a 83       	std	Y+2, r25	; 0x02
 73a:	ab 83       	std	Y+3, r26	; 0x03
 73c:	bc 83       	std	Y+4, r27	; 0x04
	Sensor->transmissionMOb->pt_data[0] = 0b00110000; // Data message
 73e:	a2 85       	ldd	r26, Z+10	; 0x0a
 740:	b3 85       	ldd	r27, Z+11	; 0x0b
 742:	16 96       	adiw	r26, 0x06	; 6
 744:	0d 90       	ld	r0, X+
 746:	bc 91       	ld	r27, X
 748:	a0 2d       	mov	r26, r0
 74a:	80 e3       	ldi	r24, 0x30	; 48
 74c:	8c 93       	st	X, r24
	Sensor->transmissionMOb->pt_data[1] = (Sensor->sensor_Type*16)+Sensor->unit;
 74e:	a2 85       	ldd	r26, Z+10	; 0x0a
 750:	b3 85       	ldd	r27, Z+11	; 0x0b
 752:	16 96       	adiw	r26, 0x06	; 6
 754:	0d 90       	ld	r0, X+
 756:	bc 91       	ld	r27, X
 758:	a0 2d       	mov	r26, r0
 75a:	92 81       	ldd	r25, Z+2	; 0x02
 75c:	83 81       	ldd	r24, Z+3	; 0x03
 75e:	20 e1       	ldi	r18, 0x10	; 16
 760:	92 9f       	mul	r25, r18
 762:	80 0d       	add	r24, r0
 764:	11 24       	eor	r1, r1
 766:	11 96       	adiw	r26, 0x01	; 1
 768:	8c 93       	st	X, r24
	uint8_t *vp = (uint8_t *)&polynomialValue;
	Sensor->transmissionMOb->pt_data[2] = vp[3];
 76a:	a2 85       	ldd	r26, Z+10	; 0x0a
 76c:	b3 85       	ldd	r27, Z+11	; 0x0b
 76e:	16 96       	adiw	r26, 0x06	; 6
 770:	0d 90       	ld	r0, X+
 772:	bc 91       	ld	r27, X
 774:	a0 2d       	mov	r26, r0
 776:	8c 81       	ldd	r24, Y+4	; 0x04
 778:	12 96       	adiw	r26, 0x02	; 2
 77a:	8c 93       	st	X, r24
	Sensor->transmissionMOb->pt_data[3] = vp[2];
 77c:	a2 85       	ldd	r26, Z+10	; 0x0a
 77e:	b3 85       	ldd	r27, Z+11	; 0x0b
 780:	16 96       	adiw	r26, 0x06	; 6
 782:	0d 90       	ld	r0, X+
 784:	bc 91       	ld	r27, X
 786:	a0 2d       	mov	r26, r0
 788:	8b 81       	ldd	r24, Y+3	; 0x03
 78a:	13 96       	adiw	r26, 0x03	; 3
 78c:	8c 93       	st	X, r24
	Sensor->transmissionMOb->pt_data[4] = vp[1];
 78e:	a2 85       	ldd	r26, Z+10	; 0x0a
 790:	b3 85       	ldd	r27, Z+11	; 0x0b
 792:	16 96       	adiw	r26, 0x06	; 6
 794:	0d 90       	ld	r0, X+
 796:	bc 91       	ld	r27, X
 798:	a0 2d       	mov	r26, r0
 79a:	8a 81       	ldd	r24, Y+2	; 0x02
 79c:	14 96       	adiw	r26, 0x04	; 4
 79e:	8c 93       	st	X, r24
	Sensor->transmissionMOb->pt_data[5] = vp[0];
 7a0:	a2 85       	ldd	r26, Z+10	; 0x0a
 7a2:	b3 85       	ldd	r27, Z+11	; 0x0b
 7a4:	16 96       	adiw	r26, 0x06	; 6
 7a6:	0d 90       	ld	r0, X+
 7a8:	bc 91       	ld	r27, X
 7aa:	a0 2d       	mov	r26, r0
 7ac:	89 81       	ldd	r24, Y+1	; 0x01
 7ae:	15 96       	adiw	r26, 0x05	; 5
 7b0:	8c 93       	st	X, r24
	Sensor ->transmissionMOb->pt_data[6] = 0;
 7b2:	a2 85       	ldd	r26, Z+10	; 0x0a
 7b4:	b3 85       	ldd	r27, Z+11	; 0x0b
 7b6:	16 96       	adiw	r26, 0x06	; 6
 7b8:	0d 90       	ld	r0, X+
 7ba:	bc 91       	ld	r27, X
 7bc:	a0 2d       	mov	r26, r0
 7be:	16 96       	adiw	r26, 0x06	; 6
 7c0:	1c 92       	st	X, r1
	Sensor ->transmissionMOb->pt_data[7] = 0;
 7c2:	a2 85       	ldd	r26, Z+10	; 0x0a
 7c4:	b3 85       	ldd	r27, Z+11	; 0x0b
 7c6:	16 96       	adiw	r26, 0x06	; 6
 7c8:	0d 90       	ld	r0, X+
 7ca:	bc 91       	ld	r27, X
 7cc:	a0 2d       	mov	r26, r0
 7ce:	17 96       	adiw	r26, 0x07	; 7
 7d0:	1c 92       	st	X, r1
	can_cmd(Sensor->transmissionMOb);
 7d2:	82 85       	ldd	r24, Z+10	; 0x0a
 7d4:	93 85       	ldd	r25, Z+11	; 0x0b
 7d6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <can_cmd>
}
 7da:	0f 90       	pop	r0
 7dc:	0f 90       	pop	r0
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <decodeHubServiceMessage>:

// decodeHubServiceMessage(uint8_t message_array[8],sensor_at_node* sensor) takes the array of message bytes
// and fills out the given sensor struct
void decodeHubServiceMessage(uint8_t message_array[8], sensor_at_node* sensor)
{
 7e8:	dc 01       	movw	r26, r24
 7ea:	fb 01       	movw	r30, r22
	sensor->sensor_Type = (message_array[1] & 0b11110000)/16; // Shift left nibble to the right with /16
 7ec:	11 96       	adiw	r26, 0x01	; 1
 7ee:	2c 91       	ld	r18, X
 7f0:	11 97       	sbiw	r26, 0x01	; 1
 7f2:	20 7f       	andi	r18, 0xF0	; 240
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	35 95       	asr	r19
 7f8:	27 95       	ror	r18
 7fa:	35 95       	asr	r19
 7fc:	27 95       	ror	r18
 7fe:	35 95       	asr	r19
 800:	27 95       	ror	r18
 802:	35 95       	asr	r19
 804:	27 95       	ror	r18
 806:	22 83       	std	Z+2, r18	; 0x02
	sensor->unit = message_array[1] & 0b00001111;
 808:	11 96       	adiw	r26, 0x01	; 1
 80a:	8c 91       	ld	r24, X
 80c:	11 97       	sbiw	r26, 0x01	; 1
 80e:	8f 70       	andi	r24, 0x0F	; 15
 810:	83 83       	std	Z+3, r24	; 0x03
	sensor->period = message_array[2];
 812:	12 96       	adiw	r26, 0x02	; 2
 814:	8c 91       	ld	r24, X
 816:	12 97       	sbiw	r26, 0x02	; 2
 818:	84 83       	std	Z+4, r24	; 0x04
	sensor->cutOffFreq = message_array[3];
 81a:	13 96       	adiw	r26, 0x03	; 3
 81c:	8c 91       	ld	r24, X
 81e:	85 83       	std	Z+5, r24	; 0x05
 820:	08 95       	ret

00000822 <decodeMessage>:
}*/


//Decoding message from hub and determines what kind of message type it is.
void decodeMessage(st_cmd_t* message_struct,sensor_at_node* SensorList, uint8_t NUMBER_OF_SENSORS) // 
{
 822:	ef 92       	push	r14
 824:	ff 92       	push	r15
 826:	0f 93       	push	r16
 828:	1f 93       	push	r17
 82a:	cf 93       	push	r28
 82c:	df 93       	push	r29
 82e:	cd b7       	in	r28, 0x3d	; 61
 830:	de b7       	in	r29, 0x3e	; 62
 832:	28 97       	sbiw	r28, 0x08	; 8
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	f8 94       	cli
 838:	de bf       	out	0x3e, r29	; 62
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	cd bf       	out	0x3d, r28	; 61
 83e:	8c 01       	movw	r16, r24
 840:	9b 01       	movw	r18, r22
	
	uint8_t message_array[8];
	for(uint8_t i = 0; i<8; i++)
	{
		message_array[i] = message_struct -> pt_data[i];
 842:	fc 01       	movw	r30, r24
 844:	e6 80       	ldd	r14, Z+6	; 0x06
 846:	f7 80       	ldd	r15, Z+7	; 0x07
 848:	d7 01       	movw	r26, r14
 84a:	fe 01       	movw	r30, r28
 84c:	31 96       	adiw	r30, 0x01	; 1
 84e:	be 01       	movw	r22, r28
 850:	67 5f       	subi	r22, 0xF7	; 247
 852:	7f 4f       	sbci	r23, 0xFF	; 255
 854:	9d 91       	ld	r25, X+
 856:	91 93       	st	Z+, r25
//Decoding message from hub and determines what kind of message type it is.
void decodeMessage(st_cmd_t* message_struct,sensor_at_node* SensorList, uint8_t NUMBER_OF_SENSORS) // 
{
	
	uint8_t message_array[8];
	for(uint8_t i = 0; i<8; i++)
 858:	e6 17       	cp	r30, r22
 85a:	f7 07       	cpc	r31, r23
 85c:	d9 f7       	brne	.-10     	; 0x854 <decodeMessage+0x32>
	{
		message_array[i] = message_struct -> pt_data[i];
	}
	
	switch (message_struct->pt_data[0])// only looks a first nibble
 85e:	f7 01       	movw	r30, r14
 860:	90 81       	ld	r25, Z
 862:	95 3c       	cpi	r25, 0xC5	; 197
 864:	29 f1       	breq	.+74     	; 0x8b0 <decodeMessage+0x8e>
 866:	90 3e       	cpi	r25, 0xE0	; 224
 868:	21 f0       	breq	.+8      	; 0x872 <decodeMessage+0x50>
 86a:	93 3c       	cpi	r25, 0xC3	; 195
 86c:	09 f0       	breq	.+2      	; 0x870 <decodeMessage+0x4e>
 86e:	73 c0       	rjmp	.+230    	; 0x956 <__stack+0x57>
 870:	10 c0       	rjmp	.+32     	; 0x892 <decodeMessage+0x70>
			}
			break;
		}
		case 0b11100000: // ID FOR DATA RETRIEVING MESSAGE, FROM SPECIFIC MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
 872:	50 e0       	ldi	r21, 0x00	; 0
 874:	14 16       	cp	r1, r20
 876:	15 06       	cpc	r1, r21
 878:	0c f0       	brlt	.+2      	; 0x87c <decodeMessage+0x5a>
 87a:	6d c0       	rjmp	.+218    	; 0x956 <__stack+0x57>
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 87c:	f8 01       	movw	r30, r16
 87e:	a1 81       	ldd	r26, Z+1	; 0x01
 880:	b2 81       	ldd	r27, Z+2	; 0x02
 882:	f9 01       	movw	r30, r18
 884:	80 81       	ld	r24, Z
 886:	91 81       	ldd	r25, Z+1	; 0x01
 888:	a8 17       	cp	r26, r24
 88a:	b9 07       	cpc	r27, r25
 88c:	09 f0       	breq	.+2      	; 0x890 <decodeMessage+0x6e>
 88e:	59 c0       	rjmp	.+178    	; 0x942 <__stack+0x43>
 890:	53 c0       	rjmp	.+166    	; 0x938 <__stack+0x39>
			}
			break;
		}
		case 0b11000011: // ID FOR A SERVICE MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
 892:	50 e0       	ldi	r21, 0x00	; 0
 894:	14 16       	cp	r1, r20
 896:	15 06       	cpc	r1, r21
 898:	0c f0       	brlt	.+2      	; 0x89c <decodeMessage+0x7a>
 89a:	5d c0       	rjmp	.+186    	; 0x956 <__stack+0x57>
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 89c:	f8 01       	movw	r30, r16
 89e:	a1 81       	ldd	r26, Z+1	; 0x01
 8a0:	b2 81       	ldd	r27, Z+2	; 0x02
 8a2:	f9 01       	movw	r30, r18
 8a4:	80 81       	ld	r24, Z
 8a6:	91 81       	ldd	r25, Z+1	; 0x01
 8a8:	a8 17       	cp	r26, r24
 8aa:	b9 07       	cpc	r27, r25
 8ac:	71 f5       	brne	.+92     	; 0x90a <__stack+0xb>
 8ae:	20 c0       	rjmp	.+64     	; 0x8f0 <decodeMessage+0xce>
	
	switch (message_struct->pt_data[0])// only looks a first nibble
	{
		case 0b11000101: //ID for setup of Coefficients
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
 8b0:	44 23       	and	r20, r20
 8b2:	09 f4       	brne	.+2      	; 0x8b6 <decodeMessage+0x94>
 8b4:	50 c0       	rjmp	.+160    	; 0x956 <__stack+0x57>
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 8b6:	f8 01       	movw	r30, r16
 8b8:	41 81       	ldd	r20, Z+1	; 0x01
 8ba:	52 81       	ldd	r21, Z+2	; 0x02
 8bc:	f9 01       	movw	r30, r18
 8be:	80 81       	ld	r24, Z
 8c0:	91 81       	ldd	r25, Z+1	; 0x01
 8c2:	48 17       	cp	r20, r24
 8c4:	59 07       	cpc	r21, r25
 8c6:	09 f0       	breq	.+2      	; 0x8ca <decodeMessage+0xa8>
 8c8:	46 c0       	rjmp	.+140    	; 0x956 <__stack+0x57>
				{
					decodeCoefficient(&SensorList[i],message_array);
 8ca:	be 01       	movw	r22, r28
 8cc:	6f 5f       	subi	r22, 0xFF	; 255
 8ce:	7f 4f       	sbci	r23, 0xFF	; 255
 8d0:	c9 01       	movw	r24, r18
 8d2:	0e 94 ce 02 	call	0x59c	; 0x59c <decodeCoefficient>
 8d6:	3f c0       	rjmp	.+126    	; 0x956 <__stack+0x57>
		}
		case 0b11000011: // ID FOR A SERVICE MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 8d8:	06 2f       	mov	r16, r22
 8da:	17 2f       	mov	r17, r23
 8dc:	6f 5e       	subi	r22, 0xEF	; 239
 8de:	7f 4f       	sbci	r23, 0xFF	; 255
 8e0:	fb 01       	movw	r30, r22
 8e2:	71 97       	sbiw	r30, 0x11	; 17
 8e4:	20 81       	ld	r18, Z
 8e6:	31 81       	ldd	r19, Z+1	; 0x01
 8e8:	2a 17       	cp	r18, r26
 8ea:	3b 07       	cpc	r19, r27
 8ec:	99 f4       	brne	.+38     	; 0x914 <__stack+0x15>
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <decodeMessage+0xd2>
 8f0:	02 2f       	mov	r16, r18
 8f2:	13 2f       	mov	r17, r19
				{
					decodeHubServiceMessage(message_array,&SensorList[i]);
 8f4:	60 2f       	mov	r22, r16
 8f6:	71 2f       	mov	r23, r17
 8f8:	ce 01       	movw	r24, r28
 8fa:	01 96       	adiw	r24, 0x01	; 1
 8fc:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <decodeHubServiceMessage>
					ACK_TO_Hub(&SensorList[i]);
 900:	80 2f       	mov	r24, r16
 902:	91 2f       	mov	r25, r17
 904:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ACK_TO_Hub>
					break;
 908:	26 c0       	rjmp	.+76     	; 0x956 <__stack+0x57>
 90a:	b9 01       	movw	r22, r18
 90c:	6f 5e       	subi	r22, 0xEF	; 239
 90e:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		case 0b11000011: // ID FOR A SERVICE MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;
		}
		case 0b11000011: // ID FOR A SERVICE MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
 914:	01 96       	adiw	r24, 0x01	; 1
 916:	84 17       	cp	r24, r20
 918:	95 07       	cpc	r25, r21
 91a:	f1 f6       	brne	.-68     	; 0x8d8 <decodeMessage+0xb6>
 91c:	1c c0       	rjmp	.+56     	; 0x956 <__stack+0x57>
		}
		case 0b11100000: // ID FOR DATA RETRIEVING MESSAGE, FROM SPECIFIC MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 91e:	86 2f       	mov	r24, r22
 920:	97 2f       	mov	r25, r23
 922:	6f 5e       	subi	r22, 0xEF	; 239
 924:	7f 4f       	sbci	r23, 0xFF	; 255
 926:	fb 01       	movw	r30, r22
 928:	71 97       	sbiw	r30, 0x11	; 17
 92a:	01 90       	ld	r0, Z+
 92c:	f0 81       	ld	r31, Z
 92e:	e0 2d       	mov	r30, r0
 930:	ea 17       	cp	r30, r26
 932:	fb 07       	cpc	r31, r27
 934:	59 f4       	brne	.+22     	; 0x94c <__stack+0x4d>
 936:	02 c0       	rjmp	.+4      	; 0x93c <__stack+0x3d>
 938:	82 2f       	mov	r24, r18
 93a:	93 2f       	mov	r25, r19
				{
					sendFilteretData(&SensorList[i]);
 93c:	0e 94 90 03 	call	0x720	; 0x720 <sendFilteretData>
					break;
 940:	0a c0       	rjmp	.+20     	; 0x956 <__stack+0x57>
 942:	b9 01       	movw	r22, r18
 944:	6f 5e       	subi	r22, 0xEF	; 239
 946:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		case 0b11100000: // ID FOR DATA RETRIEVING MESSAGE, FROM SPECIFIC MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 948:	20 e0       	ldi	r18, 0x00	; 0
 94a:	30 e0       	ldi	r19, 0x00	; 0
			}
			break;
		}
		case 0b11100000: // ID FOR DATA RETRIEVING MESSAGE, FROM SPECIFIC MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
 94c:	2f 5f       	subi	r18, 0xFF	; 255
 94e:	3f 4f       	sbci	r19, 0xFF	; 255
 950:	24 17       	cp	r18, r20
 952:	35 07       	cpc	r19, r21
 954:	21 f7       	brne	.-56     	; 0x91e <__stack+0x1f>
			//SEND BACK ERROR?
			break;
		}
		
	}
}
 956:	28 96       	adiw	r28, 0x08	; 8
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	f8 94       	cli
 95c:	de bf       	out	0x3e, r29	; 62
 95e:	0f be       	out	0x3f, r0	; 63
 960:	cd bf       	out	0x3d, r28	; 61
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	1f 91       	pop	r17
 968:	0f 91       	pop	r16
 96a:	ff 90       	pop	r15
 96c:	ef 90       	pop	r14
 96e:	08 95       	ret

00000970 <__fixunssfsi>:
 970:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_splitA>
 974:	88 f0       	brcs	.+34     	; 0x998 <__fixunssfsi+0x28>
 976:	9f 57       	subi	r25, 0x7F	; 127
 978:	98 f0       	brcs	.+38     	; 0x9a0 <__fixunssfsi+0x30>
 97a:	b9 2f       	mov	r27, r25
 97c:	99 27       	eor	r25, r25
 97e:	b7 51       	subi	r27, 0x17	; 23
 980:	b0 f0       	brcs	.+44     	; 0x9ae <__fixunssfsi+0x3e>
 982:	e1 f0       	breq	.+56     	; 0x9bc <__fixunssfsi+0x4c>
 984:	66 0f       	add	r22, r22
 986:	77 1f       	adc	r23, r23
 988:	88 1f       	adc	r24, r24
 98a:	99 1f       	adc	r25, r25
 98c:	1a f0       	brmi	.+6      	; 0x994 <__fixunssfsi+0x24>
 98e:	ba 95       	dec	r27
 990:	c9 f7       	brne	.-14     	; 0x984 <__fixunssfsi+0x14>
 992:	14 c0       	rjmp	.+40     	; 0x9bc <__fixunssfsi+0x4c>
 994:	b1 30       	cpi	r27, 0x01	; 1
 996:	91 f0       	breq	.+36     	; 0x9bc <__fixunssfsi+0x4c>
 998:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_zero>
 99c:	b1 e0       	ldi	r27, 0x01	; 1
 99e:	08 95       	ret
 9a0:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__fp_zero>
 9a4:	67 2f       	mov	r22, r23
 9a6:	78 2f       	mov	r23, r24
 9a8:	88 27       	eor	r24, r24
 9aa:	b8 5f       	subi	r27, 0xF8	; 248
 9ac:	39 f0       	breq	.+14     	; 0x9bc <__fixunssfsi+0x4c>
 9ae:	b9 3f       	cpi	r27, 0xF9	; 249
 9b0:	cc f3       	brlt	.-14     	; 0x9a4 <__fixunssfsi+0x34>
 9b2:	86 95       	lsr	r24
 9b4:	77 95       	ror	r23
 9b6:	67 95       	ror	r22
 9b8:	b3 95       	inc	r27
 9ba:	d9 f7       	brne	.-10     	; 0x9b2 <__fixunssfsi+0x42>
 9bc:	3e f4       	brtc	.+14     	; 0x9cc <__fixunssfsi+0x5c>
 9be:	90 95       	com	r25
 9c0:	80 95       	com	r24
 9c2:	70 95       	com	r23
 9c4:	61 95       	neg	r22
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	08 95       	ret

000009ce <__floatunsisf>:
 9ce:	e8 94       	clt
 9d0:	09 c0       	rjmp	.+18     	; 0x9e4 <__floatsisf+0x12>

000009d2 <__floatsisf>:
 9d2:	97 fb       	bst	r25, 7
 9d4:	3e f4       	brtc	.+14     	; 0x9e4 <__floatsisf+0x12>
 9d6:	90 95       	com	r25
 9d8:	80 95       	com	r24
 9da:	70 95       	com	r23
 9dc:	61 95       	neg	r22
 9de:	7f 4f       	sbci	r23, 0xFF	; 255
 9e0:	8f 4f       	sbci	r24, 0xFF	; 255
 9e2:	9f 4f       	sbci	r25, 0xFF	; 255
 9e4:	99 23       	and	r25, r25
 9e6:	a9 f0       	breq	.+42     	; 0xa12 <__floatsisf+0x40>
 9e8:	f9 2f       	mov	r31, r25
 9ea:	96 e9       	ldi	r25, 0x96	; 150
 9ec:	bb 27       	eor	r27, r27
 9ee:	93 95       	inc	r25
 9f0:	f6 95       	lsr	r31
 9f2:	87 95       	ror	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b7 95       	ror	r27
 9fa:	f1 11       	cpse	r31, r1
 9fc:	f8 cf       	rjmp	.-16     	; 0x9ee <__floatsisf+0x1c>
 9fe:	fa f4       	brpl	.+62     	; 0xa3e <__floatsisf+0x6c>
 a00:	bb 0f       	add	r27, r27
 a02:	11 f4       	brne	.+4      	; 0xa08 <__floatsisf+0x36>
 a04:	60 ff       	sbrs	r22, 0
 a06:	1b c0       	rjmp	.+54     	; 0xa3e <__floatsisf+0x6c>
 a08:	6f 5f       	subi	r22, 0xFF	; 255
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	8f 4f       	sbci	r24, 0xFF	; 255
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	16 c0       	rjmp	.+44     	; 0xa3e <__floatsisf+0x6c>
 a12:	88 23       	and	r24, r24
 a14:	11 f0       	breq	.+4      	; 0xa1a <__floatsisf+0x48>
 a16:	96 e9       	ldi	r25, 0x96	; 150
 a18:	11 c0       	rjmp	.+34     	; 0xa3c <__floatsisf+0x6a>
 a1a:	77 23       	and	r23, r23
 a1c:	21 f0       	breq	.+8      	; 0xa26 <__floatsisf+0x54>
 a1e:	9e e8       	ldi	r25, 0x8E	; 142
 a20:	87 2f       	mov	r24, r23
 a22:	76 2f       	mov	r23, r22
 a24:	05 c0       	rjmp	.+10     	; 0xa30 <__floatsisf+0x5e>
 a26:	66 23       	and	r22, r22
 a28:	71 f0       	breq	.+28     	; 0xa46 <__floatsisf+0x74>
 a2a:	96 e8       	ldi	r25, 0x86	; 134
 a2c:	86 2f       	mov	r24, r22
 a2e:	70 e0       	ldi	r23, 0x00	; 0
 a30:	60 e0       	ldi	r22, 0x00	; 0
 a32:	2a f0       	brmi	.+10     	; 0xa3e <__floatsisf+0x6c>
 a34:	9a 95       	dec	r25
 a36:	66 0f       	add	r22, r22
 a38:	77 1f       	adc	r23, r23
 a3a:	88 1f       	adc	r24, r24
 a3c:	da f7       	brpl	.-10     	; 0xa34 <__floatsisf+0x62>
 a3e:	88 0f       	add	r24, r24
 a40:	96 95       	lsr	r25
 a42:	87 95       	ror	r24
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <__fp_split3>:
 a48:	57 fd       	sbrc	r21, 7
 a4a:	90 58       	subi	r25, 0x80	; 128
 a4c:	44 0f       	add	r20, r20
 a4e:	55 1f       	adc	r21, r21
 a50:	59 f0       	breq	.+22     	; 0xa68 <__fp_splitA+0x10>
 a52:	5f 3f       	cpi	r21, 0xFF	; 255
 a54:	71 f0       	breq	.+28     	; 0xa72 <__fp_splitA+0x1a>
 a56:	47 95       	ror	r20

00000a58 <__fp_splitA>:
 a58:	88 0f       	add	r24, r24
 a5a:	97 fb       	bst	r25, 7
 a5c:	99 1f       	adc	r25, r25
 a5e:	61 f0       	breq	.+24     	; 0xa78 <__fp_splitA+0x20>
 a60:	9f 3f       	cpi	r25, 0xFF	; 255
 a62:	79 f0       	breq	.+30     	; 0xa82 <__fp_splitA+0x2a>
 a64:	87 95       	ror	r24
 a66:	08 95       	ret
 a68:	12 16       	cp	r1, r18
 a6a:	13 06       	cpc	r1, r19
 a6c:	14 06       	cpc	r1, r20
 a6e:	55 1f       	adc	r21, r21
 a70:	f2 cf       	rjmp	.-28     	; 0xa56 <__fp_split3+0xe>
 a72:	46 95       	lsr	r20
 a74:	f1 df       	rcall	.-30     	; 0xa58 <__fp_splitA>
 a76:	08 c0       	rjmp	.+16     	; 0xa88 <__fp_splitA+0x30>
 a78:	16 16       	cp	r1, r22
 a7a:	17 06       	cpc	r1, r23
 a7c:	18 06       	cpc	r1, r24
 a7e:	99 1f       	adc	r25, r25
 a80:	f1 cf       	rjmp	.-30     	; 0xa64 <__fp_splitA+0xc>
 a82:	86 95       	lsr	r24
 a84:	71 05       	cpc	r23, r1
 a86:	61 05       	cpc	r22, r1
 a88:	08 94       	sec
 a8a:	08 95       	ret

00000a8c <__fp_zero>:
 a8c:	e8 94       	clt

00000a8e <__fp_szero>:
 a8e:	bb 27       	eor	r27, r27
 a90:	66 27       	eor	r22, r22
 a92:	77 27       	eor	r23, r23
 a94:	cb 01       	movw	r24, r22
 a96:	97 f9       	bld	r25, 7
 a98:	08 95       	ret

00000a9a <_exit>:
 a9a:	f8 94       	cli

00000a9c <__stop_program>:
 a9c:	ff cf       	rjmp	.-2      	; 0xa9c <__stop_program>
