
master_Sensor_Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800100  00800100  0000074c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001936  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff4  00000000  00000000  0000222a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b84  00000000  00000000  0000321e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00003da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000922  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000094a  00000000  00000000  00004946  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_15>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a8 32       	cpi	r26, 0x28	; 40
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
  9c:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <ADCSetup>:

#include "ADC_drv.h"

void ADCSetup() //Find new name !!
{
	ADC_setup();
  a4:	84 ee       	ldi	r24, 0xE4	; 228
  a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADC_pin1();
  aa:	55 98       	cbi	0x0a, 5	; 10
	ADC_pin2();
  ac:	26 98       	cbi	0x04, 6	; 4
	ADC_pin3();
  ae:	3c 98       	cbi	0x07, 4	; 7
  b0:	08 95       	ret

000000b2 <TimerSetup>:

#include "Timer_drv.h"

void TimerSetup() //Find new name !!
{
	Timer0_CTC1();
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	84 bd       	out	0x24, r24	; 36
	Timer0_CTC2();
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	95 bd       	out	0x25, r25	; 37
	Timer0_interrupt();
  ba:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	Timer0_1ms();
  be:	8a ef       	ldi	r24, 0xFA	; 250
  c0:	87 bd       	out	0x27, r24	; 39
  c2:	08 95       	ret

000000c4 <can_clear_all_mob>:

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	cd ee       	ldi	r28, 0xED	; 237
  cc:	d0 e0       	ldi	r29, 0x00	; 0
  ce:	af ee       	ldi	r26, 0xEF	; 239
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	ee ee       	ldi	r30, 0xEE	; 238
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	98 2f       	mov	r25, r24
  d8:	92 95       	swap	r25
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	98 83       	st	Y, r25
  de:	1c 92       	st	X, r1
  e0:	10 82       	st	Z, r1
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	86 30       	cpi	r24, 0x06	; 6
  e6:	b9 f7       	brne	.-18     	; 0xd6 <can_clear_all_mob+0x12>
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate()
{
    Can_reset();
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    Can_conf_bt();
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 100:	83 e1       	ldi	r24, 0x13	; 19
 102:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    return 1;
}
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret

0000010a <setup_receive_mob>:

void setup_receive_mob(st_cmd_t* MObStruct){
 10a:	fc 01       	movw	r30, r24
	
	CANPAGE = ( MObStruct->MObNumber << MOBNB0);			//Set canpage to the current mob
 10c:	80 85       	ldd	r24, Z+8	; 0x08
 10e:	82 95       	swap	r24
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	CANIE2 |= ( 1 << MObStruct->MObNumber);				// Enable interrupts for the current mob
 116:	ae ed       	ldi	r26, 0xDE	; 222
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	8c 91       	ld	r24, X
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	00 84       	ldd	r0, Z+8	; 0x08
 122:	02 c0       	rjmp	.+4      	; 0x128 <setup_receive_mob+0x1e>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <setup_receive_mob+0x1a>
 12c:	28 2b       	or	r18, r24
 12e:	2c 93       	st	X, r18
	
	CANIDM1 = (MObStruct->mask / 8);   	// Setup mask with the ID's to be received
 130:	83 81       	ldd	r24, Z+3	; 0x03
 132:	94 81       	ldd	r25, Z+4	; 0x04
 134:	96 95       	lsr	r25
 136:	87 95       	ror	r24
 138:	96 95       	lsr	r25
 13a:	87 95       	ror	r24
 13c:	96 95       	lsr	r25
 13e:	87 95       	ror	r24
 140:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

	CANIDM2 = ((MObStruct->mask & 0x07) << 5); 	// ""
 144:	83 81       	ldd	r24, Z+3	; 0x03
 146:	82 95       	swap	r24
 148:	88 0f       	add	r24, r24
 14a:	80 7e       	andi	r24, 0xE0	; 224
 14c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANIDM3 = 0x00; 	// ""
 150:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>

	CANIDM4 = 0x00; 	// ""
 154:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	
	CANCDMOB = ( 1 << CONMOB1) | ( 8 << DLC0);
 158:	88 e8       	ldi	r24, 0x88	; 136
 15a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 15e:	08 95       	ret

00000160 <can_tx>:
		}	
		//return ACCEPTED;
	
	}

void can_tx(st_cmd_t* MObStruct) {
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	dc 01       	movw	r26, r24

	uint8_t i;   
	if (MObStruct->MObNumber < 6)
 166:	18 96       	adiw	r26, 0x08	; 8
 168:	8c 91       	ld	r24, X
 16a:	18 97       	sbiw	r26, 0x08	; 8
 16c:	86 30       	cpi	r24, 0x06	; 6
 16e:	e8 f5       	brcc	.+122    	; 0x1ea <can_tx+0x8a>
	{
	CANPAGE = MObStruct->MObNumber << MOBNB0;		// Select MOb0 for transmission
 170:	82 95       	swap	r24
 172:	80 7f       	andi	r24, 0xF0	; 240
 174:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	}
	else return; 

	
	
	CANSTMOB = 0x00;    	// Clear mob status register
 178:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

		CANIDT1 = ((MObStruct->id) / 8) ; 	// Set can id to 0
 17c:	11 96       	adiw	r26, 0x01	; 1
 17e:	8d 91       	ld	r24, X+
 180:	9c 91       	ld	r25, X
 182:	12 97       	sbiw	r26, 0x02	; 2
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (((MObStruct->id) & 0x07) << 5);
 194:	11 96       	adiw	r26, 0x01	; 1
 196:	8c 91       	ld	r24, X
 198:	11 97       	sbiw	r26, 0x01	; 1
 19a:	82 95       	swap	r24
 19c:	88 0f       	add	r24, r24
 19e:	80 7e       	andi	r24, 0xE0	; 224
 1a0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0x00;		// ""
 1a4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0x00;		// ""
 1a8:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
	//Set_can_ID(MObStruct->id);

	for (i=0; i < MSG_SIZE; i++)
	{
	CANMSG = MObStruct->pt_data[i]; 
 1b0:	ca ef       	ldi	r28, 0xFA	; 250
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	16 96       	adiw	r26, 0x06	; 6
 1b6:	ed 91       	ld	r30, X+
 1b8:	fc 91       	ld	r31, X
 1ba:	17 97       	sbiw	r26, 0x07	; 7
 1bc:	e2 0f       	add	r30, r18
 1be:	f3 1f       	adc	r31, r19
 1c0:	90 81       	ld	r25, Z
 1c2:	98 83       	st	Y, r25
 1c4:	2f 5f       	subi	r18, 0xFF	; 255
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
		CANIDT2 = (((MObStruct->id) & 0x07) << 5);
		CANIDT3 = 0x00;		// ""
		CANIDT4 = 0x00;		// ""
	//Set_can_ID(MObStruct->id);

	for (i=0; i < MSG_SIZE; i++)
 1c8:	28 30       	cpi	r18, 0x08	; 8
 1ca:	31 05       	cpc	r19, r1
 1cc:	99 f7       	brne	.-26     	; 0x1b4 <can_tx+0x54>
	{
	CANMSG = MObStruct->pt_data[i]; 
	}
	
	CANCDMOB = ( 1 << CONMOB0 ) | ( (MObStruct->dlc) << DLC0 ); 	// Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
 1ce:	15 96       	adiw	r26, 0x05	; 5
 1d0:	8c 91       	ld	r24, X
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	while ( ! ( CANSTMOB & ( 1 << TXOK ) ) );	// wait for TXOK flag set
 1d8:	ee ee       	ldi	r30, 0xEE	; 238
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	86 ff       	sbrs	r24, 6
 1e0:	fd cf       	rjmp	.-6      	; 0x1dc <can_tx+0x7c>
	// todo: have this use interrupts
	CANCDMOB = 0x00;	// Disable Transmission
 1e2:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANSTMOB = 0x00;	// Clear TXOK flag
 1e6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <can_cmd>:
 

uint8_t can_cmd(st_cmd_t* MObStruct)
{
uint8_t status; 
switch(MObStruct->cmd)
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 81       	ld	r18, Z
 1f4:	22 23       	and	r18, r18
 1f6:	19 f0       	breq	.+6      	; 0x1fe <can_cmd+0xe>
 1f8:	21 30       	cpi	r18, 0x01	; 1
 1fa:	21 f0       	breq	.+8      	; 0x204 <can_cmd+0x14>
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <can_cmd+0x1a>
	{
	case TX:
			can_tx(MObStruct); 
 1fe:	0e 94 b0 00 	call	0x160	; 0x160 <can_tx>
			status = 0; 
			//MObStruct->status = DONE; 
			break; 
 202:	08 c0       	rjmp	.+16     	; 0x214 <can_cmd+0x24>

	case RX:
			setup_receive_mob(MObStruct);
 204:	0e 94 85 00 	call	0x10a	; 0x10a <setup_receive_mob>
			status = 0; 
			//MObStruct->status = DONE; 
			break; 
 208:	05 c0       	rjmp	.+10     	; 0x214 <can_cmd+0x24>

	default:
			//MObStruct->status = NOT_ACCEPTED;
			bit_flip(PORTD, BIT(7));
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	80 58       	subi	r24, 0x80	; 128
 20e:	8b b9       	out	0x0b, r24	; 11
		{
		return ACCEPTED;
		}	
		else
		{
		 return NOT_ACCEPTED;
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	08 95       	ret
			status = 0x01;
			break; 
	}
		if (status == 0x00)
		{
		return ACCEPTED;
 214:	82 e0       	ldi	r24, 0x02	; 2
		{
		 return NOT_ACCEPTED;
		}	
		//return ACCEPTED;
	
	}
 216:	08 95       	ret

00000218 <transfer_data>:
	CANSTMOB = 0x00;	// Clear TXOK flag

}

void transfer_data(st_cmd_t* recieveMOb)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	dc 01       	movw	r26, r24

CANPAGE = recieveMOb->MObNumber << 4;
 21e:	18 96       	adiw	r26, 0x08	; 8
 220:	8c 91       	ld	r24, X
 222:	18 97       	sbiw	r26, 0x08	; 8
 224:	82 95       	swap	r24
 226:	80 7f       	andi	r24, 0xF0	; 240
 228:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

 recieveMOb->id = CANIDT1*8 + (CANIDT2/32);
 22c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 230:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	22 95       	swap	r18
 244:	26 95       	lsr	r18
 246:	27 70       	andi	r18, 0x07	; 7
 248:	82 0f       	add	r24, r18
 24a:	91 1d       	adc	r25, r1
 24c:	12 96       	adiw	r26, 0x02	; 2
 24e:	9c 93       	st	X, r25
 250:	8e 93       	st	-X, r24
 252:	11 97       	sbiw	r26, 0x01	; 1
 

if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished
 254:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 258:	85 ff       	sbrs	r24, 5
 25a:	26 c0       	rjmp	.+76     	; 0x2a8 <transfer_data+0x90>

	recieveMOb->dlc = ( CANCDMOB & 0x0F );	// Save number of bytes to be recieved
 25c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 260:	8f 70       	andi	r24, 0x0F	; 15
 262:	15 96       	adiw	r26, 0x05	; 5
 264:	8c 93       	st	X, r24
 266:	15 97       	sbiw	r26, 0x05	; 5



	for (int8_t i = 0; i < recieveMOb->dlc; i++){
 268:	88 23       	and	r24, r24
 26a:	c9 f0       	breq	.+50     	; 0x29e <transfer_data+0x86>
 26c:	90 e0       	ldi	r25, 0x00	; 0

		recieveMOb->pt_data[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
 26e:	ca ef       	ldi	r28, 0xFA	; 250
 270:	d0 e0       	ldi	r29, 0x00	; 0
 272:	88 81       	ld	r24, Y
 274:	16 96       	adiw	r26, 0x06	; 6
 276:	ed 91       	ld	r30, X+
 278:	fc 91       	ld	r31, X
 27a:	17 97       	sbiw	r26, 0x07	; 7
 27c:	e9 0f       	add	r30, r25
 27e:	f1 1d       	adc	r31, r1
 280:	97 fd       	sbrc	r25, 7
 282:	fa 95       	dec	r31
 284:	80 83       	st	Z, r24
 286:	9f 5f       	subi	r25, 0xFF	; 255

	recieveMOb->dlc = ( CANCDMOB & 0x0F );	// Save number of bytes to be recieved



	for (int8_t i = 0; i < recieveMOb->dlc; i++){
 288:	49 2f       	mov	r20, r25
 28a:	09 2e       	mov	r0, r25
 28c:	00 0c       	add	r0, r0
 28e:	55 0b       	sbc	r21, r21
 290:	15 96       	adiw	r26, 0x05	; 5
 292:	2c 91       	ld	r18, X
 294:	15 97       	sbiw	r26, 0x05	; 5
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	42 17       	cp	r20, r18
 29a:	53 07       	cpc	r21, r19
 29c:	54 f3       	brlt	.-44     	; 0x272 <transfer_data+0x5a>

		recieveMOb->pt_data[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
	} 

	CANCDMOB = (( 1 << CONMOB1 ) | ( 8 << DLC0));  //Enable transmission, set data length to 8. 
 29e:	88 e8       	ldi	r24, 0x88	; 136
 2a0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	
	CANSTMOB = 0x00; //reset MOb status register
 2a4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

	// Note - the DLC field of the CANCDMO register is updated by the received MOb. If the value differs from expected DLC, an error is set

} 
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <can_init>:


uint8_t can_init()
{
	Can_bit_timing(1);
 2ae:	0e 94 77 00 	call	0xee	; 0xee <can_fixed_baudrate>
	can_clear_all_mob();                        // c.f. function in "can_drv.c"
 2b2:	0e 94 62 00 	call	0xc4	; 0xc4 <can_clear_all_mob>
	Can_enable();								// c.f. macro in "can_drv.h"
 2b6:	e8 ed       	ldi	r30, 0xD8	; 216
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	82 60       	ori	r24, 0x02	; 2
 2be:	80 83       	st	Z, r24
	Can_enable_chosen_ints();                   // macro in "can_drv.h" - change to enable different general interrupts
 2c0:	80 ea       	ldi	r24, 0xA0	; 160
 2c2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	return (1);
}
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	08 95       	ret

000002ca <node_init>:


void node_init(void){

	//***** Chip initialization
	DDRC = 4; //Set TXCAN as output and RXCAN as input
 2ca:	84 e0       	ldi	r24, 0x04	; 4
 2cc:	87 b9       	out	0x07, r24	; 7
	
	bit_set(DDRD, BIT(1));
 2ce:	51 9a       	sbi	0x0a, 1	; 10
	bit_set(DDRD, BIT(7));
 2d0:	57 9a       	sbi	0x0a, 7	; 10
 2d2:	08 95       	ret

000002d4 <main>:
volatile sensor_at_node Sensorlist[NUMBER_OF_SENSOR];
void noid_init (void);
volatile uint8_t data[MSG_SIZE];

int main(void)
{
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	ae 97       	sbiw	r28, 0x2e	; 46
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61


	//Setup recieve MOb
	uint8_t recieve_buffer[MSG_SIZE];
	st_cmd_t recieveMOb; 
	recieveMOb.pt_data = &recieve_buffer[0];
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	98 8b       	std	Y+16, r25	; 0x10
 2ee:	8f 87       	std	Y+15, r24	; 0x0f
	recieveMOb.MObNumber = 0x00; 
 2f0:	19 8a       	std	Y+17, r1	; 0x11
	recieveMOb.dlc = MSG_SIZE; 
 2f2:	88 e0       	ldi	r24, 0x08	; 8
 2f4:	8e 87       	std	Y+14, r24	; 0x0e
	recieveMOb.cmd = RX; 
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	99 87       	std	Y+9, r25	; 0x09
	recieveMOb.mask = 0x0000;
 2fa:	1d 86       	std	Y+13, r1	; 0x0d
 2fc:	1c 86       	std	Y+12, r1	; 0x0c
	transmitMOb.id = 0x00010;  
	
	//Setup transmit MOb for sensor0
	uint8_t transmit0_buffer[MSG_SIZE];
	st_cmd_t transmitMOb0;
	transmitMOb0.pt_data = &transmit_buffer[0];
 2fe:	9e 01       	movw	r18, r28
 300:	2d 5e       	subi	r18, 0xED	; 237
 302:	3f 4f       	sbci	r19, 0xFF	; 255
 304:	3a a3       	std	Y+34, r19	; 0x22
 306:	29 a3       	std	Y+33, r18	; 0x21
	transmitMOb0.MObNumber = 0x01;
 308:	9b a3       	std	Y+35, r25	; 0x23
	transmitMOb0.dlc = MSG_SIZE;
 30a:	88 a3       	std	Y+32, r24	; 0x20
	transmitMOb0.cmd = TX;
 30c:	1b 8e       	std	Y+27, r1	; 0x1b
	transmitMOb0.id = Sensor1_ID;
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	5d 8f       	std	Y+29, r21	; 0x1d
 314:	4c 8f       	std	Y+28, r20	; 0x1c
	Sensorlist[0].CAN_ID =	Sensor1_ID;
 316:	e2 e0       	ldi	r30, 0x02	; 2
 318:	f1 e0       	ldi	r31, 0x01	; 1
 31a:	51 83       	std	Z+1, r21	; 0x01
 31c:	40 83       	st	Z, r20
	Sensorlist[0].transmissionMOb = &transmitMOb0;
 31e:	ae 01       	movw	r20, r28
 320:	45 5e       	subi	r20, 0xE5	; 229
 322:	5f 4f       	sbci	r21, 0xFF	; 255
 324:	56 87       	std	Z+14, r21	; 0x0e
 326:	45 87       	std	Z+13, r20	; 0x0d
	
	//Setup transmit MOb for sensor0
	uint8_t transmit1_buffer[MSG_SIZE];
	st_cmd_t transmitMOb1;
	transmitMOb1.pt_data = &transmit_buffer[0];
 328:	3c a7       	std	Y+44, r19	; 0x2c
 32a:	2b a7       	std	Y+43, r18	; 0x2b
	transmitMOb1.MObNumber = 0x02;
 32c:	92 e0       	ldi	r25, 0x02	; 2
 32e:	9d a7       	std	Y+45, r25	; 0x2d
	transmitMOb1.dlc = MSG_SIZE;
 330:	8a a7       	std	Y+42, r24	; 0x2a
	transmitMOb1.cmd = TX;
 332:	1d a2       	std	Y+37, r1	; 0x25
	transmitMOb1.id = Sensor2_ID;
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	9f a3       	std	Y+39, r25	; 0x27
 33a:	8e a3       	std	Y+38, r24	; 0x26
	Sensorlist[1].CAN_ID = Sensor2_ID;
 33c:	90 8b       	std	Z+16, r25	; 0x10
 33e:	87 87       	std	Z+15, r24	; 0x0f
	Sensorlist[1].transmissionMOb = &transmitMOb1;
 340:	ce 01       	movw	r24, r28
 342:	85 96       	adiw	r24, 0x25	; 37
 344:	95 8f       	std	Z+29, r25	; 0x1d
 346:	84 8f       	std	Z+28, r24	; 0x1c
	
	
	node_init();			//Setup for pins for output
 348:	0e 94 65 01 	call	0x2ca	; 0x2ca <node_init>
	can_init(); 
 34c:	0e 94 57 01 	call	0x2ae	; 0x2ae <can_init>
	ADCSetup();				// ADC Drive 
 350:	0e 94 52 00 	call	0xa4	; 0xa4 <ADCSetup>
	TimerSetup();			// Timer Drive
 354:	0e 94 59 00 	call	0xb2	; 0xb2 <TimerSetup>
	can_cmd(&recieveMOb);	// Setting up recieveMOb
 358:	ce 01       	movw	r24, r28
 35a:	09 96       	adiw	r24, 0x09	; 9
 35c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <can_cmd>
	sei();					// Global interrupt enable
 360:	78 94       	sei
	
//Initialize variable used by main program
	uint8_t samplingCounter1 = 0;
	uint8_t samplingCounter2 = 0;
	uint8_t transmitCounter1 = 0;
	uint8_t transmitCounter2 = 0;
 362:	10 e0       	ldi	r17, 0x00	; 0
	
	
//Initialize variable used by main program
	uint8_t samplingCounter1 = 0;
	uint8_t samplingCounter2 = 0;
	uint8_t transmitCounter1 = 0;
 364:	00 e0       	ldi	r16, 0x00	; 0
	sei();					// Global interrupt enable


while(1)
{
	if (tick>=1)			// Timer interrupt counter (1ms)
 366:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 36a:	88 23       	and	r24, r24
 36c:	e1 f3       	breq	.-8      	; 0x366 <main+0x92>
	{
		tick--;				
 36e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 372:	81 50       	subi	r24, 0x01	; 1
 374:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
		samplingCounter1++;	// Sampling counter 1
		samplingCounter2++;	// Sampling counter 2
		transmitCounter1++;	// Transmitting counter 1
 378:	0f 5f       	subi	r16, 0xFF	; 255
		transmitCounter2++;	// Transmitting counter 2
 37a:	1f 5f       	subi	r17, 0xFF	; 255

		
		if (receivedMessages > 0)		// Received Messages interrupt (A message is received and is ready to be read)
 37c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 380:	88 23       	and	r24, r24
 382:	69 f0       	breq	.+26     	; 0x39e <main+0xca>
		{
			transfer_data(&recieveMOb);	// Transfer the received data to rec
 384:	ce 01       	movw	r24, r28
 386:	09 96       	adiw	r24, 0x09	; 9
 388:	0e 94 0c 01 	call	0x218	; 0x218 <transfer_data>
			decodeMessage(&recieveMOb,&Sensorlist,NUMBER_OF_SENSOR);		
 38c:	42 e0       	ldi	r20, 0x02	; 2
 38e:	62 e0       	ldi	r22, 0x02	; 2
 390:	71 e0       	ldi	r23, 0x01	; 1
 392:	ce 01       	movw	r24, r28
 394:	09 96       	adiw	r24, 0x09	; 9
 396:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <decodeMessage>
			receivedMessages = 0;
 39a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			samplingCounter2 = 0;
			//Filter(ADC value); //Filter the data
		}
		*/
		
		if (transmitCounter1 >= Sensorlist[0].period && Sensorlist[0].period != 0)
 39e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Sensorlist+0x7>
 3a2:	08 17       	cp	r16, r24
 3a4:	48 f0       	brcs	.+18     	; 0x3b8 <main+0xe4>
 3a6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Sensorlist+0x7>
 3aa:	88 23       	and	r24, r24
 3ac:	29 f0       	breq	.+10     	; 0x3b8 <main+0xe4>
		{
			sendFilteretData(&Sensorlist[0]);
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sendFilteretData>
			transmitCounter1=0;
 3b6:	00 e0       	ldi	r16, 0x00	; 0
		}
		if (transmitCounter2 >= Sensorlist[1].period && Sensorlist[1].period != 0)
 3b8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Sensorlist+0x16>
 3bc:	18 17       	cp	r17, r24
 3be:	98 f2       	brcs	.-90     	; 0x366 <main+0x92>
 3c0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Sensorlist+0x16>
 3c4:	88 23       	and	r24, r24
 3c6:	79 f2       	breq	.-98     	; 0x366 <main+0x92>
		{
			sendFilteretData(&Sensorlist[1]);
 3c8:	81 e1       	ldi	r24, 0x11	; 17
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sendFilteretData>
			transmitCounter2=0;
 3d0:	10 e0       	ldi	r17, 0x00	; 0
 3d2:	c9 cf       	rjmp	.-110    	; 0x366 <main+0x92>

000003d4 <__vector_15>:
	bit_set(DDRD, BIT(1));
	bit_set(DDRD, BIT(7));
}

ISR(TIMER0_COMPA_vect)
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	8f 93       	push	r24
	tick++;
 3e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
}
 3ea:	8f 91       	pop	r24
 3ec:	0f 90       	pop	r0
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	0f 90       	pop	r0
 3f2:	1f 90       	pop	r1
 3f4:	18 95       	reti

000003f6 <__vector_18>:

ISR( CAN_INT_vect )
{
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
	receivedMessages++; 
 404:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 408:	8f 5f       	subi	r24, 0xFF	; 255
 40a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	bit_flip(PORTD,BIT(1));
 40e:	9b b1       	in	r25, 0x0b	; 11
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	89 27       	eor	r24, r25
 414:	8b b9       	out	0x0b, r24	; 11
}
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <ACK_TO_Hub>:
	Sensor ->transmissionMOb->pt_data[3] = 0;
	Sensor ->transmissionMOb->pt_data[4] = 0;
	Sensor ->transmissionMOb->pt_data[5] = 0;
	Sensor ->transmissionMOb->pt_data[6] = 0;
	Sensor ->transmissionMOb->pt_data[7] = 0;
	can_cmd(Sensor->transmissionMOb);
 424:	fc 01       	movw	r30, r24
 426:	a5 85       	ldd	r26, Z+13	; 0x0d
 428:	b6 85       	ldd	r27, Z+14	; 0x0e
 42a:	16 96       	adiw	r26, 0x06	; 6
 42c:	0d 90       	ld	r0, X+
 42e:	bc 91       	ld	r27, X
 430:	a0 2d       	mov	r26, r0
 432:	84 ec       	ldi	r24, 0xC4	; 196
 434:	8c 93       	st	X, r24
 436:	a5 85       	ldd	r26, Z+13	; 0x0d
 438:	b6 85       	ldd	r27, Z+14	; 0x0e
 43a:	16 96       	adiw	r26, 0x06	; 6
 43c:	0d 90       	ld	r0, X+
 43e:	bc 91       	ld	r27, X
 440:	a0 2d       	mov	r26, r0
 442:	92 81       	ldd	r25, Z+2	; 0x02
 444:	83 81       	ldd	r24, Z+3	; 0x03
 446:	20 e1       	ldi	r18, 0x10	; 16
 448:	92 9f       	mul	r25, r18
 44a:	80 0d       	add	r24, r0
 44c:	11 24       	eor	r1, r1
 44e:	11 96       	adiw	r26, 0x01	; 1
 450:	8c 93       	st	X, r24
 452:	a5 85       	ldd	r26, Z+13	; 0x0d
 454:	b6 85       	ldd	r27, Z+14	; 0x0e
 456:	16 96       	adiw	r26, 0x06	; 6
 458:	0d 90       	ld	r0, X+
 45a:	bc 91       	ld	r27, X
 45c:	a0 2d       	mov	r26, r0
 45e:	84 81       	ldd	r24, Z+4	; 0x04
 460:	12 96       	adiw	r26, 0x02	; 2
 462:	8c 93       	st	X, r24
 464:	a5 85       	ldd	r26, Z+13	; 0x0d
 466:	b6 85       	ldd	r27, Z+14	; 0x0e
 468:	16 96       	adiw	r26, 0x06	; 6
 46a:	0d 90       	ld	r0, X+
 46c:	bc 91       	ld	r27, X
 46e:	a0 2d       	mov	r26, r0
 470:	85 81       	ldd	r24, Z+5	; 0x05
 472:	13 96       	adiw	r26, 0x03	; 3
 474:	8c 93       	st	X, r24
 476:	a5 85       	ldd	r26, Z+13	; 0x0d
 478:	b6 85       	ldd	r27, Z+14	; 0x0e
 47a:	16 96       	adiw	r26, 0x06	; 6
 47c:	0d 90       	ld	r0, X+
 47e:	bc 91       	ld	r27, X
 480:	a0 2d       	mov	r26, r0
 482:	86 81       	ldd	r24, Z+6	; 0x06
 484:	14 96       	adiw	r26, 0x04	; 4
 486:	8c 93       	st	X, r24
 488:	a5 85       	ldd	r26, Z+13	; 0x0d
 48a:	b6 85       	ldd	r27, Z+14	; 0x0e
 48c:	16 96       	adiw	r26, 0x06	; 6
 48e:	0d 90       	ld	r0, X+
 490:	bc 91       	ld	r27, X
 492:	a0 2d       	mov	r26, r0
 494:	87 81       	ldd	r24, Z+7	; 0x07
 496:	15 96       	adiw	r26, 0x05	; 5
 498:	8c 93       	st	X, r24
 49a:	a5 85       	ldd	r26, Z+13	; 0x0d
 49c:	b6 85       	ldd	r27, Z+14	; 0x0e
 49e:	16 96       	adiw	r26, 0x06	; 6
 4a0:	0d 90       	ld	r0, X+
 4a2:	bc 91       	ld	r27, X
 4a4:	a0 2d       	mov	r26, r0
 4a6:	80 85       	ldd	r24, Z+8	; 0x08
 4a8:	16 96       	adiw	r26, 0x06	; 6
 4aa:	8c 93       	st	X, r24
 4ac:	a5 85       	ldd	r26, Z+13	; 0x0d
 4ae:	b6 85       	ldd	r27, Z+14	; 0x0e
 4b0:	16 96       	adiw	r26, 0x06	; 6
 4b2:	0d 90       	ld	r0, X+
 4b4:	bc 91       	ld	r27, X
 4b6:	a0 2d       	mov	r26, r0
 4b8:	17 96       	adiw	r26, 0x07	; 7
 4ba:	1c 92       	st	X, r1
 4bc:	85 85       	ldd	r24, Z+13	; 0x0d
 4be:	96 85       	ldd	r25, Z+14	; 0x0e
 4c0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <can_cmd>
 4c4:	08 95       	ret

000004c6 <sendFilteretData>:
}
extern void sendFilteretData(sensor_at_node* Sensor)
{
 4c6:	fc 01       	movw	r30, r24
	Sensor->transmissionMOb->pt_data[0] = 0b00110000; // Data message
 4c8:	a5 85       	ldd	r26, Z+13	; 0x0d
 4ca:	b6 85       	ldd	r27, Z+14	; 0x0e
 4cc:	16 96       	adiw	r26, 0x06	; 6
 4ce:	0d 90       	ld	r0, X+
 4d0:	bc 91       	ld	r27, X
 4d2:	a0 2d       	mov	r26, r0
 4d4:	80 e3       	ldi	r24, 0x30	; 48
 4d6:	8c 93       	st	X, r24
	Sensor->transmissionMOb->pt_data[1] = (Sensor->sensor_Type*16)+Sensor->unit;
 4d8:	a5 85       	ldd	r26, Z+13	; 0x0d
 4da:	b6 85       	ldd	r27, Z+14	; 0x0e
 4dc:	16 96       	adiw	r26, 0x06	; 6
 4de:	0d 90       	ld	r0, X+
 4e0:	bc 91       	ld	r27, X
 4e2:	a0 2d       	mov	r26, r0
 4e4:	92 81       	ldd	r25, Z+2	; 0x02
 4e6:	83 81       	ldd	r24, Z+3	; 0x03
 4e8:	20 e1       	ldi	r18, 0x10	; 16
 4ea:	92 9f       	mul	r25, r18
 4ec:	80 0d       	add	r24, r0
 4ee:	11 24       	eor	r1, r1
 4f0:	11 96       	adiw	r26, 0x01	; 1
 4f2:	8c 93       	st	X, r24
	uint8_t *vp = (uint8_t *)&Sensor->filterValue;
	Sensor->transmissionMOb->pt_data[2] = vp[3];
 4f4:	a5 85       	ldd	r26, Z+13	; 0x0d
 4f6:	b6 85       	ldd	r27, Z+14	; 0x0e
 4f8:	16 96       	adiw	r26, 0x06	; 6
 4fa:	0d 90       	ld	r0, X+
 4fc:	bc 91       	ld	r27, X
 4fe:	a0 2d       	mov	r26, r0
 500:	84 85       	ldd	r24, Z+12	; 0x0c
 502:	12 96       	adiw	r26, 0x02	; 2
 504:	8c 93       	st	X, r24
	Sensor->transmissionMOb->pt_data[3] = vp[2];
 506:	a5 85       	ldd	r26, Z+13	; 0x0d
 508:	b6 85       	ldd	r27, Z+14	; 0x0e
 50a:	16 96       	adiw	r26, 0x06	; 6
 50c:	0d 90       	ld	r0, X+
 50e:	bc 91       	ld	r27, X
 510:	a0 2d       	mov	r26, r0
 512:	83 85       	ldd	r24, Z+11	; 0x0b
 514:	13 96       	adiw	r26, 0x03	; 3
 516:	8c 93       	st	X, r24
	Sensor->transmissionMOb->pt_data[4] = vp[1];
 518:	a5 85       	ldd	r26, Z+13	; 0x0d
 51a:	b6 85       	ldd	r27, Z+14	; 0x0e
 51c:	16 96       	adiw	r26, 0x06	; 6
 51e:	0d 90       	ld	r0, X+
 520:	bc 91       	ld	r27, X
 522:	a0 2d       	mov	r26, r0
 524:	82 85       	ldd	r24, Z+10	; 0x0a
 526:	14 96       	adiw	r26, 0x04	; 4
 528:	8c 93       	st	X, r24
	Sensor->transmissionMOb->pt_data[5] = vp[0];
 52a:	a5 85       	ldd	r26, Z+13	; 0x0d
 52c:	b6 85       	ldd	r27, Z+14	; 0x0e
 52e:	16 96       	adiw	r26, 0x06	; 6
 530:	0d 90       	ld	r0, X+
 532:	bc 91       	ld	r27, X
 534:	a0 2d       	mov	r26, r0
 536:	81 85       	ldd	r24, Z+9	; 0x09
 538:	15 96       	adiw	r26, 0x05	; 5
 53a:	8c 93       	st	X, r24
	Sensor ->transmissionMOb->pt_data[6] = 0;
 53c:	a5 85       	ldd	r26, Z+13	; 0x0d
 53e:	b6 85       	ldd	r27, Z+14	; 0x0e
 540:	16 96       	adiw	r26, 0x06	; 6
 542:	0d 90       	ld	r0, X+
 544:	bc 91       	ld	r27, X
 546:	a0 2d       	mov	r26, r0
 548:	16 96       	adiw	r26, 0x06	; 6
 54a:	1c 92       	st	X, r1
	Sensor ->transmissionMOb->pt_data[7] = 0;
 54c:	a5 85       	ldd	r26, Z+13	; 0x0d
 54e:	b6 85       	ldd	r27, Z+14	; 0x0e
 550:	16 96       	adiw	r26, 0x06	; 6
 552:	0d 90       	ld	r0, X+
 554:	bc 91       	ld	r27, X
 556:	a0 2d       	mov	r26, r0
 558:	17 96       	adiw	r26, 0x07	; 7
 55a:	1c 92       	st	X, r1
	can_cmd(Sensor->transmissionMOb);
 55c:	85 85       	ldd	r24, Z+13	; 0x0d
 55e:	96 85       	ldd	r25, Z+14	; 0x0e
 560:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <can_cmd>
 564:	08 95       	ret

00000566 <decodeHubServiceMessage>:
}

// decodeHubServiceMessage(uint8_t message_array[8],sensor_at_node* sensor) takes the array of message bytes
// and fills out the given sensor struct
void decodeHubServiceMessage(uint8_t message_array[8], sensor_at_node* sensor)
{
 566:	dc 01       	movw	r26, r24
 568:	fb 01       	movw	r30, r22
	sensor->sensor_Type = (message_array[1] & 0b11110000)/16; // Shift left nibble to the right with /16
 56a:	11 96       	adiw	r26, 0x01	; 1
 56c:	8c 91       	ld	r24, X
 56e:	11 97       	sbiw	r26, 0x01	; 1
 570:	80 7f       	andi	r24, 0xF0	; 240
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	95 95       	asr	r25
 576:	87 95       	ror	r24
 578:	95 95       	asr	r25
 57a:	87 95       	ror	r24
 57c:	95 95       	asr	r25
 57e:	87 95       	ror	r24
 580:	95 95       	asr	r25
 582:	87 95       	ror	r24
 584:	82 83       	std	Z+2, r24	; 0x02
	sensor->unit = message_array[1] & 0b00001111;
 586:	11 96       	adiw	r26, 0x01	; 1
 588:	8c 91       	ld	r24, X
 58a:	11 97       	sbiw	r26, 0x01	; 1
 58c:	8f 70       	andi	r24, 0x0F	; 15
 58e:	83 83       	std	Z+3, r24	; 0x03
	sensor->coefficient1 = message_array[2];
 590:	12 96       	adiw	r26, 0x02	; 2
 592:	8c 91       	ld	r24, X
 594:	12 97       	sbiw	r26, 0x02	; 2
 596:	84 83       	std	Z+4, r24	; 0x04
	sensor->coefficient2 = message_array[3];
 598:	13 96       	adiw	r26, 0x03	; 3
 59a:	8c 91       	ld	r24, X
 59c:	13 97       	sbiw	r26, 0x03	; 3
 59e:	85 83       	std	Z+5, r24	; 0x05
	sensor->coefficient3 = message_array[4];
 5a0:	14 96       	adiw	r26, 0x04	; 4
 5a2:	8c 91       	ld	r24, X
 5a4:	14 97       	sbiw	r26, 0x04	; 4
 5a6:	86 83       	std	Z+6, r24	; 0x06
	sensor->period = message_array[5];
 5a8:	15 96       	adiw	r26, 0x05	; 5
 5aa:	8c 91       	ld	r24, X
 5ac:	15 97       	sbiw	r26, 0x05	; 5
 5ae:	87 83       	std	Z+7, r24	; 0x07
	sensor->cutOffFreq = message_array[6];
 5b0:	16 96       	adiw	r26, 0x06	; 6
 5b2:	8c 91       	ld	r24, X
 5b4:	80 87       	std	Z+8, r24	; 0x08
 5b6:	08 95       	ret

000005b8 <decodeMessage>:
}*/


//Decoding message from hub and determinds what kind of message type it is.
void decodeMessage(st_cmd_t* message_struct,sensor_at_node* SensorList, uint8_t NUMBER_OF_SENSORS)
{
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	28 97       	sbiw	r28, 0x08	; 8
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
 5d4:	8c 01       	movw	r16, r24
	uint8_t message_array[8];
	for(uint8_t i = 0; i<8; i++)
	{
		message_array[i] = message_struct -> pt_data[i];
 5d6:	fc 01       	movw	r30, r24
 5d8:	e6 80       	ldd	r14, Z+6	; 0x06
 5da:	f7 80       	ldd	r15, Z+7	; 0x07
 5dc:	d7 01       	movw	r26, r14
 5de:	fe 01       	movw	r30, r28
 5e0:	31 96       	adiw	r30, 0x01	; 1
 5e2:	9e 01       	movw	r18, r28
 5e4:	27 5f       	subi	r18, 0xF7	; 247
 5e6:	3f 4f       	sbci	r19, 0xFF	; 255
 5e8:	9d 91       	ld	r25, X+
 5ea:	91 93       	st	Z+, r25

//Decoding message from hub and determinds what kind of message type it is.
void decodeMessage(st_cmd_t* message_struct,sensor_at_node* SensorList, uint8_t NUMBER_OF_SENSORS)
{
	uint8_t message_array[8];
	for(uint8_t i = 0; i<8; i++)
 5ec:	e2 17       	cp	r30, r18
 5ee:	f3 07       	cpc	r31, r19
 5f0:	d9 f7       	brne	.-10     	; 0x5e8 <decodeMessage+0x30>
	{
		message_array[i] = message_struct -> pt_data[i];
	}
	
	switch ((message_struct->pt_data[0] & 0b11110000))// only looks a first nibble
 5f2:	f7 01       	movw	r30, r14
 5f4:	90 81       	ld	r25, Z
 5f6:	90 7f       	andi	r25, 0xF0	; 240
 5f8:	90 3c       	cpi	r25, 0xC0	; 192
 5fa:	99 f0       	breq	.+38     	; 0x622 <decodeMessage+0x6a>
 5fc:	90 3e       	cpi	r25, 0xE0	; 224
 5fe:	09 f0       	breq	.+2      	; 0x602 <decodeMessage+0x4a>
 600:	5c c0       	rjmp	.+184    	; 0x6ba <decodeMessage+0x102>
			}
			break;
		}
		case 0b11100000: // ID FOR DATA RETRIEVING MESSAGE, FROM SPECIFIC MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
 602:	50 e0       	ldi	r21, 0x00	; 0
 604:	14 16       	cp	r1, r20
 606:	15 06       	cpc	r1, r21
 608:	0c f0       	brlt	.+2      	; 0x60c <decodeMessage+0x54>
 60a:	57 c0       	rjmp	.+174    	; 0x6ba <decodeMessage+0x102>
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 60c:	f8 01       	movw	r30, r16
 60e:	a1 81       	ldd	r26, Z+1	; 0x01
 610:	b2 81       	ldd	r27, Z+2	; 0x02
 612:	fb 01       	movw	r30, r22
 614:	80 81       	ld	r24, Z
 616:	91 81       	ldd	r25, Z+1	; 0x01
 618:	a8 17       	cp	r26, r24
 61a:	b9 07       	cpc	r27, r25
 61c:	09 f0       	breq	.+2      	; 0x620 <decodeMessage+0x68>
 61e:	44 c0       	rjmp	.+136    	; 0x6a8 <decodeMessage+0xf0>
 620:	3e c0       	rjmp	.+124    	; 0x69e <decodeMessage+0xe6>
	
	switch ((message_struct->pt_data[0] & 0b11110000))// only looks a first nibble
	{
		case 0b11000000: // ID FOR A SERVICE MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
 622:	50 e0       	ldi	r21, 0x00	; 0
 624:	14 16       	cp	r1, r20
 626:	15 06       	cpc	r1, r21
 628:	0c f0       	brlt	.+2      	; 0x62c <decodeMessage+0x74>
 62a:	47 c0       	rjmp	.+142    	; 0x6ba <decodeMessage+0x102>
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 62c:	f8 01       	movw	r30, r16
 62e:	a1 81       	ldd	r26, Z+1	; 0x01
 630:	b2 81       	ldd	r27, Z+2	; 0x02
 632:	fb 01       	movw	r30, r22
 634:	80 81       	ld	r24, Z
 636:	91 81       	ldd	r25, Z+1	; 0x01
 638:	a8 17       	cp	r26, r24
 63a:	b9 07       	cpc	r27, r25
 63c:	d1 f4       	brne	.+52     	; 0x672 <decodeMessage+0xba>
 63e:	0c c0       	rjmp	.+24     	; 0x658 <decodeMessage+0xa0>
 640:	06 2f       	mov	r16, r22
 642:	17 2f       	mov	r17, r23
 644:	61 5f       	subi	r22, 0xF1	; 241
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	fb 01       	movw	r30, r22
 64a:	3f 97       	sbiw	r30, 0x0f	; 15
 64c:	20 81       	ld	r18, Z
 64e:	31 81       	ldd	r19, Z+1	; 0x01
 650:	2a 17       	cp	r18, r26
 652:	3b 07       	cpc	r19, r27
 654:	91 f4       	brne	.+36     	; 0x67a <decodeMessage+0xc2>
 656:	02 c0       	rjmp	.+4      	; 0x65c <decodeMessage+0xa4>
 658:	06 2f       	mov	r16, r22
 65a:	17 2f       	mov	r17, r23
				{
					decodeHubServiceMessage(message_array,&SensorList[i]);
 65c:	60 2f       	mov	r22, r16
 65e:	71 2f       	mov	r23, r17
 660:	ce 01       	movw	r24, r28
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	0e 94 b3 02 	call	0x566	; 0x566 <decodeHubServiceMessage>
					ACK_TO_Hub(&SensorList[i]);
 668:	80 2f       	mov	r24, r16
 66a:	91 2f       	mov	r25, r17
 66c:	0e 94 12 02 	call	0x424	; 0x424 <ACK_TO_Hub>
					break;
 670:	24 c0       	rjmp	.+72     	; 0x6ba <decodeMessage+0x102>
 672:	61 5f       	subi	r22, 0xF1	; 241
 674:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		case 0b11000000: // ID FOR A SERVICE MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	90 e0       	ldi	r25, 0x00	; 0
	
	switch ((message_struct->pt_data[0] & 0b11110000))// only looks a first nibble
	{
		case 0b11000000: // ID FOR A SERVICE MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	84 17       	cp	r24, r20
 67e:	95 07       	cpc	r25, r21
 680:	f9 f6       	brne	.-66     	; 0x640 <decodeMessage+0x88>
 682:	1b c0       	rjmp	.+54     	; 0x6ba <decodeMessage+0x102>
		}
		case 0b11100000: // ID FOR DATA RETRIEVING MESSAGE, FROM SPECIFIC MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 684:	86 2f       	mov	r24, r22
 686:	97 2f       	mov	r25, r23
 688:	61 5f       	subi	r22, 0xF1	; 241
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	fb 01       	movw	r30, r22
 68e:	3f 97       	sbiw	r30, 0x0f	; 15
 690:	01 90       	ld	r0, Z+
 692:	f0 81       	ld	r31, Z
 694:	e0 2d       	mov	r30, r0
 696:	ea 17       	cp	r30, r26
 698:	fb 07       	cpc	r31, r27
 69a:	51 f4       	brne	.+20     	; 0x6b0 <decodeMessage+0xf8>
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <decodeMessage+0xea>
 69e:	86 2f       	mov	r24, r22
 6a0:	97 2f       	mov	r25, r23
				{
					sendFilteretData(&SensorList[i]);
 6a2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sendFilteretData>
					break;
 6a6:	09 c0       	rjmp	.+18     	; 0x6ba <decodeMessage+0x102>
 6a8:	61 5f       	subi	r22, 0xF1	; 241
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		case 0b11100000: // ID FOR DATA RETRIEVING MESSAGE, FROM SPECIFIC MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 6ac:	20 e0       	ldi	r18, 0x00	; 0
 6ae:	30 e0       	ldi	r19, 0x00	; 0
			}
			break;
		}
		case 0b11100000: // ID FOR DATA RETRIEVING MESSAGE, FROM SPECIFIC MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
 6b0:	2f 5f       	subi	r18, 0xFF	; 255
 6b2:	3f 4f       	sbci	r19, 0xFF	; 255
 6b4:	24 17       	cp	r18, r20
 6b6:	35 07       	cpc	r19, r21
 6b8:	29 f7       	brne	.-54     	; 0x684 <decodeMessage+0xcc>
			//SEND BACK ERROR?
			break;
		}
		
	}
}
 6ba:	28 96       	adiw	r28, 0x08	; 8
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	f8 94       	cli
 6c0:	de bf       	out	0x3e, r29	; 62
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	cd bf       	out	0x3d, r28	; 61
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	08 95       	ret

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
