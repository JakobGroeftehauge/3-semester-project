
master_Sensor_Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000638  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800100  00800100  000006ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018fb  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fba  00000000  00000000  0000212f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0c  00000000  00000000  000030e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00003bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000096a  00000000  00000000  00003e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007fe  00000000  00000000  000047ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004fb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_15>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	aa 32       	cpi	r26, 0x2A	; 42
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  9c:	0c 94 1a 03 	jmp	0x634	; 0x634 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <ADCtimerSetup>:

#include "ADCTimer_drv.h"

void ADCtimerSetup() //Find new name !!
{
	ADC_setup();
  a4:	84 ee       	ldi	r24, 0xE4	; 228
  a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADC_pin1();
  aa:	55 98       	cbi	0x0a, 5	; 10
	ADC_pin2();
  ac:	26 98       	cbi	0x04, 6	; 4
	ADC_pin3();
  ae:	3c 98       	cbi	0x07, 4	; 7
	
	Timer0_CTC1();
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	84 bd       	out	0x24, r24	; 36
	Timer0_CTC2();
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	95 bd       	out	0x25, r25	; 37
	Timer0_interrupt();
  b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	Timer0_1ms();
  bc:	8c e7       	ldi	r24, 0x7C	; 124
  be:	87 bd       	out	0x27, r24	; 39
  c0:	08 95       	ret

000000c2 <can_clear_all_mob>:

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	cd ee       	ldi	r28, 0xED	; 237
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	af ee       	ldi	r26, 0xEF	; 239
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	ee ee       	ldi	r30, 0xEE	; 238
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	98 2f       	mov	r25, r24
  d6:	92 95       	swap	r25
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	98 83       	st	Y, r25
  dc:	1c 92       	st	X, r1
  de:	10 82       	st	Z, r1
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	86 30       	cpi	r24, 0x06	; 6
  e4:	b9 f7       	brne	.-18     	; 0xd4 <can_clear_all_mob+0x12>
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate()
{
    Can_reset();
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    Can_conf_bt();
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  fe:	83 e1       	ldi	r24, 0x13	; 19
 100:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    return 1;
}
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret

00000108 <setup_receive_mob>:

void setup_receive_mob(st_cmd_t* MObStruct){
 108:	fc 01       	movw	r30, r24
	
	CANPAGE = ( MObStruct->MObNumber << MOBNB0);			//Set canpage to the current mob
 10a:	80 85       	ldd	r24, Z+8	; 0x08
 10c:	82 95       	swap	r24
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	CANIE2 |= ( 1 << MObStruct->MObNumber);				// Enable interrupts for the current mob
 114:	ae ed       	ldi	r26, 0xDE	; 222
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	8c 91       	ld	r24, X
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	00 84       	ldd	r0, Z+8	; 0x08
 120:	02 c0       	rjmp	.+4      	; 0x126 <setup_receive_mob+0x1e>
 122:	22 0f       	add	r18, r18
 124:	33 1f       	adc	r19, r19
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <setup_receive_mob+0x1a>
 12a:	28 2b       	or	r18, r24
 12c:	2c 93       	st	X, r18
	
	CANIDM1 = (MObStruct->mask / 8);   	// Setup mask with the ID's to be received
 12e:	83 81       	ldd	r24, Z+3	; 0x03
 130:	94 81       	ldd	r25, Z+4	; 0x04
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	96 95       	lsr	r25
 138:	87 95       	ror	r24
 13a:	96 95       	lsr	r25
 13c:	87 95       	ror	r24
 13e:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>

	CANIDM2 = ((MObStruct->mask & 0x07) << 5); 	// ""
 142:	83 81       	ldd	r24, Z+3	; 0x03
 144:	82 95       	swap	r24
 146:	88 0f       	add	r24, r24
 148:	80 7e       	andi	r24, 0xE0	; 224
 14a:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>

	CANIDM3 = 0x00; 	// ""
 14e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>

	CANIDM4 = 0x00; 	// ""
 152:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	
	CANCDMOB = ( 1 << CONMOB1) | ( 8 << DLC0);
 156:	88 e8       	ldi	r24, 0x88	; 136
 158:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 15c:	08 95       	ret

0000015e <can_tx>:
		}	
		//return ACCEPTED;
	
	}

void can_tx(st_cmd_t* MObStruct) {
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	dc 01       	movw	r26, r24

	uint8_t i;   
	if (MObStruct->MObNumber < 6)
 164:	18 96       	adiw	r26, 0x08	; 8
 166:	8c 91       	ld	r24, X
 168:	18 97       	sbiw	r26, 0x08	; 8
 16a:	86 30       	cpi	r24, 0x06	; 6
 16c:	e8 f5       	brcc	.+122    	; 0x1e8 <can_tx+0x8a>
	{
	CANPAGE = MObStruct->MObNumber << MOBNB0;		// Select MOb0 for transmission
 16e:	82 95       	swap	r24
 170:	80 7f       	andi	r24, 0xF0	; 240
 172:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	}
	else return; 

	
	
	CANSTMOB = 0x00;    	// Clear mob status register
 176:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

		CANIDT1 = ((MObStruct->id) / 8) ; 	// Set can id to 0
 17a:	11 96       	adiw	r26, 0x01	; 1
 17c:	8d 91       	ld	r24, X+
 17e:	9c 91       	ld	r25, X
 180:	12 97       	sbiw	r26, 0x02	; 2
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	96 95       	lsr	r25
 18c:	87 95       	ror	r24
 18e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (((MObStruct->id) & 0x07) << 5);
 192:	11 96       	adiw	r26, 0x01	; 1
 194:	8c 91       	ld	r24, X
 196:	11 97       	sbiw	r26, 0x01	; 1
 198:	82 95       	swap	r24
 19a:	88 0f       	add	r24, r24
 19c:	80 7e       	andi	r24, 0xE0	; 224
 19e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0x00;		// ""
 1a2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0x00;		// ""
 1a6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
	//Set_can_ID(MObStruct->id);

	for (i=0; i < MSG_SIZE; i++)
	{
	CANMSG = MObStruct->pt_data[i]; 
 1ae:	ca ef       	ldi	r28, 0xFA	; 250
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	16 96       	adiw	r26, 0x06	; 6
 1b4:	ed 91       	ld	r30, X+
 1b6:	fc 91       	ld	r31, X
 1b8:	17 97       	sbiw	r26, 0x07	; 7
 1ba:	e2 0f       	add	r30, r18
 1bc:	f3 1f       	adc	r31, r19
 1be:	90 81       	ld	r25, Z
 1c0:	98 83       	st	Y, r25
 1c2:	2f 5f       	subi	r18, 0xFF	; 255
 1c4:	3f 4f       	sbci	r19, 0xFF	; 255
		CANIDT2 = (((MObStruct->id) & 0x07) << 5);
		CANIDT3 = 0x00;		// ""
		CANIDT4 = 0x00;		// ""
	//Set_can_ID(MObStruct->id);

	for (i=0; i < MSG_SIZE; i++)
 1c6:	28 30       	cpi	r18, 0x08	; 8
 1c8:	31 05       	cpc	r19, r1
 1ca:	99 f7       	brne	.-26     	; 0x1b2 <can_tx+0x54>
	{
	CANMSG = MObStruct->pt_data[i]; 
	}
	
	CANCDMOB = ( 1 << CONMOB0 ) | ( (MObStruct->dlc) << DLC0 ); 	// Enable transmission, data length=1 (CAN Standard rev 2.0B(29 bit identifiers))
 1cc:	15 96       	adiw	r26, 0x05	; 5
 1ce:	8c 91       	ld	r24, X
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	while ( ! ( CANSTMOB & ( 1 << TXOK ) ) );	// wait for TXOK flag set
 1d6:	ee ee       	ldi	r30, 0xEE	; 238
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	86 ff       	sbrs	r24, 6
 1de:	fd cf       	rjmp	.-6      	; 0x1da <can_tx+0x7c>
	// todo: have this use interrupts
	CANCDMOB = 0x00;	// Disable Transmission
 1e0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANSTMOB = 0x00;	// Clear TXOK flag
 1e4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <can_cmd>:
 

uint8_t can_cmd(st_cmd_t* MObStruct)
{
uint8_t status; 
switch(MObStruct->cmd)
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 81       	ld	r18, Z
 1f2:	22 23       	and	r18, r18
 1f4:	19 f0       	breq	.+6      	; 0x1fc <can_cmd+0xe>
 1f6:	21 30       	cpi	r18, 0x01	; 1
 1f8:	21 f0       	breq	.+8      	; 0x202 <can_cmd+0x14>
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <can_cmd+0x1a>
	{
	case TX:
			can_tx(MObStruct); 
 1fc:	0e 94 af 00 	call	0x15e	; 0x15e <can_tx>
			status = 0; 
			//MObStruct->status = DONE; 
			break; 
 200:	08 c0       	rjmp	.+16     	; 0x212 <can_cmd+0x24>

	case RX:
			setup_receive_mob(MObStruct);
 202:	0e 94 84 00 	call	0x108	; 0x108 <setup_receive_mob>
			status = 0; 
			//MObStruct->status = DONE; 
			break; 
 206:	05 c0       	rjmp	.+10     	; 0x212 <can_cmd+0x24>

	default:
			//MObStruct->status = NOT_ACCEPTED;
			bit_flip(PORTD, BIT(7));
 208:	8b b1       	in	r24, 0x0b	; 11
 20a:	80 58       	subi	r24, 0x80	; 128
 20c:	8b b9       	out	0x0b, r24	; 11
		{
		return ACCEPTED;
		}	
		else
		{
		 return NOT_ACCEPTED;
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	08 95       	ret
			status = 0x01;
			break; 
	}
		if (status == 0x00)
		{
		return ACCEPTED;
 212:	82 e0       	ldi	r24, 0x02	; 2
		{
		 return NOT_ACCEPTED;
		}	
		//return ACCEPTED;
	
	}
 214:	08 95       	ret

00000216 <transfer_data>:
	CANSTMOB = 0x00;	// Clear TXOK flag

}

void transfer_data(st_cmd_t* recieveMOb)
{
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	dc 01       	movw	r26, r24

CANPAGE = recieveMOb->MObNumber << 4;
 21c:	18 96       	adiw	r26, 0x08	; 8
 21e:	8c 91       	ld	r24, X
 220:	18 97       	sbiw	r26, 0x08	; 8
 222:	82 95       	swap	r24
 224:	80 7f       	andi	r24, 0xF0	; 240
 226:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

 recieveMOb->id = CANIDT1*8 + (CANIDT2/32);
 22a:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 22e:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	22 95       	swap	r18
 242:	26 95       	lsr	r18
 244:	27 70       	andi	r18, 0x07	; 7
 246:	82 0f       	add	r24, r18
 248:	91 1d       	adc	r25, r1
 24a:	12 96       	adiw	r26, 0x02	; 2
 24c:	9c 93       	st	X, r25
 24e:	8e 93       	st	-X, r24
 250:	11 97       	sbiw	r26, 0x01	; 1
 

if ( CANSTMOB & ( 1 << RXOK) ){  	// Interrupt caused by receive finished
 252:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 256:	85 ff       	sbrs	r24, 5
 258:	26 c0       	rjmp	.+76     	; 0x2a6 <transfer_data+0x90>

	recieveMOb->dlc = ( CANCDMOB & 0x0F );	// Save number of bytes to be recieved
 25a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 25e:	8f 70       	andi	r24, 0x0F	; 15
 260:	15 96       	adiw	r26, 0x05	; 5
 262:	8c 93       	st	X, r24
 264:	15 97       	sbiw	r26, 0x05	; 5



	for (int8_t i = 0; i < recieveMOb->dlc; i++){
 266:	88 23       	and	r24, r24
 268:	c9 f0       	breq	.+50     	; 0x29c <transfer_data+0x86>
 26a:	90 e0       	ldi	r25, 0x00	; 0

		recieveMOb->pt_data[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
 26c:	ca ef       	ldi	r28, 0xFA	; 250
 26e:	d0 e0       	ldi	r29, 0x00	; 0
 270:	88 81       	ld	r24, Y
 272:	16 96       	adiw	r26, 0x06	; 6
 274:	ed 91       	ld	r30, X+
 276:	fc 91       	ld	r31, X
 278:	17 97       	sbiw	r26, 0x07	; 7
 27a:	e9 0f       	add	r30, r25
 27c:	f1 1d       	adc	r31, r1
 27e:	97 fd       	sbrc	r25, 7
 280:	fa 95       	dec	r31
 282:	80 83       	st	Z, r24
 284:	9f 5f       	subi	r25, 0xFF	; 255

	recieveMOb->dlc = ( CANCDMOB & 0x0F );	// Save number of bytes to be recieved



	for (int8_t i = 0; i < recieveMOb->dlc; i++){
 286:	49 2f       	mov	r20, r25
 288:	09 2e       	mov	r0, r25
 28a:	00 0c       	add	r0, r0
 28c:	55 0b       	sbc	r21, r21
 28e:	15 96       	adiw	r26, 0x05	; 5
 290:	2c 91       	ld	r18, X
 292:	15 97       	sbiw	r26, 0x05	; 5
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	42 17       	cp	r20, r18
 298:	53 07       	cpc	r21, r19
 29a:	54 f3       	brlt	.-44     	; 0x270 <transfer_data+0x5a>

		recieveMOb->pt_data[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
	} 

	CANCDMOB = (( 1 << CONMOB1 ) | ( 8 << DLC0));  //Enable transmission, set data length to 8. 
 29c:	88 e8       	ldi	r24, 0x88	; 136
 29e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	
	CANSTMOB = 0x00; //reset MOb status register
 2a2:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>

	// Note - the DLC field of the CANCDMO register is updated by the received MOb. If the value differs from expected DLC, an error is set

} 
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <can_init>:


uint8_t can_init()
{
	Can_bit_timing(1);
 2ac:	0e 94 76 00 	call	0xec	; 0xec <can_fixed_baudrate>
	can_clear_all_mob();                        // c.f. function in "can_drv.c"
 2b0:	0e 94 61 00 	call	0xc2	; 0xc2 <can_clear_all_mob>
	Can_enable();								// c.f. macro in "can_drv.h"
 2b4:	e8 ed       	ldi	r30, 0xD8	; 216
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	82 60       	ori	r24, 0x02	; 2
 2bc:	80 83       	st	Z, r24
	Can_enable_chosen_ints();                   // macro in "can_drv.h" - change to enable different general interrupts
 2be:	80 ea       	ldi	r24, 0xA0	; 160
 2c0:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	return (1);
}
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	08 95       	ret

000002c8 <chip_init>:
for(u = 0; u < MSG_SIZE; u++)
{
buffer[u] = 0x00;
}

} //Maybe make it a makro 
 2c8:	84 e0       	ldi	r24, 0x04	; 4
 2ca:	87 b9       	out	0x07, r24	; 7
 2cc:	51 9a       	sbi	0x0a, 1	; 10
 2ce:	57 9a       	sbi	0x0a, 7	; 10
 2d0:	08 95       	ret

000002d2 <main>:
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	ae 97       	sbiw	r28, 0x2e	; 46
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	ce 01       	movw	r24, r28
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	98 8b       	std	Y+16, r25	; 0x10
 2ec:	8f 87       	std	Y+15, r24	; 0x0f
 2ee:	19 8a       	std	Y+17, r1	; 0x11
 2f0:	88 e0       	ldi	r24, 0x08	; 8
 2f2:	8e 87       	std	Y+14, r24	; 0x0e
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	99 87       	std	Y+9, r25	; 0x09
 2f8:	1d 86       	std	Y+13, r1	; 0x0d
 2fa:	1c 86       	std	Y+12, r1	; 0x0c
 2fc:	9e 01       	movw	r18, r28
 2fe:	2d 5e       	subi	r18, 0xED	; 237
 300:	3f 4f       	sbci	r19, 0xFF	; 255
 302:	3a a3       	std	Y+34, r19	; 0x22
 304:	29 a3       	std	Y+33, r18	; 0x21
 306:	9b a3       	std	Y+35, r25	; 0x23
 308:	88 a3       	std	Y+32, r24	; 0x20
 30a:	1b 8e       	std	Y+27, r1	; 0x1b
 30c:	ee 24       	eor	r14, r14
 30e:	e3 94       	inc	r14
 310:	f1 2c       	mov	r15, r1
 312:	fd 8e       	std	Y+29, r15	; 0x1d
 314:	ec 8e       	std	Y+28, r14	; 0x1c
 316:	3c a7       	std	Y+44, r19	; 0x2c
 318:	2b a7       	std	Y+43, r18	; 0x2b
 31a:	92 e0       	ldi	r25, 0x02	; 2
 31c:	9d a7       	std	Y+45, r25	; 0x2d
 31e:	8a a7       	std	Y+42, r24	; 0x2a
 320:	1d a2       	std	Y+37, r1	; 0x25
 322:	02 e0       	ldi	r16, 0x02	; 2
 324:	10 e0       	ldi	r17, 0x00	; 0
 326:	1f a3       	std	Y+39, r17	; 0x27
 328:	0e a3       	std	Y+38, r16	; 0x26
 32a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <chip_init>
 32e:	0e 94 56 01 	call	0x2ac	; 0x2ac <can_init>
 332:	0e 94 52 00 	call	0xa4	; 0xa4 <ADCtimerSetup>
 336:	ce 01       	movw	r24, r28
 338:	09 96       	adiw	r24, 0x09	; 9
 33a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <can_cmd>
 33e:	e2 e0       	ldi	r30, 0x02	; 2
 340:	f1 e0       	ldi	r31, 0x01	; 1
 342:	f1 82       	std	Z+1, r15	; 0x01
 344:	e0 82       	st	Z, r14
 346:	ce 01       	movw	r24, r28
 348:	4b 96       	adiw	r24, 0x1b	; 27
 34a:	97 87       	std	Z+15, r25	; 0x0f
 34c:	86 87       	std	Z+14, r24	; 0x0e
 34e:	11 8b       	std	Z+17, r17	; 0x11
 350:	00 8b       	std	Z+16, r16	; 0x10
 352:	0a 96       	adiw	r24, 0x0a	; 10
 354:	97 8f       	std	Z+31, r25	; 0x1f
 356:	86 8f       	std	Z+30, r24	; 0x1e
 358:	78 94       	sei
 35a:	d1 2c       	mov	r13, r1
 35c:	c1 2c       	mov	r12, r1
 35e:	e1 2c       	mov	r14, r1
 360:	f1 2c       	mov	r15, r1
 362:	8f 01       	movw	r16, r30
 364:	0f 2e       	mov	r0, r31
 366:	fd ed       	ldi	r31, 0xDD	; 221
 368:	4f 2e       	mov	r4, r31
 36a:	fc ec       	ldi	r31, 0xCC	; 204
 36c:	5f 2e       	mov	r5, r31
 36e:	fb eb       	ldi	r31, 0xBB	; 187
 370:	6f 2e       	mov	r6, r31
 372:	fa ea       	ldi	r31, 0xAA	; 170
 374:	7f 2e       	mov	r7, r31
 376:	f0 2d       	mov	r31, r0
 378:	0f 2e       	mov	r0, r31
 37a:	fb eb       	ldi	r31, 0xBB	; 187
 37c:	8f 2e       	mov	r8, r31
 37e:	fa ea       	ldi	r31, 0xAA	; 170
 380:	9f 2e       	mov	r9, r31
 382:	aa 24       	eor	r10, r10
 384:	aa 94       	dec	r10
 386:	fe ee       	ldi	r31, 0xEE	; 238
 388:	bf 2e       	mov	r11, r31
 38a:	f0 2d       	mov	r31, r0
 38c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 390:	88 23       	and	r24, r24
 392:	e1 f3       	breq	.-8      	; 0x38c <main+0xba>
 394:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 398:	81 50       	subi	r24, 0x01	; 1
 39a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
 39e:	f3 94       	inc	r15
 3a0:	e3 94       	inc	r14
 3a2:	c3 94       	inc	r12
 3a4:	d3 94       	inc	r13
 3a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3aa:	88 23       	and	r24, r24
 3ac:	a9 f0       	breq	.+42     	; 0x3d8 <main+0x106>
 3ae:	f8 01       	movw	r30, r16
 3b0:	42 86       	std	Z+10, r4	; 0x0a
 3b2:	53 86       	std	Z+11, r5	; 0x0b
 3b4:	64 86       	std	Z+12, r6	; 0x0c
 3b6:	75 86       	std	Z+13, r7	; 0x0d
 3b8:	82 8e       	std	Z+26, r8	; 0x1a
 3ba:	93 8e       	std	Z+27, r9	; 0x1b
 3bc:	a4 8e       	std	Z+28, r10	; 0x1c
 3be:	b5 8e       	std	Z+29, r11	; 0x1d
 3c0:	ce 01       	movw	r24, r28
 3c2:	09 96       	adiw	r24, 0x09	; 9
 3c4:	0e 94 0b 01 	call	0x216	; 0x216 <transfer_data>
 3c8:	42 e0       	ldi	r20, 0x02	; 2
 3ca:	b8 01       	movw	r22, r16
 3cc:	ce 01       	movw	r24, r28
 3ce:	09 96       	adiw	r24, 0x09	; 9
 3d0:	0e 94 c4 02 	call	0x588	; 0x588 <decodeMessage>
 3d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 3d8:	f8 01       	movw	r30, r16
 3da:	87 81       	ldd	r24, Z+7	; 0x07
 3dc:	f8 16       	cp	r15, r24
 3de:	38 f0       	brcs	.+14     	; 0x3ee <main+0x11c>
 3e0:	87 81       	ldd	r24, Z+7	; 0x07
 3e2:	88 23       	and	r24, r24
 3e4:	21 f0       	breq	.+8      	; 0x3ee <main+0x11c>
 3e6:	8b b1       	in	r24, 0x0b	; 11
 3e8:	80 58       	subi	r24, 0x80	; 128
 3ea:	8b b9       	out	0x0b, r24	; 11
 3ec:	f1 2c       	mov	r15, r1
 3ee:	f8 01       	movw	r30, r16
 3f0:	87 89       	ldd	r24, Z+23	; 0x17
 3f2:	e8 16       	cp	r14, r24
 3f4:	40 f0       	brcs	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f6:	87 89       	ldd	r24, Z+23	; 0x17
 3f8:	88 23       	and	r24, r24
 3fa:	29 f0       	breq	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fc:	9b b1       	in	r25, 0x0b	; 11
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	89 27       	eor	r24, r25
 402:	8b b9       	out	0x0b, r24	; 11
 404:	e1 2c       	mov	r14, r1
 406:	f8 01       	movw	r30, r16
 408:	86 81       	ldd	r24, Z+6	; 0x06
 40a:	9c 2d       	mov	r25, r12
 40c:	96 95       	lsr	r25
 40e:	98 17       	cp	r25, r24
 410:	38 f0       	brcs	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 412:	86 81       	ldd	r24, Z+6	; 0x06
 414:	88 23       	and	r24, r24
 416:	21 f0       	breq	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 418:	c8 01       	movw	r24, r16
 41a:	0e 94 43 02 	call	0x486	; 0x486 <sendFilteretData>
 41e:	c1 2c       	mov	r12, r1
 420:	f8 01       	movw	r30, r16
 422:	86 89       	ldd	r24, Z+22	; 0x16
 424:	9d 2d       	mov	r25, r13
 426:	96 95       	lsr	r25
 428:	98 17       	cp	r25, r24
 42a:	08 f4       	brcc	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	af cf       	rjmp	.-162    	; 0x38c <main+0xba>
 42e:	86 89       	ldd	r24, Z+22	; 0x16
 430:	88 23       	and	r24, r24
 432:	09 f4       	brne	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	ab cf       	rjmp	.-170    	; 0x38c <main+0xba>
 436:	82 e1       	ldi	r24, 0x12	; 18
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	0e 94 43 02 	call	0x486	; 0x486 <sendFilteretData>
 43e:	d1 2c       	mov	r13, r1
 440:	a5 cf       	rjmp	.-182    	; 0x38c <main+0xba>

00000442 <__vector_15>:

ISR(TIMER0_COMPA_vect)
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	8f 93       	push	r24
	tick++;
 44e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tick>
 452:	8f 5f       	subi	r24, 0xFF	; 255
 454:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tick>
}
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__vector_18>:

ISR( CAN_INT_vect )
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	8f 93       	push	r24
	receivedMessages++; 
 470:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 474:	8f 5f       	subi	r24, 0xFF	; 255
 476:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 47a:	8f 91       	pop	r24
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <sendFilteretData>:
	//ACK_FROM_NODE(sensor); //NEEDS TO BE MADE!. TRANSMIT THE STRUCT BACK
}

// sendServiceMessage puts parameters into array, which can be sent
void sendServiceMessage(sensor_Types type, units unit, uint8_t range_min, uint8_t range_max, uint8_t trans_frq, uint8_t sampl_frq, uint8_t filt_type, uint8_t filt_par)
{
 486:	fc 01       	movw	r30, r24
 488:	a6 85       	ldd	r26, Z+14	; 0x0e
 48a:	b7 85       	ldd	r27, Z+15	; 0x0f
 48c:	16 96       	adiw	r26, 0x06	; 6
 48e:	0d 90       	ld	r0, X+
 490:	bc 91       	ld	r27, X
 492:	a0 2d       	mov	r26, r0
 494:	80 e3       	ldi	r24, 0x30	; 48
 496:	8c 93       	st	X, r24
 498:	a6 85       	ldd	r26, Z+14	; 0x0e
 49a:	b7 85       	ldd	r27, Z+15	; 0x0f
 49c:	16 96       	adiw	r26, 0x06	; 6
 49e:	0d 90       	ld	r0, X+
 4a0:	bc 91       	ld	r27, X
 4a2:	a0 2d       	mov	r26, r0
 4a4:	82 81       	ldd	r24, Z+2	; 0x02
 4a6:	81 11       	cpse	r24, r1
 4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <sendFilteretData+0x30>
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	93 81       	ldd	r25, Z+3	; 0x03
 4ae:	91 11       	cpse	r25, r1
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <sendFilteretData+0x32>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <sendFilteretData+0x32>
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	11 96       	adiw	r26, 0x01	; 1
 4ba:	8c 93       	st	X, r24
 4bc:	a6 85       	ldd	r26, Z+14	; 0x0e
 4be:	b7 85       	ldd	r27, Z+15	; 0x0f
 4c0:	16 96       	adiw	r26, 0x06	; 6
 4c2:	0d 90       	ld	r0, X+
 4c4:	bc 91       	ld	r27, X
 4c6:	a0 2d       	mov	r26, r0
 4c8:	85 85       	ldd	r24, Z+13	; 0x0d
 4ca:	12 96       	adiw	r26, 0x02	; 2
 4cc:	8c 93       	st	X, r24
 4ce:	a6 85       	ldd	r26, Z+14	; 0x0e
 4d0:	b7 85       	ldd	r27, Z+15	; 0x0f
 4d2:	16 96       	adiw	r26, 0x06	; 6
 4d4:	0d 90       	ld	r0, X+
 4d6:	bc 91       	ld	r27, X
 4d8:	a0 2d       	mov	r26, r0
 4da:	84 85       	ldd	r24, Z+12	; 0x0c
 4dc:	13 96       	adiw	r26, 0x03	; 3
 4de:	8c 93       	st	X, r24
 4e0:	a6 85       	ldd	r26, Z+14	; 0x0e
 4e2:	b7 85       	ldd	r27, Z+15	; 0x0f
 4e4:	16 96       	adiw	r26, 0x06	; 6
 4e6:	0d 90       	ld	r0, X+
 4e8:	bc 91       	ld	r27, X
 4ea:	a0 2d       	mov	r26, r0
 4ec:	83 85       	ldd	r24, Z+11	; 0x0b
 4ee:	14 96       	adiw	r26, 0x04	; 4
 4f0:	8c 93       	st	X, r24
 4f2:	a6 85       	ldd	r26, Z+14	; 0x0e
 4f4:	b7 85       	ldd	r27, Z+15	; 0x0f
 4f6:	16 96       	adiw	r26, 0x06	; 6
 4f8:	0d 90       	ld	r0, X+
 4fa:	bc 91       	ld	r27, X
 4fc:	a0 2d       	mov	r26, r0
 4fe:	82 85       	ldd	r24, Z+10	; 0x0a
 500:	15 96       	adiw	r26, 0x05	; 5
 502:	8c 93       	st	X, r24
 504:	a6 85       	ldd	r26, Z+14	; 0x0e
 506:	b7 85       	ldd	r27, Z+15	; 0x0f
 508:	86 e0       	ldi	r24, 0x06	; 6
 50a:	15 96       	adiw	r26, 0x05	; 5
 50c:	8c 93       	st	X, r24
 50e:	86 85       	ldd	r24, Z+14	; 0x0e
 510:	97 85       	ldd	r25, Z+15	; 0x0f
 512:	0e 94 f7 00 	call	0x1ee	; 0x1ee <can_cmd>
 516:	08 95       	ret

00000518 <decodeHubServiceMessage>:
 518:	dc 01       	movw	r26, r24
 51a:	fb 01       	movw	r30, r22
 51c:	11 96       	adiw	r26, 0x01	; 1
 51e:	8c 91       	ld	r24, X
 520:	11 97       	sbiw	r26, 0x01	; 1
 522:	80 7f       	andi	r24, 0xF0	; 240
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	95 95       	asr	r25
 528:	87 95       	ror	r24
 52a:	95 95       	asr	r25
 52c:	87 95       	ror	r24
 52e:	95 95       	asr	r25
 530:	87 95       	ror	r24
 532:	95 95       	asr	r25
 534:	87 95       	ror	r24
 536:	82 83       	std	Z+2, r24	; 0x02
 538:	11 96       	adiw	r26, 0x01	; 1
 53a:	8c 91       	ld	r24, X
 53c:	11 97       	sbiw	r26, 0x01	; 1
 53e:	8f 70       	andi	r24, 0x0F	; 15
 540:	83 83       	std	Z+3, r24	; 0x03
 542:	12 96       	adiw	r26, 0x02	; 2
 544:	8c 91       	ld	r24, X
 546:	12 97       	sbiw	r26, 0x02	; 2
 548:	84 83       	std	Z+4, r24	; 0x04
 54a:	13 96       	adiw	r26, 0x03	; 3
 54c:	8c 91       	ld	r24, X
 54e:	13 97       	sbiw	r26, 0x03	; 3
 550:	85 83       	std	Z+5, r24	; 0x05
 552:	14 96       	adiw	r26, 0x04	; 4
 554:	8c 91       	ld	r24, X
 556:	14 97       	sbiw	r26, 0x04	; 4
 558:	80 7f       	andi	r24, 0xF0	; 240
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	95 95       	asr	r25
 55e:	87 95       	ror	r24
 560:	95 95       	asr	r25
 562:	87 95       	ror	r24
 564:	95 95       	asr	r25
 566:	87 95       	ror	r24
 568:	95 95       	asr	r25
 56a:	87 95       	ror	r24
 56c:	86 83       	std	Z+6, r24	; 0x06
 56e:	14 96       	adiw	r26, 0x04	; 4
 570:	8c 91       	ld	r24, X
 572:	14 97       	sbiw	r26, 0x04	; 4
 574:	8f 70       	andi	r24, 0x0F	; 15
 576:	87 83       	std	Z+7, r24	; 0x07
 578:	15 96       	adiw	r26, 0x05	; 5
 57a:	8c 91       	ld	r24, X
 57c:	15 97       	sbiw	r26, 0x05	; 5
 57e:	80 87       	std	Z+8, r24	; 0x08
 580:	16 96       	adiw	r26, 0x06	; 6
 582:	8c 91       	ld	r24, X
 584:	81 87       	std	Z+9, r24	; 0x09
 586:	08 95       	ret

00000588 <decodeMessage>:
}


//Decoding message from hub and determinds what kind of message type it is.
void decodeMessage(st_cmd_t* message_struct,sensor_at_node* SensorList, uint8_t NUMBER_OF_SENSORS)
{
 588:	ef 92       	push	r14
 58a:	ff 92       	push	r15
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	28 97       	sbiw	r28, 0x08	; 8
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	8c 01       	movw	r16, r24
	uint8_t message_array[8];
	for(uint8_t i = 0; i<8; i++)
	{
		message_array[i] = message_struct -> pt_data[i];
 5a6:	fc 01       	movw	r30, r24
 5a8:	e6 80       	ldd	r14, Z+6	; 0x06
 5aa:	f7 80       	ldd	r15, Z+7	; 0x07
 5ac:	d7 01       	movw	r26, r14
 5ae:	fe 01       	movw	r30, r28
 5b0:	31 96       	adiw	r30, 0x01	; 1
 5b2:	9e 01       	movw	r18, r28
 5b4:	27 5f       	subi	r18, 0xF7	; 247
 5b6:	3f 4f       	sbci	r19, 0xFF	; 255
 5b8:	9d 91       	ld	r25, X+
 5ba:	91 93       	st	Z+, r25

//Decoding message from hub and determinds what kind of message type it is.
void decodeMessage(st_cmd_t* message_struct,sensor_at_node* SensorList, uint8_t NUMBER_OF_SENSORS)
{
	uint8_t message_array[8];
	for(uint8_t i = 0; i<8; i++)
 5bc:	e2 17       	cp	r30, r18
 5be:	f3 07       	cpc	r31, r19
 5c0:	d9 f7       	brne	.-10     	; 0x5b8 <decodeMessage+0x30>
	{
		message_array[i] = message_struct -> pt_data[i];
	}
	
	switch ((message_struct->pt_data[0] & 0b11110000))// only looks a first nibble
 5c2:	f7 01       	movw	r30, r14
 5c4:	90 81       	ld	r25, Z
 5c6:	90 7f       	andi	r25, 0xF0	; 240
 5c8:	90 3c       	cpi	r25, 0xC0	; 192
 5ca:	39 f5       	brne	.+78     	; 0x61a <decodeMessage+0x92>
	{
		case 0b11000000: // ID FOR A SERVICE MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	14 16       	cp	r1, r20
 5d0:	15 06       	cpc	r1, r21
 5d2:	1c f5       	brge	.+70     	; 0x61a <decodeMessage+0x92>
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 5d4:	f8 01       	movw	r30, r16
 5d6:	a1 81       	ldd	r26, Z+1	; 0x01
 5d8:	b2 81       	ldd	r27, Z+2	; 0x02
 5da:	fb 01       	movw	r30, r22
 5dc:	80 81       	ld	r24, Z
 5de:	91 81       	ldd	r25, Z+1	; 0x01
 5e0:	a8 17       	cp	r26, r24
 5e2:	b9 07       	cpc	r27, r25
 5e4:	89 f4       	brne	.+34     	; 0x608 <decodeMessage+0x80>
 5e6:	0b c0       	rjmp	.+22     	; 0x5fe <decodeMessage+0x76>
 5e8:	68 2f       	mov	r22, r24
 5ea:	79 2f       	mov	r23, r25
 5ec:	40 96       	adiw	r24, 0x10	; 16
 5ee:	fc 01       	movw	r30, r24
 5f0:	70 97       	sbiw	r30, 0x10	; 16
 5f2:	01 90       	ld	r0, Z+
 5f4:	f0 81       	ld	r31, Z
 5f6:	e0 2d       	mov	r30, r0
 5f8:	ea 17       	cp	r30, r26
 5fa:	fb 07       	cpc	r31, r27
 5fc:	49 f4       	brne	.+18     	; 0x610 <decodeMessage+0x88>
				{
					decodeHubServiceMessage(message_array,&SensorList[i]);
 5fe:	ce 01       	movw	r24, r28
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	0e 94 8c 02 	call	0x518	; 0x518 <decodeHubServiceMessage>
					break;
 606:	09 c0       	rjmp	.+18     	; 0x61a <decodeMessage+0x92>
 608:	cb 01       	movw	r24, r22
 60a:	40 96       	adiw	r24, 0x10	; 16
	{
		case 0b11000000: // ID FOR A SERVICE MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
			{
				if (message_struct->id == SensorList[i].CAN_ID)
 60c:	20 e0       	ldi	r18, 0x00	; 0
 60e:	30 e0       	ldi	r19, 0x00	; 0
	
	switch ((message_struct->pt_data[0] & 0b11110000))// only looks a first nibble
	{
		case 0b11000000: // ID FOR A SERVICE MESSAGE
		{
			for(int i = 0; i < NUMBER_OF_SENSORS;i++)
 610:	2f 5f       	subi	r18, 0xFF	; 255
 612:	3f 4f       	sbci	r19, 0xFF	; 255
 614:	24 17       	cp	r18, r20
 616:	35 07       	cpc	r19, r21
 618:	39 f7       	brne	.-50     	; 0x5e8 <decodeMessage+0x60>
			//SEND BACK ERROR?
			break;
		}
		
	}
}
 61a:	28 96       	adiw	r28, 0x08	; 8
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	f8 94       	cli
 620:	de bf       	out	0x3e, r29	; 62
 622:	0f be       	out	0x3f, r0	; 63
 624:	cd bf       	out	0x3d, r28	; 61
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	ff 90       	pop	r15
 630:	ef 90       	pop	r14
 632:	08 95       	ret

00000634 <_exit>:
 634:	f8 94       	cli

00000636 <__stop_program>:
 636:	ff cf       	rjmp	.-2      	; 0x636 <__stop_program>
