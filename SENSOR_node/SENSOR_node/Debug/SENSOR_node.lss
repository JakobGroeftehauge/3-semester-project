
SENSOR_node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e6e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ef4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001423  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e62  00000000  00000000  000023ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000db6  00000000  00000000  00003261  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00004018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000835  00000000  00000000  000041c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c59  00000000  00000000  000049fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00005656  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  7c:	27 01       	movw	r4, r14
  7e:	b9 01       	movw	r22, r18
  80:	33 02       	muls	r19, r19
  82:	97 02       	muls	r25, r23
  84:	d4 02       	muls	r29, r20
  86:	1b 03       	fmul	r17, r19
  88:	66 03       	mulsu	r22, r22
  8a:	f1 03       	fmuls	r23, r17
  8c:	86 04       	cpc	r8, r6
  8e:	22 01       	movw	r4, r4
  90:	7c 05       	cpc	r23, r12

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d8 e0       	ldi	r29, 0x08	; 8
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a0 30       	cpi	r26, 0x00	; 0
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <main>
  b2:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	ad ee       	ldi	r26, 0xED	; 237
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	98 2f       	mov	r25, r24
  c2:	92 95       	swap	r25
  c4:	90 7f       	andi	r25, 0xF0	; 240
  c6:	9c 93       	st	X, r25
  c8:	ee ee       	ldi	r30, 0xEE	; 238
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	11 92       	st	Z+, r1
  ce:	e8 3f       	cpi	r30, 0xF8	; 248
  d0:	f1 05       	cpc	r31, r1
  d2:	e1 f7       	brne	.-8      	; 0xcc <can_clear_all_mob+0x12>
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	86 30       	cpi	r24, 0x06	; 6
  d8:	99 f7       	brne	.-26     	; 0xc0 <can_clear_all_mob+0x6>
  da:	08 95       	ret

000000dc <can_get_mob_free>:
  dc:	ed ee       	ldi	r30, 0xED	; 237
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	20 81       	ld	r18, Z
  e2:	10 82       	st	Z, r1
  e4:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
  e8:	80 7c       	andi	r24, 0xC0	; 192
  ea:	69 f0       	breq	.+26     	; 0x106 <can_get_mob_free+0x2a>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	ad ee       	ldi	r26, 0xED	; 237
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	ef ee       	ldi	r30, 0xEF	; 239
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	98 2f       	mov	r25, r24
  f8:	92 95       	swap	r25
  fa:	90 7f       	andi	r25, 0xF0	; 240
  fc:	9c 93       	st	X, r25
  fe:	90 81       	ld	r25, Z
 100:	90 7c       	andi	r25, 0xC0	; 192
 102:	29 f4       	brne	.+10     	; 0x10e <can_get_mob_free+0x32>
 104:	01 c0       	rjmp	.+2      	; 0x108 <can_get_mob_free+0x2c>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 10c:	08 95       	ret
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	86 30       	cpi	r24, 0x06	; 6
 112:	89 f7       	brne	.-30     	; 0xf6 <can_get_mob_free+0x1a>
 114:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	08 95       	ret

0000011c <can_get_mob_status>:
 11c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 120:	80 7c       	andi	r24, 0xC0	; 192
 122:	61 f0       	breq	.+24     	; 0x13c <can_get_mob_status+0x20>
 124:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 128:	98 2f       	mov	r25, r24
 12a:	90 7e       	andi	r25, 0xE0	; 224
 12c:	90 32       	cpi	r25, 0x20	; 32
 12e:	41 f0       	breq	.+16     	; 0x140 <can_get_mob_status+0x24>
 130:	90 34       	cpi	r25, 0x40	; 64
 132:	41 f0       	breq	.+16     	; 0x144 <can_get_mob_status+0x28>
 134:	90 3a       	cpi	r25, 0xA0	; 160
 136:	41 f0       	breq	.+16     	; 0x148 <can_get_mob_status+0x2c>
 138:	8f 71       	andi	r24, 0x1F	; 31
 13a:	08 95       	ret
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	08 95       	ret
 140:	80 e2       	ldi	r24, 0x20	; 32
 142:	08 95       	ret
 144:	80 e4       	ldi	r24, 0x40	; 64
 146:	08 95       	ret
 148:	80 ea       	ldi	r24, 0xA0	; 160
 14a:	08 95       	ret

0000014c <can_get_data>:
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	bc 01       	movw	r22, r24
 152:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 156:	8f 70       	andi	r24, 0x0F	; 15
 158:	99 f0       	breq	.+38     	; 0x180 <can_get_data+0x34>
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	ca ef       	ldi	r28, 0xFA	; 250
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	af ee       	ldi	r26, 0xEF	; 239
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	28 81       	ld	r18, Y
 166:	fb 01       	movw	r30, r22
 168:	e9 0f       	add	r30, r25
 16a:	f1 1d       	adc	r31, r1
 16c:	20 83       	st	Z, r18
 16e:	9f 5f       	subi	r25, 0xFF	; 255
 170:	2c 91       	ld	r18, X
 172:	49 2f       	mov	r20, r25
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	2f 70       	andi	r18, 0x0F	; 15
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	42 17       	cp	r20, r18
 17c:	53 07       	cpc	r21, r19
 17e:	94 f3       	brlt	.-28     	; 0x164 <can_get_data+0x18>
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    Can_conf_bt();
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 198:	87 e3       	ldi	r24, 0x37	; 55
 19a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    return 1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	08 95       	ret

000001a2 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
 1a2:	0e 94 c3 00 	call	0x186	; 0x186 <can_fixed_baudrate>
 1a6:	88 23       	and	r24, r24
 1a8:	41 f0       	breq	.+16     	; 0x1ba <can_init+0x18>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
 1aa:	0e 94 5d 00 	call	0xba	; 0xba <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
 1ae:	e8 ed       	ldi	r30, 0xD8	; 216
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	80 83       	st	Z, r24
    return (1);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
}
 1ba:	08 95       	ret

000001bc <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <can_cmd+0xa>
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <can_cmd+0xc>
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	fc 01       	movw	r30, r24
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
 1ce:	81 81       	ldd	r24, Z+1	; 0x01
 1d0:	8c 30       	cpi	r24, 0x0C	; 12
 1d2:	99 f4       	brne	.+38     	; 0x1fa <can_cmd+0x3e>
  {
    if (cmd->status == MOB_PENDING)
 1d4:	81 85       	ldd	r24, Z+9	; 0x09
 1d6:	80 36       	cpi	r24, 0x60	; 96
 1d8:	69 f4       	brne	.+26     	; 0x1f4 <can_cmd+0x38>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
 1da:	80 81       	ld	r24, Z
 1dc:	82 95       	swap	r24
 1de:	80 7f       	andi	r24, 0xF0	; 240
 1e0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
      Can_mob_abort();
 1e4:	af ee       	ldi	r26, 0xEF	; 239
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	8c 91       	ld	r24, X
 1ea:	8f 73       	andi	r24, 0x3F	; 63
 1ec:	8c 93       	st	X, r24
      Can_clear_status_mob();       // To be sure !
 1ee:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
      cmd->handle = 0;
 1f2:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
 1f4:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	38 c5       	rjmp	.+2672   	; 0xc6a <__stack+0x36b>
 1fa:	8f 01       	movw	r16, r30
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
 1fc:	0e 94 6e 00 	call	0xdc	; 0xdc <can_get_mob_free>
    if (mob_handle!= NO_MOB)
 200:	8f 3f       	cpi	r24, 0xFF	; 255
 202:	09 f4       	brne	.+2      	; 0x206 <can_cmd+0x4a>
 204:	2d c5       	rjmp	.+2650   	; 0xc60 <__stack+0x361>
    {
      cmd->status = MOB_PENDING; 
 206:	90 e6       	ldi	r25, 0x60	; 96
 208:	d8 01       	movw	r26, r16
 20a:	19 96       	adiw	r26, 0x09	; 9
 20c:	9c 93       	st	X, r25
 20e:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
 210:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
 212:	82 95       	swap	r24
 214:	80 7f       	andi	r24, 0xF0	; 240
 216:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
      Can_clear_mob();
 21a:	ee ee       	ldi	r30, 0xEE	; 238
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	11 92       	st	Z+, r1
 220:	e8 3f       	cpi	r30, 0xF8	; 248
 222:	f1 05       	cpc	r31, r1
 224:	e1 f7       	brne	.-8      	; 0x21e <can_cmd+0x62>
          
      switch (cmd->cmd)
 226:	d8 01       	movw	r26, r16
 228:	11 96       	adiw	r26, 0x01	; 1
 22a:	ec 91       	ld	r30, X
 22c:	8e 2f       	mov	r24, r30
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	fc 01       	movw	r30, r24
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	eb 30       	cpi	r30, 0x0B	; 11
 236:	f1 05       	cpc	r31, r1
 238:	08 f0       	brcs	.+2      	; 0x23c <can_cmd+0x80>
 23a:	0e c5       	rjmp	.+2588   	; 0xc58 <__stack+0x359>
 23c:	e2 5c       	subi	r30, 0xC2	; 194
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 244:	f8 01       	movw	r30, r16
 246:	86 81       	ldd	r24, Z+6	; 0x06
 248:	81 11       	cpse	r24, r1
 24a:	f9 c3       	rjmp	.+2034   	; 0xa3e <__stack+0x13f>
 24c:	0a c4       	rjmp	.+2068   	; 0xa62 <__stack+0x163>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 24e:	d8 01       	movw	r26, r16
 250:	1b 96       	adiw	r26, 0x0b	; 11
 252:	8c 91       	ld	r24, X
 254:	1b 97       	sbiw	r26, 0x0b	; 11
 256:	88 23       	and	r24, r24
 258:	e9 f1       	breq	.+122    	; 0x2d4 <can_cmd+0x118>
 25a:	15 96       	adiw	r26, 0x05	; 5
 25c:	8c 91       	ld	r24, X
 25e:	15 97       	sbiw	r26, 0x05	; 5
 260:	98 2f       	mov	r25, r24
 262:	99 0f       	add	r25, r25
 264:	99 0f       	add	r25, r25
 266:	99 0f       	add	r25, r25
 268:	14 96       	adiw	r26, 0x04	; 4
 26a:	8c 91       	ld	r24, X
 26c:	14 97       	sbiw	r26, 0x04	; 4
 26e:	82 95       	swap	r24
 270:	86 95       	lsr	r24
 272:	87 70       	andi	r24, 0x07	; 7
 274:	89 0f       	add	r24, r25
 276:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 27a:	14 96       	adiw	r26, 0x04	; 4
 27c:	8c 91       	ld	r24, X
 27e:	14 97       	sbiw	r26, 0x04	; 4
 280:	98 2f       	mov	r25, r24
 282:	99 0f       	add	r25, r25
 284:	99 0f       	add	r25, r25
 286:	99 0f       	add	r25, r25
 288:	13 96       	adiw	r26, 0x03	; 3
 28a:	8c 91       	ld	r24, X
 28c:	13 97       	sbiw	r26, 0x03	; 3
 28e:	82 95       	swap	r24
 290:	86 95       	lsr	r24
 292:	87 70       	andi	r24, 0x07	; 7
 294:	89 0f       	add	r24, r25
 296:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 29a:	13 96       	adiw	r26, 0x03	; 3
 29c:	8c 91       	ld	r24, X
 29e:	13 97       	sbiw	r26, 0x03	; 3
 2a0:	98 2f       	mov	r25, r24
 2a2:	99 0f       	add	r25, r25
 2a4:	99 0f       	add	r25, r25
 2a6:	99 0f       	add	r25, r25
 2a8:	12 96       	adiw	r26, 0x02	; 2
 2aa:	8c 91       	ld	r24, X
 2ac:	12 97       	sbiw	r26, 0x02	; 2
 2ae:	82 95       	swap	r24
 2b0:	86 95       	lsr	r24
 2b2:	87 70       	andi	r24, 0x07	; 7
 2b4:	89 0f       	add	r24, r25
 2b6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 2ba:	12 96       	adiw	r26, 0x02	; 2
 2bc:	8c 91       	ld	r24, X
 2be:	88 0f       	add	r24, r24
 2c0:	88 0f       	add	r24, r24
 2c2:	88 0f       	add	r24, r24
 2c4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 2c8:	ef ee       	ldi	r30, 0xEF	; 239
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	80 61       	ori	r24, 0x10	; 16
 2d0:	80 83       	st	Z, r24
 2d2:	19 c0       	rjmp	.+50     	; 0x306 <can_cmd+0x14a>
          else              { Can_set_std_id(cmd->id.std);}
 2d4:	f8 01       	movw	r30, r16
 2d6:	93 81       	ldd	r25, Z+3	; 0x03
 2d8:	82 81       	ldd	r24, Z+2	; 0x02
 2da:	86 95       	lsr	r24
 2dc:	86 95       	lsr	r24
 2de:	86 95       	lsr	r24
 2e0:	f0 e2       	ldi	r31, 0x20	; 32
 2e2:	9f 9f       	mul	r25, r31
 2e4:	80 0d       	add	r24, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 2ec:	d8 01       	movw	r26, r16
 2ee:	12 96       	adiw	r26, 0x02	; 2
 2f0:	8c 91       	ld	r24, X
 2f2:	82 95       	swap	r24
 2f4:	88 0f       	add	r24, r24
 2f6:	80 7e       	andi	r24, 0xE0	; 224
 2f8:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 2fc:	ef ee       	ldi	r30, 0xEF	; 239
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	8f 7e       	andi	r24, 0xEF	; 239
 304:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 306:	f8 01       	movw	r30, r16
 308:	86 81       	ldd	r24, Z+6	; 0x06
 30a:	88 23       	and	r24, r24
 30c:	91 f0       	breq	.+36     	; 0x332 <can_cmd+0x176>
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	2a ef       	ldi	r18, 0xFA	; 250
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	d8 01       	movw	r26, r16
 316:	17 96       	adiw	r26, 0x07	; 7
 318:	ed 91       	ld	r30, X+
 31a:	fc 91       	ld	r31, X
 31c:	18 97       	sbiw	r26, 0x08	; 8
 31e:	e8 0f       	add	r30, r24
 320:	f1 1d       	adc	r31, r1
 322:	90 81       	ld	r25, Z
 324:	f9 01       	movw	r30, r18
 326:	90 83       	st	Z, r25
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	16 96       	adiw	r26, 0x06	; 6
 32c:	9c 91       	ld	r25, X
 32e:	89 17       	cp	r24, r25
 330:	88 f3       	brcs	.-30     	; 0x314 <can_cmd+0x158>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
 332:	d8 01       	movw	r26, r16
 334:	1a 96       	adiw	r26, 0x0a	; 10
 336:	8c 91       	ld	r24, X
 338:	88 23       	and	r24, r24
 33a:	31 f0       	breq	.+12     	; 0x348 <can_cmd+0x18c>
 33c:	e0 ef       	ldi	r30, 0xF0	; 240
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	84 60       	ori	r24, 0x04	; 4
 344:	80 83       	st	Z, r24
 346:	05 c0       	rjmp	.+10     	; 0x352 <can_cmd+0x196>
            else Can_clear_rtr();    
 348:	e0 ef       	ldi	r30, 0xF0	; 240
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	8b 7f       	andi	r24, 0xFB	; 251
 350:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 352:	ef ee       	ldi	r30, 0xEF	; 239
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	90 81       	ld	r25, Z
 358:	d8 01       	movw	r26, r16
 35a:	16 96       	adiw	r26, 0x06	; 6
 35c:	8c 91       	ld	r24, X
 35e:	89 2b       	or	r24, r25
 360:	80 83       	st	Z, r24
          Can_config_tx();
 362:	80 81       	ld	r24, Z
 364:	8f 73       	andi	r24, 0x3F	; 63
 366:	80 83       	st	Z, r24
 368:	80 81       	ld	r24, Z
 36a:	80 64       	ori	r24, 0x40	; 64
 36c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 36e:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 370:	7c c4       	rjmp	.+2296   	; 0xc6a <__stack+0x36b>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 372:	f8 01       	movw	r30, r16
 374:	83 85       	ldd	r24, Z+11	; 0x0b
 376:	88 23       	and	r24, r24
 378:	81 f1       	breq	.+96     	; 0x3da <can_cmd+0x21e>
 37a:	85 81       	ldd	r24, Z+5	; 0x05
 37c:	98 2f       	mov	r25, r24
 37e:	99 0f       	add	r25, r25
 380:	99 0f       	add	r25, r25
 382:	99 0f       	add	r25, r25
 384:	84 81       	ldd	r24, Z+4	; 0x04
 386:	82 95       	swap	r24
 388:	86 95       	lsr	r24
 38a:	87 70       	andi	r24, 0x07	; 7
 38c:	89 0f       	add	r24, r25
 38e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 392:	84 81       	ldd	r24, Z+4	; 0x04
 394:	98 2f       	mov	r25, r24
 396:	99 0f       	add	r25, r25
 398:	99 0f       	add	r25, r25
 39a:	99 0f       	add	r25, r25
 39c:	83 81       	ldd	r24, Z+3	; 0x03
 39e:	82 95       	swap	r24
 3a0:	86 95       	lsr	r24
 3a2:	87 70       	andi	r24, 0x07	; 7
 3a4:	89 0f       	add	r24, r25
 3a6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 3aa:	83 81       	ldd	r24, Z+3	; 0x03
 3ac:	98 2f       	mov	r25, r24
 3ae:	99 0f       	add	r25, r25
 3b0:	99 0f       	add	r25, r25
 3b2:	99 0f       	add	r25, r25
 3b4:	82 81       	ldd	r24, Z+2	; 0x02
 3b6:	82 95       	swap	r24
 3b8:	86 95       	lsr	r24
 3ba:	87 70       	andi	r24, 0x07	; 7
 3bc:	89 0f       	add	r24, r25
 3be:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 3c2:	82 81       	ldd	r24, Z+2	; 0x02
 3c4:	88 0f       	add	r24, r24
 3c6:	88 0f       	add	r24, r24
 3c8:	88 0f       	add	r24, r24
 3ca:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 3ce:	ef ee       	ldi	r30, 0xEF	; 239
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	80 61       	ori	r24, 0x10	; 16
 3d6:	80 83       	st	Z, r24
 3d8:	17 c0       	rjmp	.+46     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
          else              { Can_set_std_id(cmd->id.std);}
 3da:	93 81       	ldd	r25, Z+3	; 0x03
 3dc:	82 81       	ldd	r24, Z+2	; 0x02
 3de:	86 95       	lsr	r24
 3e0:	86 95       	lsr	r24
 3e2:	86 95       	lsr	r24
 3e4:	b0 e2       	ldi	r27, 0x20	; 32
 3e6:	9b 9f       	mul	r25, r27
 3e8:	80 0d       	add	r24, r0
 3ea:	11 24       	eor	r1, r1
 3ec:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 3f0:	f8 01       	movw	r30, r16
 3f2:	82 81       	ldd	r24, Z+2	; 0x02
 3f4:	82 95       	swap	r24
 3f6:	88 0f       	add	r24, r24
 3f8:	80 7e       	andi	r24, 0xE0	; 224
 3fa:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 3fe:	ef ee       	ldi	r30, 0xEF	; 239
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	8f 7e       	andi	r24, 0xEF	; 239
 406:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 408:	d8 01       	movw	r26, r16
 40a:	16 96       	adiw	r26, 0x06	; 6
 40c:	8c 91       	ld	r24, X
 40e:	88 23       	and	r24, r24
 410:	91 f0       	breq	.+36     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	2a ef       	ldi	r18, 0xFA	; 250
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	d8 01       	movw	r26, r16
 41a:	17 96       	adiw	r26, 0x07	; 7
 41c:	ed 91       	ld	r30, X+
 41e:	fc 91       	ld	r31, X
 420:	18 97       	sbiw	r26, 0x08	; 8
 422:	e8 0f       	add	r30, r24
 424:	f1 1d       	adc	r31, r1
 426:	90 81       	ld	r25, Z
 428:	f9 01       	movw	r30, r18
 42a:	90 83       	st	Z, r25
 42c:	8f 5f       	subi	r24, 0xFF	; 255
 42e:	16 96       	adiw	r26, 0x06	; 6
 430:	9c 91       	ld	r25, X
 432:	89 17       	cp	r24, r25
 434:	88 f3       	brcs	.-30     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
          cmd->ctrl.rtr=0; Can_clear_rtr();
 436:	d8 01       	movw	r26, r16
 438:	1a 96       	adiw	r26, 0x0a	; 10
 43a:	1c 92       	st	X, r1
 43c:	1a 97       	sbiw	r26, 0x0a	; 10
 43e:	e0 ef       	ldi	r30, 0xF0	; 240
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	8b 7f       	andi	r24, 0xFB	; 251
 446:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 448:	ef ee       	ldi	r30, 0xEF	; 239
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	90 81       	ld	r25, Z
 44e:	16 96       	adiw	r26, 0x06	; 6
 450:	8c 91       	ld	r24, X
 452:	89 2b       	or	r24, r25
 454:	80 83       	st	Z, r24
          Can_config_tx();
 456:	80 81       	ld	r24, Z
 458:	8f 73       	andi	r24, 0x3F	; 63
 45a:	80 83       	st	Z, r24
 45c:	80 81       	ld	r24, Z
 45e:	80 64       	ori	r24, 0x40	; 64
 460:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 462:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 464:	02 c4       	rjmp	.+2052   	; 0xc6a <__stack+0x36b>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 466:	f8 01       	movw	r30, r16
 468:	83 85       	ldd	r24, Z+11	; 0x0b
 46a:	88 23       	and	r24, r24
 46c:	81 f1       	breq	.+96     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 46e:	85 81       	ldd	r24, Z+5	; 0x05
 470:	98 2f       	mov	r25, r24
 472:	99 0f       	add	r25, r25
 474:	99 0f       	add	r25, r25
 476:	99 0f       	add	r25, r25
 478:	84 81       	ldd	r24, Z+4	; 0x04
 47a:	82 95       	swap	r24
 47c:	86 95       	lsr	r24
 47e:	87 70       	andi	r24, 0x07	; 7
 480:	89 0f       	add	r24, r25
 482:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 486:	84 81       	ldd	r24, Z+4	; 0x04
 488:	98 2f       	mov	r25, r24
 48a:	99 0f       	add	r25, r25
 48c:	99 0f       	add	r25, r25
 48e:	99 0f       	add	r25, r25
 490:	83 81       	ldd	r24, Z+3	; 0x03
 492:	82 95       	swap	r24
 494:	86 95       	lsr	r24
 496:	87 70       	andi	r24, 0x07	; 7
 498:	89 0f       	add	r24, r25
 49a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 49e:	83 81       	ldd	r24, Z+3	; 0x03
 4a0:	98 2f       	mov	r25, r24
 4a2:	99 0f       	add	r25, r25
 4a4:	99 0f       	add	r25, r25
 4a6:	99 0f       	add	r25, r25
 4a8:	82 81       	ldd	r24, Z+2	; 0x02
 4aa:	82 95       	swap	r24
 4ac:	86 95       	lsr	r24
 4ae:	87 70       	andi	r24, 0x07	; 7
 4b0:	89 0f       	add	r24, r25
 4b2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 4b6:	82 81       	ldd	r24, Z+2	; 0x02
 4b8:	88 0f       	add	r24, r24
 4ba:	88 0f       	add	r24, r24
 4bc:	88 0f       	add	r24, r24
 4be:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 4c2:	ef ee       	ldi	r30, 0xEF	; 239
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	80 61       	ori	r24, 0x10	; 16
 4ca:	80 83       	st	Z, r24
 4cc:	17 c0       	rjmp	.+46     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
          else              { Can_set_std_id(cmd->id.std);}
 4ce:	93 81       	ldd	r25, Z+3	; 0x03
 4d0:	82 81       	ldd	r24, Z+2	; 0x02
 4d2:	86 95       	lsr	r24
 4d4:	86 95       	lsr	r24
 4d6:	86 95       	lsr	r24
 4d8:	b0 e2       	ldi	r27, 0x20	; 32
 4da:	9b 9f       	mul	r25, r27
 4dc:	80 0d       	add	r24, r0
 4de:	11 24       	eor	r1, r1
 4e0:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 4e4:	f8 01       	movw	r30, r16
 4e6:	82 81       	ldd	r24, Z+2	; 0x02
 4e8:	82 95       	swap	r24
 4ea:	88 0f       	add	r24, r24
 4ec:	80 7e       	andi	r24, 0xE0	; 224
 4ee:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 4f2:	ef ee       	ldi	r30, 0xEF	; 239
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	8f 7e       	andi	r24, 0xEF	; 239
 4fa:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	d8 01       	movw	r26, r16
 500:	1a 96       	adiw	r26, 0x0a	; 10
 502:	8c 93       	st	X, r24
 504:	1a 97       	sbiw	r26, 0x0a	; 10
 506:	e0 ef       	ldi	r30, 0xF0	; 240
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	84 60       	ori	r24, 0x04	; 4
 50e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 510:	ef ee       	ldi	r30, 0xEF	; 239
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	90 81       	ld	r25, Z
 516:	16 96       	adiw	r26, 0x06	; 6
 518:	8c 91       	ld	r24, X
 51a:	89 2b       	or	r24, r25
 51c:	80 83       	st	Z, r24
          Can_config_tx();
 51e:	80 81       	ld	r24, Z
 520:	8f 73       	andi	r24, 0x3F	; 63
 522:	80 83       	st	Z, r24
 524:	80 81       	ld	r24, Z
 526:	80 64       	ori	r24, 0x40	; 64
 528:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 52a:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 52c:	9e c3       	rjmp	.+1852   	; 0xc6a <__stack+0x36b>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 52e:	19 82       	std	Y+1, r1	; 0x01
 530:	1a 82       	std	Y+2, r1	; 0x02
 532:	1b 82       	std	Y+3, r1	; 0x03
 534:	1c 82       	std	Y+4, r1	; 0x04
 536:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 53a:	8b 81       	ldd	r24, Y+3	; 0x03
 53c:	98 2f       	mov	r25, r24
 53e:	99 0f       	add	r25, r25
 540:	99 0f       	add	r25, r25
 542:	99 0f       	add	r25, r25
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	82 95       	swap	r24
 548:	86 95       	lsr	r24
 54a:	87 70       	andi	r24, 0x07	; 7
 54c:	89 0f       	add	r24, r25
 54e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 552:	8a 81       	ldd	r24, Y+2	; 0x02
 554:	98 2f       	mov	r25, r24
 556:	99 0f       	add	r25, r25
 558:	99 0f       	add	r25, r25
 55a:	99 0f       	add	r25, r25
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	82 95       	swap	r24
 560:	86 95       	lsr	r24
 562:	87 70       	andi	r24, 0x07	; 7
 564:	89 0f       	add	r24, r25
 566:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	88 0f       	add	r24, r24
 56e:	88 0f       	add	r24, r24
 570:	88 0f       	add	r24, r24
 572:	24 ef       	ldi	r18, 0xF4	; 244
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	f9 01       	movw	r30, r18
 578:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 57a:	ef ee       	ldi	r30, 0xEF	; 239
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	90 81       	ld	r25, Z
 580:	d8 01       	movw	r26, r16
 582:	16 96       	adiw	r26, 0x06	; 6
 584:	8c 91       	ld	r24, X
 586:	89 2b       	or	r24, r25
 588:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 58a:	d9 01       	movw	r26, r18
 58c:	8c 91       	ld	r24, X
 58e:	8b 7f       	andi	r24, 0xFB	; 251
 590:	8c 93       	st	X, r24
          Can_clear_idemsk();
 592:	8c 91       	ld	r24, X
 594:	8e 7f       	andi	r24, 0xFE	; 254
 596:	8c 93       	st	X, r24
          Can_config_rx();       
 598:	80 81       	ld	r24, Z
 59a:	8f 73       	andi	r24, 0x3F	; 63
 59c:	80 83       	st	Z, r24
 59e:	80 81       	ld	r24, Z
 5a0:	80 68       	ori	r24, 0x80	; 128
 5a2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 5a4:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 5a6:	61 c3       	rjmp	.+1730   	; 0xc6a <__stack+0x36b>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 5a8:	19 82       	std	Y+1, r1	; 0x01
 5aa:	1a 82       	std	Y+2, r1	; 0x02
 5ac:	1b 82       	std	Y+3, r1	; 0x03
 5ae:	1c 82       	std	Y+4, r1	; 0x04
 5b0:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 5b4:	8b 81       	ldd	r24, Y+3	; 0x03
 5b6:	98 2f       	mov	r25, r24
 5b8:	99 0f       	add	r25, r25
 5ba:	99 0f       	add	r25, r25
 5bc:	99 0f       	add	r25, r25
 5be:	8a 81       	ldd	r24, Y+2	; 0x02
 5c0:	82 95       	swap	r24
 5c2:	86 95       	lsr	r24
 5c4:	87 70       	andi	r24, 0x07	; 7
 5c6:	89 0f       	add	r24, r25
 5c8:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	98 2f       	mov	r25, r24
 5d0:	99 0f       	add	r25, r25
 5d2:	99 0f       	add	r25, r25
 5d4:	99 0f       	add	r25, r25
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	82 95       	swap	r24
 5da:	86 95       	lsr	r24
 5dc:	87 70       	andi	r24, 0x07	; 7
 5de:	89 0f       	add	r24, r25
 5e0:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 5e4:	89 81       	ldd	r24, Y+1	; 0x01
 5e6:	88 0f       	add	r24, r24
 5e8:	88 0f       	add	r24, r24
 5ea:	88 0f       	add	r24, r24
 5ec:	44 ef       	ldi	r20, 0xF4	; 244
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	fa 01       	movw	r30, r20
 5f2:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 5f4:	ef ee       	ldi	r30, 0xEF	; 239
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	90 81       	ld	r25, Z
 5fa:	d8 01       	movw	r26, r16
 5fc:	16 96       	adiw	r26, 0x06	; 6
 5fe:	8c 91       	ld	r24, X
 600:	16 97       	sbiw	r26, 0x06	; 6
 602:	89 2b       	or	r24, r25
 604:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 606:	1a 96       	adiw	r26, 0x0a	; 10
 608:	1c 92       	st	X, r1
 60a:	da 01       	movw	r26, r20
 60c:	8c 91       	ld	r24, X
 60e:	84 60       	ori	r24, 0x04	; 4
 610:	8c 93       	st	X, r24
 612:	20 ef       	ldi	r18, 0xF0	; 240
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	d9 01       	movw	r26, r18
 618:	8c 91       	ld	r24, X
 61a:	8b 7f       	andi	r24, 0xFB	; 251
 61c:	8c 93       	st	X, r24
          Can_clear_idemsk();
 61e:	da 01       	movw	r26, r20
 620:	8c 91       	ld	r24, X
 622:	8e 7f       	andi	r24, 0xFE	; 254
 624:	8c 93       	st	X, r24
          Can_config_rx();       
 626:	80 81       	ld	r24, Z
 628:	8f 73       	andi	r24, 0x3F	; 63
 62a:	80 83       	st	Z, r24
 62c:	80 81       	ld	r24, Z
 62e:	80 68       	ori	r24, 0x80	; 128
 630:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 632:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 634:	1a c3       	rjmp	.+1588   	; 0xc6a <__stack+0x36b>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 636:	19 82       	std	Y+1, r1	; 0x01
 638:	1a 82       	std	Y+2, r1	; 0x02
 63a:	1b 82       	std	Y+3, r1	; 0x03
 63c:	1c 82       	std	Y+4, r1	; 0x04
 63e:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	98 2f       	mov	r25, r24
 646:	99 0f       	add	r25, r25
 648:	99 0f       	add	r25, r25
 64a:	99 0f       	add	r25, r25
 64c:	8a 81       	ldd	r24, Y+2	; 0x02
 64e:	82 95       	swap	r24
 650:	86 95       	lsr	r24
 652:	87 70       	andi	r24, 0x07	; 7
 654:	89 0f       	add	r24, r25
 656:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 65a:	8a 81       	ldd	r24, Y+2	; 0x02
 65c:	98 2f       	mov	r25, r24
 65e:	99 0f       	add	r25, r25
 660:	99 0f       	add	r25, r25
 662:	99 0f       	add	r25, r25
 664:	89 81       	ldd	r24, Y+1	; 0x01
 666:	82 95       	swap	r24
 668:	86 95       	lsr	r24
 66a:	87 70       	andi	r24, 0x07	; 7
 66c:	89 0f       	add	r24, r25
 66e:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 672:	89 81       	ldd	r24, Y+1	; 0x01
 674:	88 0f       	add	r24, r24
 676:	88 0f       	add	r24, r24
 678:	88 0f       	add	r24, r24
 67a:	44 ef       	ldi	r20, 0xF4	; 244
 67c:	50 e0       	ldi	r21, 0x00	; 0
 67e:	fa 01       	movw	r30, r20
 680:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 682:	ef ee       	ldi	r30, 0xEF	; 239
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	90 81       	ld	r25, Z
 688:	d8 01       	movw	r26, r16
 68a:	16 96       	adiw	r26, 0x06	; 6
 68c:	8c 91       	ld	r24, X
 68e:	16 97       	sbiw	r26, 0x06	; 6
 690:	89 2b       	or	r24, r25
 692:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	1a 96       	adiw	r26, 0x0a	; 10
 698:	8c 93       	st	X, r24
 69a:	da 01       	movw	r26, r20
 69c:	8c 91       	ld	r24, X
 69e:	84 60       	ori	r24, 0x04	; 4
 6a0:	8c 93       	st	X, r24
 6a2:	20 ef       	ldi	r18, 0xF0	; 240
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	d9 01       	movw	r26, r18
 6a8:	8c 91       	ld	r24, X
 6aa:	84 60       	ori	r24, 0x04	; 4
 6ac:	8c 93       	st	X, r24
          Can_clear_rplv();
 6ae:	80 81       	ld	r24, Z
 6b0:	8f 7d       	andi	r24, 0xDF	; 223
 6b2:	80 83       	st	Z, r24
          Can_clear_idemsk();
 6b4:	da 01       	movw	r26, r20
 6b6:	8c 91       	ld	r24, X
 6b8:	8e 7f       	andi	r24, 0xFE	; 254
 6ba:	8c 93       	st	X, r24
          Can_config_rx();       
 6bc:	80 81       	ld	r24, Z
 6be:	8f 73       	andi	r24, 0x3F	; 63
 6c0:	80 83       	st	Z, r24
 6c2:	80 81       	ld	r24, Z
 6c4:	80 68       	ori	r24, 0x80	; 128
 6c6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 6c8:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 6ca:	cf c2       	rjmp	.+1438   	; 0xc6a <__stack+0x36b>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 6cc:	f8 01       	movw	r30, r16
 6ce:	83 85       	ldd	r24, Z+11	; 0x0b
 6d0:	88 23       	and	r24, r24
 6d2:	81 f1       	breq	.+96     	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
 6d4:	85 81       	ldd	r24, Z+5	; 0x05
 6d6:	98 2f       	mov	r25, r24
 6d8:	99 0f       	add	r25, r25
 6da:	99 0f       	add	r25, r25
 6dc:	99 0f       	add	r25, r25
 6de:	84 81       	ldd	r24, Z+4	; 0x04
 6e0:	82 95       	swap	r24
 6e2:	86 95       	lsr	r24
 6e4:	87 70       	andi	r24, 0x07	; 7
 6e6:	89 0f       	add	r24, r25
 6e8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 6ec:	84 81       	ldd	r24, Z+4	; 0x04
 6ee:	98 2f       	mov	r25, r24
 6f0:	99 0f       	add	r25, r25
 6f2:	99 0f       	add	r25, r25
 6f4:	99 0f       	add	r25, r25
 6f6:	83 81       	ldd	r24, Z+3	; 0x03
 6f8:	82 95       	swap	r24
 6fa:	86 95       	lsr	r24
 6fc:	87 70       	andi	r24, 0x07	; 7
 6fe:	89 0f       	add	r24, r25
 700:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 704:	83 81       	ldd	r24, Z+3	; 0x03
 706:	98 2f       	mov	r25, r24
 708:	99 0f       	add	r25, r25
 70a:	99 0f       	add	r25, r25
 70c:	99 0f       	add	r25, r25
 70e:	82 81       	ldd	r24, Z+2	; 0x02
 710:	82 95       	swap	r24
 712:	86 95       	lsr	r24
 714:	87 70       	andi	r24, 0x07	; 7
 716:	89 0f       	add	r24, r25
 718:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 71c:	82 81       	ldd	r24, Z+2	; 0x02
 71e:	88 0f       	add	r24, r24
 720:	88 0f       	add	r24, r24
 722:	88 0f       	add	r24, r24
 724:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 728:	ef ee       	ldi	r30, 0xEF	; 239
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	80 61       	ori	r24, 0x10	; 16
 730:	80 83       	st	Z, r24
 732:	17 c0       	rjmp	.+46     	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
          else              { Can_set_std_id(cmd->id.std);}
 734:	93 81       	ldd	r25, Z+3	; 0x03
 736:	82 81       	ldd	r24, Z+2	; 0x02
 738:	86 95       	lsr	r24
 73a:	86 95       	lsr	r24
 73c:	86 95       	lsr	r24
 73e:	b0 e2       	ldi	r27, 0x20	; 32
 740:	9b 9f       	mul	r25, r27
 742:	80 0d       	add	r24, r0
 744:	11 24       	eor	r1, r1
 746:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 74a:	f8 01       	movw	r30, r16
 74c:	82 81       	ldd	r24, Z+2	; 0x02
 74e:	82 95       	swap	r24
 750:	88 0f       	add	r24, r24
 752:	80 7e       	andi	r24, 0xE0	; 224
 754:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 758:	ef ee       	ldi	r30, 0xEF	; 239
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	8f 7e       	andi	r24, 0xEF	; 239
 760:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	9f ef       	ldi	r25, 0xFF	; 255
 766:	dc 01       	movw	r26, r24
 768:	89 83       	std	Y+1, r24	; 0x01
 76a:	9a 83       	std	Y+2, r25	; 0x02
 76c:	ab 83       	std	Y+3, r26	; 0x03
 76e:	bc 83       	std	Y+4, r27	; 0x04
 770:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 774:	8b 81       	ldd	r24, Y+3	; 0x03
 776:	98 2f       	mov	r25, r24
 778:	99 0f       	add	r25, r25
 77a:	99 0f       	add	r25, r25
 77c:	99 0f       	add	r25, r25
 77e:	8a 81       	ldd	r24, Y+2	; 0x02
 780:	82 95       	swap	r24
 782:	86 95       	lsr	r24
 784:	87 70       	andi	r24, 0x07	; 7
 786:	89 0f       	add	r24, r25
 788:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 78c:	8a 81       	ldd	r24, Y+2	; 0x02
 78e:	98 2f       	mov	r25, r24
 790:	99 0f       	add	r25, r25
 792:	99 0f       	add	r25, r25
 794:	99 0f       	add	r25, r25
 796:	89 81       	ldd	r24, Y+1	; 0x01
 798:	82 95       	swap	r24
 79a:	86 95       	lsr	r24
 79c:	87 70       	andi	r24, 0x07	; 7
 79e:	89 0f       	add	r24, r25
 7a0:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 7a4:	89 81       	ldd	r24, Y+1	; 0x01
 7a6:	88 0f       	add	r24, r24
 7a8:	88 0f       	add	r24, r24
 7aa:	88 0f       	add	r24, r24
 7ac:	24 ef       	ldi	r18, 0xF4	; 244
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	d9 01       	movw	r26, r18
 7b2:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 7b4:	ef ee       	ldi	r30, 0xEF	; 239
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	90 81       	ld	r25, Z
 7ba:	d8 01       	movw	r26, r16
 7bc:	16 96       	adiw	r26, 0x06	; 6
 7be:	8c 91       	ld	r24, X
 7c0:	89 2b       	or	r24, r25
 7c2:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 7c4:	d9 01       	movw	r26, r18
 7c6:	8c 91       	ld	r24, X
 7c8:	8b 7f       	andi	r24, 0xFB	; 251
 7ca:	8c 93       	st	X, r24
          Can_set_idemsk();
 7cc:	8c 91       	ld	r24, X
 7ce:	81 60       	ori	r24, 0x01	; 1
 7d0:	8c 93       	st	X, r24
          Can_config_rx();       
 7d2:	80 81       	ld	r24, Z
 7d4:	8f 73       	andi	r24, 0x3F	; 63
 7d6:	80 83       	st	Z, r24
 7d8:	80 81       	ld	r24, Z
 7da:	80 68       	ori	r24, 0x80	; 128
 7dc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 7de:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 7e0:	44 c2       	rjmp	.+1160   	; 0xc6a <__stack+0x36b>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 7e2:	f8 01       	movw	r30, r16
 7e4:	83 85       	ldd	r24, Z+11	; 0x0b
 7e6:	88 23       	and	r24, r24
 7e8:	81 f1       	breq	.+96     	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 7ea:	85 81       	ldd	r24, Z+5	; 0x05
 7ec:	98 2f       	mov	r25, r24
 7ee:	99 0f       	add	r25, r25
 7f0:	99 0f       	add	r25, r25
 7f2:	99 0f       	add	r25, r25
 7f4:	84 81       	ldd	r24, Z+4	; 0x04
 7f6:	82 95       	swap	r24
 7f8:	86 95       	lsr	r24
 7fa:	87 70       	andi	r24, 0x07	; 7
 7fc:	89 0f       	add	r24, r25
 7fe:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 802:	84 81       	ldd	r24, Z+4	; 0x04
 804:	98 2f       	mov	r25, r24
 806:	99 0f       	add	r25, r25
 808:	99 0f       	add	r25, r25
 80a:	99 0f       	add	r25, r25
 80c:	83 81       	ldd	r24, Z+3	; 0x03
 80e:	82 95       	swap	r24
 810:	86 95       	lsr	r24
 812:	87 70       	andi	r24, 0x07	; 7
 814:	89 0f       	add	r24, r25
 816:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 81a:	83 81       	ldd	r24, Z+3	; 0x03
 81c:	98 2f       	mov	r25, r24
 81e:	99 0f       	add	r25, r25
 820:	99 0f       	add	r25, r25
 822:	99 0f       	add	r25, r25
 824:	82 81       	ldd	r24, Z+2	; 0x02
 826:	82 95       	swap	r24
 828:	86 95       	lsr	r24
 82a:	87 70       	andi	r24, 0x07	; 7
 82c:	89 0f       	add	r24, r25
 82e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 832:	82 81       	ldd	r24, Z+2	; 0x02
 834:	88 0f       	add	r24, r24
 836:	88 0f       	add	r24, r24
 838:	88 0f       	add	r24, r24
 83a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 83e:	ef ee       	ldi	r30, 0xEF	; 239
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	80 61       	ori	r24, 0x10	; 16
 846:	80 83       	st	Z, r24
 848:	17 c0       	rjmp	.+46     	; 0x878 <__LOCK_REGION_LENGTH__+0x478>
          else              { Can_set_std_id(cmd->id.std);}
 84a:	93 81       	ldd	r25, Z+3	; 0x03
 84c:	82 81       	ldd	r24, Z+2	; 0x02
 84e:	86 95       	lsr	r24
 850:	86 95       	lsr	r24
 852:	86 95       	lsr	r24
 854:	b0 e2       	ldi	r27, 0x20	; 32
 856:	9b 9f       	mul	r25, r27
 858:	80 0d       	add	r24, r0
 85a:	11 24       	eor	r1, r1
 85c:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 860:	f8 01       	movw	r30, r16
 862:	82 81       	ldd	r24, Z+2	; 0x02
 864:	82 95       	swap	r24
 866:	88 0f       	add	r24, r24
 868:	80 7e       	andi	r24, 0xE0	; 224
 86a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 86e:	ef ee       	ldi	r30, 0xEF	; 239
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	8f 7e       	andi	r24, 0xEF	; 239
 876:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 878:	8f ef       	ldi	r24, 0xFF	; 255
 87a:	9f ef       	ldi	r25, 0xFF	; 255
 87c:	dc 01       	movw	r26, r24
 87e:	89 83       	std	Y+1, r24	; 0x01
 880:	9a 83       	std	Y+2, r25	; 0x02
 882:	ab 83       	std	Y+3, r26	; 0x03
 884:	bc 83       	std	Y+4, r27	; 0x04
 886:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 88a:	8b 81       	ldd	r24, Y+3	; 0x03
 88c:	98 2f       	mov	r25, r24
 88e:	99 0f       	add	r25, r25
 890:	99 0f       	add	r25, r25
 892:	99 0f       	add	r25, r25
 894:	8a 81       	ldd	r24, Y+2	; 0x02
 896:	82 95       	swap	r24
 898:	86 95       	lsr	r24
 89a:	87 70       	andi	r24, 0x07	; 7
 89c:	89 0f       	add	r24, r25
 89e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 8a2:	8a 81       	ldd	r24, Y+2	; 0x02
 8a4:	98 2f       	mov	r25, r24
 8a6:	99 0f       	add	r25, r25
 8a8:	99 0f       	add	r25, r25
 8aa:	99 0f       	add	r25, r25
 8ac:	89 81       	ldd	r24, Y+1	; 0x01
 8ae:	82 95       	swap	r24
 8b0:	86 95       	lsr	r24
 8b2:	87 70       	andi	r24, 0x07	; 7
 8b4:	89 0f       	add	r24, r25
 8b6:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 8ba:	89 81       	ldd	r24, Y+1	; 0x01
 8bc:	88 0f       	add	r24, r24
 8be:	88 0f       	add	r24, r24
 8c0:	88 0f       	add	r24, r24
 8c2:	44 ef       	ldi	r20, 0xF4	; 244
 8c4:	50 e0       	ldi	r21, 0x00	; 0
 8c6:	da 01       	movw	r26, r20
 8c8:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 8ca:	ef ee       	ldi	r30, 0xEF	; 239
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	90 81       	ld	r25, Z
 8d0:	d8 01       	movw	r26, r16
 8d2:	16 96       	adiw	r26, 0x06	; 6
 8d4:	8c 91       	ld	r24, X
 8d6:	16 97       	sbiw	r26, 0x06	; 6
 8d8:	89 2b       	or	r24, r25
 8da:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 8dc:	1a 96       	adiw	r26, 0x0a	; 10
 8de:	1c 92       	st	X, r1
 8e0:	da 01       	movw	r26, r20
 8e2:	8c 91       	ld	r24, X
 8e4:	84 60       	ori	r24, 0x04	; 4
 8e6:	8c 93       	st	X, r24
 8e8:	20 ef       	ldi	r18, 0xF0	; 240
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	d9 01       	movw	r26, r18
 8ee:	8c 91       	ld	r24, X
 8f0:	8b 7f       	andi	r24, 0xFB	; 251
 8f2:	8c 93       	st	X, r24
          Can_set_idemsk();
 8f4:	da 01       	movw	r26, r20
 8f6:	8c 91       	ld	r24, X
 8f8:	81 60       	ori	r24, 0x01	; 1
 8fa:	8c 93       	st	X, r24
          Can_config_rx();       
 8fc:	80 81       	ld	r24, Z
 8fe:	8f 73       	andi	r24, 0x3F	; 63
 900:	80 83       	st	Z, r24
 902:	80 81       	ld	r24, Z
 904:	80 68       	ori	r24, 0x80	; 128
 906:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 908:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 90a:	af c1       	rjmp	.+862    	; 0xc6a <__stack+0x36b>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 90c:	f8 01       	movw	r30, r16
 90e:	83 85       	ldd	r24, Z+11	; 0x0b
 910:	88 23       	and	r24, r24
 912:	81 f1       	breq	.+96     	; 0x974 <__stack+0x75>
 914:	85 81       	ldd	r24, Z+5	; 0x05
 916:	98 2f       	mov	r25, r24
 918:	99 0f       	add	r25, r25
 91a:	99 0f       	add	r25, r25
 91c:	99 0f       	add	r25, r25
 91e:	84 81       	ldd	r24, Z+4	; 0x04
 920:	82 95       	swap	r24
 922:	86 95       	lsr	r24
 924:	87 70       	andi	r24, 0x07	; 7
 926:	89 0f       	add	r24, r25
 928:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 92c:	84 81       	ldd	r24, Z+4	; 0x04
 92e:	98 2f       	mov	r25, r24
 930:	99 0f       	add	r25, r25
 932:	99 0f       	add	r25, r25
 934:	99 0f       	add	r25, r25
 936:	83 81       	ldd	r24, Z+3	; 0x03
 938:	82 95       	swap	r24
 93a:	86 95       	lsr	r24
 93c:	87 70       	andi	r24, 0x07	; 7
 93e:	89 0f       	add	r24, r25
 940:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 944:	83 81       	ldd	r24, Z+3	; 0x03
 946:	98 2f       	mov	r25, r24
 948:	99 0f       	add	r25, r25
 94a:	99 0f       	add	r25, r25
 94c:	99 0f       	add	r25, r25
 94e:	82 81       	ldd	r24, Z+2	; 0x02
 950:	82 95       	swap	r24
 952:	86 95       	lsr	r24
 954:	87 70       	andi	r24, 0x07	; 7
 956:	89 0f       	add	r24, r25
 958:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 95c:	82 81       	ldd	r24, Z+2	; 0x02
 95e:	88 0f       	add	r24, r24
 960:	88 0f       	add	r24, r24
 962:	88 0f       	add	r24, r24
 964:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 968:	ef ee       	ldi	r30, 0xEF	; 239
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	80 61       	ori	r24, 0x10	; 16
 970:	80 83       	st	Z, r24
 972:	17 c0       	rjmp	.+46     	; 0x9a2 <__stack+0xa3>
          else              { Can_set_std_id(cmd->id.std);}
 974:	93 81       	ldd	r25, Z+3	; 0x03
 976:	82 81       	ldd	r24, Z+2	; 0x02
 978:	86 95       	lsr	r24
 97a:	86 95       	lsr	r24
 97c:	86 95       	lsr	r24
 97e:	b0 e2       	ldi	r27, 0x20	; 32
 980:	9b 9f       	mul	r25, r27
 982:	80 0d       	add	r24, r0
 984:	11 24       	eor	r1, r1
 986:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 98a:	f8 01       	movw	r30, r16
 98c:	82 81       	ldd	r24, Z+2	; 0x02
 98e:	82 95       	swap	r24
 990:	88 0f       	add	r24, r24
 992:	80 7e       	andi	r24, 0xE0	; 224
 994:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 998:	ef ee       	ldi	r30, 0xEF	; 239
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	8f 7e       	andi	r24, 0xEF	; 239
 9a0:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 9a2:	8f ef       	ldi	r24, 0xFF	; 255
 9a4:	9f ef       	ldi	r25, 0xFF	; 255
 9a6:	dc 01       	movw	r26, r24
 9a8:	89 83       	std	Y+1, r24	; 0x01
 9aa:	9a 83       	std	Y+2, r25	; 0x02
 9ac:	ab 83       	std	Y+3, r26	; 0x03
 9ae:	bc 83       	std	Y+4, r27	; 0x04
 9b0:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 9b4:	8b 81       	ldd	r24, Y+3	; 0x03
 9b6:	98 2f       	mov	r25, r24
 9b8:	99 0f       	add	r25, r25
 9ba:	99 0f       	add	r25, r25
 9bc:	99 0f       	add	r25, r25
 9be:	8a 81       	ldd	r24, Y+2	; 0x02
 9c0:	82 95       	swap	r24
 9c2:	86 95       	lsr	r24
 9c4:	87 70       	andi	r24, 0x07	; 7
 9c6:	89 0f       	add	r24, r25
 9c8:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 9cc:	8a 81       	ldd	r24, Y+2	; 0x02
 9ce:	98 2f       	mov	r25, r24
 9d0:	99 0f       	add	r25, r25
 9d2:	99 0f       	add	r25, r25
 9d4:	99 0f       	add	r25, r25
 9d6:	89 81       	ldd	r24, Y+1	; 0x01
 9d8:	82 95       	swap	r24
 9da:	86 95       	lsr	r24
 9dc:	87 70       	andi	r24, 0x07	; 7
 9de:	89 0f       	add	r24, r25
 9e0:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
 9e6:	88 0f       	add	r24, r24
 9e8:	88 0f       	add	r24, r24
 9ea:	88 0f       	add	r24, r24
 9ec:	44 ef       	ldi	r20, 0xF4	; 244
 9ee:	50 e0       	ldi	r21, 0x00	; 0
 9f0:	da 01       	movw	r26, r20
 9f2:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 9f4:	ef ee       	ldi	r30, 0xEF	; 239
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	90 81       	ld	r25, Z
 9fa:	d8 01       	movw	r26, r16
 9fc:	16 96       	adiw	r26, 0x06	; 6
 9fe:	8c 91       	ld	r24, X
 a00:	16 97       	sbiw	r26, 0x06	; 6
 a02:	89 2b       	or	r24, r25
 a04:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 a06:	81 e0       	ldi	r24, 0x01	; 1
 a08:	1a 96       	adiw	r26, 0x0a	; 10
 a0a:	8c 93       	st	X, r24
 a0c:	da 01       	movw	r26, r20
 a0e:	8c 91       	ld	r24, X
 a10:	84 60       	ori	r24, 0x04	; 4
 a12:	8c 93       	st	X, r24
 a14:	20 ef       	ldi	r18, 0xF0	; 240
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	d9 01       	movw	r26, r18
 a1a:	8c 91       	ld	r24, X
 a1c:	84 60       	ori	r24, 0x04	; 4
 a1e:	8c 93       	st	X, r24
          Can_clear_rplv();
 a20:	80 81       	ld	r24, Z
 a22:	8f 7d       	andi	r24, 0xDF	; 223
 a24:	80 83       	st	Z, r24
          Can_set_idemsk();
 a26:	da 01       	movw	r26, r20
 a28:	8c 91       	ld	r24, X
 a2a:	81 60       	ori	r24, 0x01	; 1
 a2c:	8c 93       	st	X, r24
          Can_config_rx();       
 a2e:	80 81       	ld	r24, Z
 a30:	8f 73       	andi	r24, 0x3F	; 63
 a32:	80 83       	st	Z, r24
 a34:	80 81       	ld	r24, Z
 a36:	80 68       	ori	r24, 0x80	; 128
 a38:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 a3a:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 a3c:	16 c1       	rjmp	.+556    	; 0xc6a <__stack+0x36b>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	2a ef       	ldi	r18, 0xFA	; 250
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	d8 01       	movw	r26, r16
 a46:	17 96       	adiw	r26, 0x07	; 7
 a48:	ed 91       	ld	r30, X+
 a4a:	fc 91       	ld	r31, X
 a4c:	18 97       	sbiw	r26, 0x08	; 8
 a4e:	e8 0f       	add	r30, r24
 a50:	f1 1d       	adc	r31, r1
 a52:	90 81       	ld	r25, Z
 a54:	f9 01       	movw	r30, r18
 a56:	90 83       	st	Z, r25
 a58:	8f 5f       	subi	r24, 0xFF	; 255
 a5a:	16 96       	adiw	r26, 0x06	; 6
 a5c:	9c 91       	ld	r25, X
 a5e:	89 17       	cp	r24, r25
 a60:	88 f3       	brcs	.-30     	; 0xa44 <__stack+0x145>
          u32_temp=0; Can_set_ext_msk(u32_temp);
 a62:	19 82       	std	Y+1, r1	; 0x01
 a64:	1a 82       	std	Y+2, r1	; 0x02
 a66:	1b 82       	std	Y+3, r1	; 0x03
 a68:	1c 82       	std	Y+4, r1	; 0x04
 a6a:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 a6e:	8b 81       	ldd	r24, Y+3	; 0x03
 a70:	98 2f       	mov	r25, r24
 a72:	99 0f       	add	r25, r25
 a74:	99 0f       	add	r25, r25
 a76:	99 0f       	add	r25, r25
 a78:	8a 81       	ldd	r24, Y+2	; 0x02
 a7a:	82 95       	swap	r24
 a7c:	86 95       	lsr	r24
 a7e:	87 70       	andi	r24, 0x07	; 7
 a80:	89 0f       	add	r24, r25
 a82:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 a86:	8a 81       	ldd	r24, Y+2	; 0x02
 a88:	98 2f       	mov	r25, r24
 a8a:	99 0f       	add	r25, r25
 a8c:	99 0f       	add	r25, r25
 a8e:	99 0f       	add	r25, r25
 a90:	89 81       	ldd	r24, Y+1	; 0x01
 a92:	82 95       	swap	r24
 a94:	86 95       	lsr	r24
 a96:	87 70       	andi	r24, 0x07	; 7
 a98:	89 0f       	add	r24, r25
 a9a:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 a9e:	89 81       	ldd	r24, Y+1	; 0x01
 aa0:	88 0f       	add	r24, r24
 aa2:	88 0f       	add	r24, r24
 aa4:	88 0f       	add	r24, r24
 aa6:	44 ef       	ldi	r20, 0xF4	; 244
 aa8:	50 e0       	ldi	r21, 0x00	; 0
 aaa:	da 01       	movw	r26, r20
 aac:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 aae:	ef ee       	ldi	r30, 0xEF	; 239
 ab0:	f0 e0       	ldi	r31, 0x00	; 0
 ab2:	90 81       	ld	r25, Z
 ab4:	d8 01       	movw	r26, r16
 ab6:	16 96       	adiw	r26, 0x06	; 6
 ab8:	8c 91       	ld	r24, X
 aba:	16 97       	sbiw	r26, 0x06	; 6
 abc:	89 2b       	or	r24, r25
 abe:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 ac0:	81 e0       	ldi	r24, 0x01	; 1
 ac2:	1a 96       	adiw	r26, 0x0a	; 10
 ac4:	8c 93       	st	X, r24
 ac6:	da 01       	movw	r26, r20
 ac8:	8c 91       	ld	r24, X
 aca:	84 60       	ori	r24, 0x04	; 4
 acc:	8c 93       	st	X, r24
 ace:	20 ef       	ldi	r18, 0xF0	; 240
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	d9 01       	movw	r26, r18
 ad4:	8c 91       	ld	r24, X
 ad6:	84 60       	ori	r24, 0x04	; 4
 ad8:	8c 93       	st	X, r24
          Can_set_rplv();
 ada:	80 81       	ld	r24, Z
 adc:	80 62       	ori	r24, 0x20	; 32
 ade:	80 83       	st	Z, r24
          Can_clear_idemsk();
 ae0:	da 01       	movw	r26, r20
 ae2:	8c 91       	ld	r24, X
 ae4:	8e 7f       	andi	r24, 0xFE	; 254
 ae6:	8c 93       	st	X, r24
          Can_config_rx();       
 ae8:	80 81       	ld	r24, Z
 aea:	8f 73       	andi	r24, 0x3F	; 63
 aec:	80 83       	st	Z, r24
 aee:	80 81       	ld	r24, Z
 af0:	80 68       	ori	r24, 0x80	; 128
 af2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 af4:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 af6:	b9 c0       	rjmp	.+370    	; 0xc6a <__stack+0x36b>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 af8:	f8 01       	movw	r30, r16
 afa:	83 85       	ldd	r24, Z+11	; 0x0b
 afc:	88 23       	and	r24, r24
 afe:	81 f1       	breq	.+96     	; 0xb60 <__stack+0x261>
 b00:	85 81       	ldd	r24, Z+5	; 0x05
 b02:	98 2f       	mov	r25, r24
 b04:	99 0f       	add	r25, r25
 b06:	99 0f       	add	r25, r25
 b08:	99 0f       	add	r25, r25
 b0a:	84 81       	ldd	r24, Z+4	; 0x04
 b0c:	82 95       	swap	r24
 b0e:	86 95       	lsr	r24
 b10:	87 70       	andi	r24, 0x07	; 7
 b12:	89 0f       	add	r24, r25
 b14:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 b18:	84 81       	ldd	r24, Z+4	; 0x04
 b1a:	98 2f       	mov	r25, r24
 b1c:	99 0f       	add	r25, r25
 b1e:	99 0f       	add	r25, r25
 b20:	99 0f       	add	r25, r25
 b22:	83 81       	ldd	r24, Z+3	; 0x03
 b24:	82 95       	swap	r24
 b26:	86 95       	lsr	r24
 b28:	87 70       	andi	r24, 0x07	; 7
 b2a:	89 0f       	add	r24, r25
 b2c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 b30:	83 81       	ldd	r24, Z+3	; 0x03
 b32:	98 2f       	mov	r25, r24
 b34:	99 0f       	add	r25, r25
 b36:	99 0f       	add	r25, r25
 b38:	99 0f       	add	r25, r25
 b3a:	82 81       	ldd	r24, Z+2	; 0x02
 b3c:	82 95       	swap	r24
 b3e:	86 95       	lsr	r24
 b40:	87 70       	andi	r24, 0x07	; 7
 b42:	89 0f       	add	r24, r25
 b44:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 b48:	82 81       	ldd	r24, Z+2	; 0x02
 b4a:	88 0f       	add	r24, r24
 b4c:	88 0f       	add	r24, r24
 b4e:	88 0f       	add	r24, r24
 b50:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 b54:	ef ee       	ldi	r30, 0xEF	; 239
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	80 81       	ld	r24, Z
 b5a:	80 61       	ori	r24, 0x10	; 16
 b5c:	80 83       	st	Z, r24
 b5e:	17 c0       	rjmp	.+46     	; 0xb8e <__stack+0x28f>
          else              { Can_set_std_id(cmd->id.std);}
 b60:	93 81       	ldd	r25, Z+3	; 0x03
 b62:	82 81       	ldd	r24, Z+2	; 0x02
 b64:	86 95       	lsr	r24
 b66:	86 95       	lsr	r24
 b68:	86 95       	lsr	r24
 b6a:	b0 e2       	ldi	r27, 0x20	; 32
 b6c:	9b 9f       	mul	r25, r27
 b6e:	80 0d       	add	r24, r0
 b70:	11 24       	eor	r1, r1
 b72:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 b76:	f8 01       	movw	r30, r16
 b78:	82 81       	ldd	r24, Z+2	; 0x02
 b7a:	82 95       	swap	r24
 b7c:	88 0f       	add	r24, r24
 b7e:	80 7e       	andi	r24, 0xE0	; 224
 b80:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 b84:	ef ee       	ldi	r30, 0xEF	; 239
 b86:	f0 e0       	ldi	r31, 0x00	; 0
 b88:	80 81       	ld	r24, Z
 b8a:	8f 7e       	andi	r24, 0xEF	; 239
 b8c:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 b8e:	d8 01       	movw	r26, r16
 b90:	16 96       	adiw	r26, 0x06	; 6
 b92:	8c 91       	ld	r24, X
 b94:	88 23       	and	r24, r24
 b96:	91 f0       	breq	.+36     	; 0xbbc <__stack+0x2bd>
 b98:	80 e0       	ldi	r24, 0x00	; 0
 b9a:	2a ef       	ldi	r18, 0xFA	; 250
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	d8 01       	movw	r26, r16
 ba0:	17 96       	adiw	r26, 0x07	; 7
 ba2:	ed 91       	ld	r30, X+
 ba4:	fc 91       	ld	r31, X
 ba6:	18 97       	sbiw	r26, 0x08	; 8
 ba8:	e8 0f       	add	r30, r24
 baa:	f1 1d       	adc	r31, r1
 bac:	90 81       	ld	r25, Z
 bae:	f9 01       	movw	r30, r18
 bb0:	90 83       	st	Z, r25
 bb2:	8f 5f       	subi	r24, 0xFF	; 255
 bb4:	16 96       	adiw	r26, 0x06	; 6
 bb6:	9c 91       	ld	r25, X
 bb8:	89 17       	cp	r24, r25
 bba:	88 f3       	brcs	.-30     	; 0xb9e <__stack+0x29f>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 bbc:	8f ef       	ldi	r24, 0xFF	; 255
 bbe:	9f ef       	ldi	r25, 0xFF	; 255
 bc0:	dc 01       	movw	r26, r24
 bc2:	89 83       	std	Y+1, r24	; 0x01
 bc4:	9a 83       	std	Y+2, r25	; 0x02
 bc6:	ab 83       	std	Y+3, r26	; 0x03
 bc8:	bc 83       	std	Y+4, r27	; 0x04
 bca:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 bce:	8b 81       	ldd	r24, Y+3	; 0x03
 bd0:	98 2f       	mov	r25, r24
 bd2:	99 0f       	add	r25, r25
 bd4:	99 0f       	add	r25, r25
 bd6:	99 0f       	add	r25, r25
 bd8:	8a 81       	ldd	r24, Y+2	; 0x02
 bda:	82 95       	swap	r24
 bdc:	86 95       	lsr	r24
 bde:	87 70       	andi	r24, 0x07	; 7
 be0:	89 0f       	add	r24, r25
 be2:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 be6:	8a 81       	ldd	r24, Y+2	; 0x02
 be8:	98 2f       	mov	r25, r24
 bea:	99 0f       	add	r25, r25
 bec:	99 0f       	add	r25, r25
 bee:	99 0f       	add	r25, r25
 bf0:	89 81       	ldd	r24, Y+1	; 0x01
 bf2:	82 95       	swap	r24
 bf4:	86 95       	lsr	r24
 bf6:	87 70       	andi	r24, 0x07	; 7
 bf8:	89 0f       	add	r24, r25
 bfa:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 bfe:	89 81       	ldd	r24, Y+1	; 0x01
 c00:	88 0f       	add	r24, r24
 c02:	88 0f       	add	r24, r24
 c04:	88 0f       	add	r24, r24
 c06:	44 ef       	ldi	r20, 0xF4	; 244
 c08:	50 e0       	ldi	r21, 0x00	; 0
 c0a:	da 01       	movw	r26, r20
 c0c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 c0e:	ef ee       	ldi	r30, 0xEF	; 239
 c10:	f0 e0       	ldi	r31, 0x00	; 0
 c12:	90 81       	ld	r25, Z
 c14:	d8 01       	movw	r26, r16
 c16:	16 96       	adiw	r26, 0x06	; 6
 c18:	8c 91       	ld	r24, X
 c1a:	16 97       	sbiw	r26, 0x06	; 6
 c1c:	89 2b       	or	r24, r25
 c1e:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 c20:	81 e0       	ldi	r24, 0x01	; 1
 c22:	1a 96       	adiw	r26, 0x0a	; 10
 c24:	8c 93       	st	X, r24
 c26:	da 01       	movw	r26, r20
 c28:	8c 91       	ld	r24, X
 c2a:	84 60       	ori	r24, 0x04	; 4
 c2c:	8c 93       	st	X, r24
 c2e:	20 ef       	ldi	r18, 0xF0	; 240
 c30:	30 e0       	ldi	r19, 0x00	; 0
 c32:	d9 01       	movw	r26, r18
 c34:	8c 91       	ld	r24, X
 c36:	84 60       	ori	r24, 0x04	; 4
 c38:	8c 93       	st	X, r24
          Can_set_rplv();
 c3a:	80 81       	ld	r24, Z
 c3c:	80 62       	ori	r24, 0x20	; 32
 c3e:	80 83       	st	Z, r24
          Can_set_idemsk();
 c40:	da 01       	movw	r26, r20
 c42:	8c 91       	ld	r24, X
 c44:	81 60       	ori	r24, 0x01	; 1
 c46:	8c 93       	st	X, r24
          Can_config_rx();       
 c48:	80 81       	ld	r24, Z
 c4a:	8f 73       	andi	r24, 0x3F	; 63
 c4c:	80 83       	st	Z, r24
 c4e:	80 81       	ld	r24, Z
 c50:	80 68       	ori	r24, 0x80	; 128
 c52:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 c54:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 c56:	09 c0       	rjmp	.+18     	; 0xc6a <__stack+0x36b>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
 c58:	f8 01       	movw	r30, r16
 c5a:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 c5c:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
 c5e:	05 c0       	rjmp	.+10     	; 0xc6a <__stack+0x36b>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
 c60:	8f e1       	ldi	r24, 0x1F	; 31
 c62:	d8 01       	movw	r26, r16
 c64:	19 96       	adiw	r26, 0x09	; 9
 c66:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
 c68:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
 c6a:	0f 90       	pop	r0
 c6c:	0f 90       	pop	r0
 c6e:	0f 90       	pop	r0
 c70:	0f 90       	pop	r0
 c72:	df 91       	pop	r29
 c74:	cf 91       	pop	r28
 c76:	1f 91       	pop	r17
 c78:	0f 91       	pop	r16
 c7a:	08 95       	ret

00000c7c <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
 c7c:	ef 92       	push	r14
 c7e:	ff 92       	push	r15
 c80:	1f 93       	push	r17
 c82:	cf 93       	push	r28
 c84:	df 93       	push	r29
 c86:	fc 01       	movw	r30, r24
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
 c88:	91 85       	ldd	r25, Z+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
 c8a:	99 23       	and	r25, r25
 c8c:	09 f4       	brne	.+2      	; 0xc90 <can_get_status+0x14>
 c8e:	92 c0       	rjmp	.+292    	; 0xdb4 <can_get_status+0x138>
 c90:	9f 31       	cpi	r25, 0x1F	; 31
 c92:	09 f4       	brne	.+2      	; 0xc96 <can_get_status+0x1a>
 c94:	91 c0       	rjmp	.+290    	; 0xdb8 <can_get_status+0x13c>
 c96:	9f 3f       	cpi	r25, 0xFF	; 255
 c98:	09 f4       	brne	.+2      	; 0xc9c <can_get_status+0x20>
 c9a:	90 c0       	rjmp	.+288    	; 0xdbc <can_get_status+0x140>
 c9c:	ef 01       	movw	r28, r30
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
 c9e:	80 81       	ld	r24, Z
 ca0:	82 95       	swap	r24
 ca2:	80 7f       	andi	r24, 0xF0	; 240
 ca4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    a_status = can_get_mob_status();
 ca8:	0e 94 8e 00 	call	0x11c	; 0x11c <can_get_mob_status>
 cac:	18 2f       	mov	r17, r24
    
    switch (a_status)
 cae:	80 32       	cpi	r24, 0x20	; 32
 cb0:	59 f0       	breq	.+22     	; 0xcc8 <can_get_status+0x4c>
 cb2:	20 f4       	brcc	.+8      	; 0xcbc <can_get_status+0x40>
 cb4:	88 23       	and	r24, r24
 cb6:	09 f4       	brne	.+2      	; 0xcba <can_get_status+0x3e>
 cb8:	83 c0       	rjmp	.+262    	; 0xdc0 <can_get_status+0x144>
 cba:	72 c0       	rjmp	.+228    	; 0xda0 <can_get_status+0x124>
 cbc:	80 34       	cpi	r24, 0x40	; 64
 cbe:	09 f4       	brne	.+2      	; 0xcc2 <can_get_status+0x46>
 cc0:	64 c0       	rjmp	.+200    	; 0xd8a <can_get_status+0x10e>
 cc2:	80 3a       	cpi	r24, 0xA0	; 160
 cc4:	09 f0       	breq	.+2      	; 0xcc8 <can_get_status+0x4c>
 cc6:	6c c0       	rjmp	.+216    	; 0xda0 <can_get_status+0x124>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
 cc8:	0f 2e       	mov	r0, r31
 cca:	ff ee       	ldi	r31, 0xEF	; 239
 ccc:	ef 2e       	mov	r14, r31
 cce:	f1 2c       	mov	r15, r1
 cd0:	f0 2d       	mov	r31, r0
 cd2:	f7 01       	movw	r30, r14
 cd4:	80 81       	ld	r24, Z
 cd6:	8f 70       	andi	r24, 0x0F	; 15
 cd8:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
 cda:	8f 81       	ldd	r24, Y+7	; 0x07
 cdc:	98 85       	ldd	r25, Y+8	; 0x08
 cde:	0e 94 a6 00 	call	0x14c	; 0x14c <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
 ce2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 ce6:	82 fb       	bst	r24, 2
 ce8:	88 27       	eor	r24, r24
 cea:	80 f9       	bld	r24, 0
 cec:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
 cee:	f7 01       	movw	r30, r14
 cf0:	80 81       	ld	r24, Z
 cf2:	84 ff       	sbrs	r24, 4
 cf4:	2d c0       	rjmp	.+90     	; 0xd50 <can_get_status+0xd4>
            {
                cmd->ctrl.ide = 1; // extended frame
 cf6:	81 e0       	ldi	r24, 0x01	; 1
 cf8:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
 cfa:	e3 ef       	ldi	r30, 0xF3	; 243
 cfc:	f0 e0       	ldi	r31, 0x00	; 0
 cfe:	80 81       	ld	r24, Z
 d00:	86 95       	lsr	r24
 d02:	86 95       	lsr	r24
 d04:	86 95       	lsr	r24
 d06:	8d 83       	std	Y+5, r24	; 0x05
 d08:	a2 ef       	ldi	r26, 0xF2	; 242
 d0a:	b0 e0       	ldi	r27, 0x00	; 0
 d0c:	8c 91       	ld	r24, X
 d0e:	90 81       	ld	r25, Z
 d10:	86 95       	lsr	r24
 d12:	86 95       	lsr	r24
 d14:	86 95       	lsr	r24
 d16:	f0 e2       	ldi	r31, 0x20	; 32
 d18:	9f 9f       	mul	r25, r31
 d1a:	80 0d       	add	r24, r0
 d1c:	11 24       	eor	r1, r1
 d1e:	8c 83       	std	Y+4, r24	; 0x04
 d20:	e1 ef       	ldi	r30, 0xF1	; 241
 d22:	f0 e0       	ldi	r31, 0x00	; 0
 d24:	80 81       	ld	r24, Z
 d26:	9c 91       	ld	r25, X
 d28:	86 95       	lsr	r24
 d2a:	86 95       	lsr	r24
 d2c:	86 95       	lsr	r24
 d2e:	20 e2       	ldi	r18, 0x20	; 32
 d30:	92 9f       	mul	r25, r18
 d32:	80 0d       	add	r24, r0
 d34:	11 24       	eor	r1, r1
 d36:	8b 83       	std	Y+3, r24	; 0x03
 d38:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 d3c:	90 81       	ld	r25, Z
 d3e:	86 95       	lsr	r24
 d40:	86 95       	lsr	r24
 d42:	86 95       	lsr	r24
 d44:	e0 e2       	ldi	r30, 0x20	; 32
 d46:	9e 9f       	mul	r25, r30
 d48:	80 0d       	add	r24, r0
 d4a:	11 24       	eor	r1, r1
 d4c:	8a 83       	std	Y+2, r24	; 0x02
 d4e:	13 c0       	rjmp	.+38     	; 0xd76 <can_get_status+0xfa>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
 d50:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
 d52:	e3 ef       	ldi	r30, 0xF3	; 243
 d54:	f0 e0       	ldi	r31, 0x00	; 0
 d56:	80 81       	ld	r24, Z
 d58:	82 95       	swap	r24
 d5a:	86 95       	lsr	r24
 d5c:	87 70       	andi	r24, 0x07	; 7
 d5e:	8b 83       	std	Y+3, r24	; 0x03
 d60:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 d64:	80 81       	ld	r24, Z
 d66:	92 95       	swap	r25
 d68:	96 95       	lsr	r25
 d6a:	97 70       	andi	r25, 0x07	; 7
 d6c:	88 0f       	add	r24, r24
 d6e:	88 0f       	add	r24, r24
 d70:	88 0f       	add	r24, r24
 d72:	89 0f       	add	r24, r25
 d74:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
 d76:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
 d78:	ef ee       	ldi	r30, 0xEF	; 239
 d7a:	f0 e0       	ldi	r31, 0x00	; 0
 d7c:	80 81       	ld	r24, Z
 d7e:	8f 73       	andi	r24, 0x3F	; 63
 d80:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 d82:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
            rtn_val = CAN_STATUS_COMPLETED;
 d86:	80 e0       	ldi	r24, 0x00	; 0
            break;
 d88:	1c c0       	rjmp	.+56     	; 0xdc2 <can_get_status+0x146>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
 d8a:	80 e4       	ldi	r24, 0x40	; 64
 d8c:	89 87       	std	Y+9, r24	; 0x09
            Can_mob_abort();        // Freed the MOB
 d8e:	ef ee       	ldi	r30, 0xEF	; 239
 d90:	f0 e0       	ldi	r31, 0x00	; 0
 d92:	80 81       	ld	r24, Z
 d94:	8f 73       	andi	r24, 0x3F	; 63
 d96:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 d98:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
            rtn_val = CAN_STATUS_COMPLETED;
 d9c:	80 e0       	ldi	r24, 0x00	; 0
            break;
 d9e:	11 c0       	rjmp	.+34     	; 0xdc2 <can_get_status+0x146>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
 da0:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
 da2:	ef ee       	ldi	r30, 0xEF	; 239
 da4:	f0 e0       	ldi	r31, 0x00	; 0
 da6:	80 81       	ld	r24, Z
 da8:	8f 73       	andi	r24, 0x3F	; 63
 daa:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 dac:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
            rtn_val = CAN_STATUS_ERROR;
 db0:	82 e0       	ldi	r24, 0x02	; 2
            break;
 db2:	07 c0       	rjmp	.+14     	; 0xdc2 <can_get_status+0x146>
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
 db4:	82 e0       	ldi	r24, 0x02	; 2
 db6:	05 c0       	rjmp	.+10     	; 0xdc2 <can_get_status+0x146>
 db8:	82 e0       	ldi	r24, 0x02	; 2
 dba:	03 c0       	rjmp	.+6      	; 0xdc2 <can_get_status+0x146>
 dbc:	82 e0       	ldi	r24, 0x02	; 2
 dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <can_get_status+0x146>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
 dc0:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
 dc2:	df 91       	pop	r29
 dc4:	cf 91       	pop	r28
 dc6:	1f 91       	pop	r17
 dc8:	ff 90       	pop	r15
 dca:	ef 90       	pop	r14
 dcc:	08 95       	ret

00000dce <io_init>:
	can_init(0);
}

void io_init(void) {
	
	bit_set(DDRD, BIT(1));
 dce:	51 9a       	sbi	0x0a, 1	; 10
	bit_set(DDRD, BIT(7));
 dd0:	57 9a       	sbi	0x0a, 7	; 10
	bit_set(PORTD, BIT(1));	  //Turn on LED on the node
 dd2:	59 9a       	sbi	0x0b, 1	; 11
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0b00000100; // 0x40;
 dd4:	84 e0       	ldi	r24, 0x04	; 4
 dd6:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00; //
 dd8:	18 b8       	out	0x08, r1	; 8
 dda:	08 95       	ret

00000ddc <sys_init>:



void sys_init(void) {
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80; //Clock prescaler register - Clock prescaler set enable
 ddc:	e1 e6       	ldi	r30, 0x61	; 97
 dde:	f0 e0       	ldi	r31, 0x00	; 0
 de0:	80 e8       	ldi	r24, 0x80	; 128
 de2:	80 83       	st	Z, r24
	CLKPR = 0x00; //See datasheet: set prescaler to 1
 de4:	10 82       	st	Z, r1
	
	io_init();
 de6:	0e 94 e7 06 	call	0xdce	; 0xdce <io_init>
	can_init(0);
 dea:	80 e0       	ldi	r24, 0x00	; 0
 dec:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <can_init>
 df0:	08 95       	ret

00000df2 <main>:

void sys_init(void);
void io_init(void);

int main(void)
{
 df2:	cf 93       	push	r28
 df4:	df 93       	push	r29
 df6:	cd b7       	in	r28, 0x3d	; 61
 df8:	de b7       	in	r29, 0x3e	; 62
 dfa:	2e 97       	sbiw	r28, 0x0e	; 14
 dfc:	0f b6       	in	r0, 0x3f	; 63
 dfe:	f8 94       	cli
 e00:	de bf       	out	0x3e, r29	; 62
 e02:	0f be       	out	0x3f, r0	; 63
 e04:	cd bf       	out	0x3d, r28	; 61
	sys_init();  //Initialize I/O, CAN etc.
 e06:	0e 94 ee 06 	call	0xddc	; 0xddc <sys_init>

	sei();		// Enable interrupts
 e0a:	78 94       	sei

	uint8_t incoming_msg_buffer[DATA_BUFFER_SIZE]; //Buffer to store payload from the buffer
	st_cmd_t incoming_msg; //message object to store incoming messages

	// Se
	incoming_msg.pt_data = &incoming_msg_buffer;
 e0c:	ce 01       	movw	r24, r28
 e0e:	01 96       	adiw	r24, 0x01	; 1
 e10:	9b 87       	std	Y+11, r25	; 0x0b
 e12:	8a 87       	std	Y+10, r24	; 0x0a
	incoming_msg.status = 0; 
 e14:	1c 86       	std	Y+12, r1	; 0x0c
	for (i=0; i<DATA_BUFFER_SIZE; i++) 
	{
	incoming_msg_buffer[i]= 0x00;
	};   //Clear data buffer

	incoming_msg.id.std = 0x80; // CAN_ID on hte node
 e16:	68 94       	set
 e18:	ee 24       	eor	r14, r14
 e1a:	e7 f8       	bld	r14, 7
 e1c:	f1 2c       	mov	r15, r1
	incoming_msg.ctrl.ide = 0; // This message object accepts only standard (2.0A) CAN frames
	incoming_msg.ctrl.rtr = 0; // this message object is not requesting a remote node to transmit data back
	incoming_msg.dlc = DATA_BUFFER_SIZE; // Number of bytes (8 max) of data to expect
 e1e:	02 e0       	ldi	r16, 0x02	; 2
	incoming_msg.cmd = CMD_RX; // assign this as a "Receive Standard (2.0A) CAN frame" message object
 e20:	14 e0       	ldi	r17, 0x04	; 4
	while (1)
	{

	for (i=0; i<DATA_BUFFER_SIZE; i++) 
	{
	incoming_msg_buffer[i]= 0x00;
 e22:	19 82       	std	Y+1, r1	; 0x01
 e24:	1a 82       	std	Y+2, r1	; 0x02
	};   //Clear data buffer

	incoming_msg.id.std = 0x80; // CAN_ID on hte node
 e26:	fe 82       	std	Y+6, r15	; 0x06
 e28:	ed 82       	std	Y+5, r14	; 0x05
	incoming_msg.ctrl.ide = 0; // This message object accepts only standard (2.0A) CAN frames
 e2a:	1e 86       	std	Y+14, r1	; 0x0e
	incoming_msg.ctrl.rtr = 0; // this message object is not requesting a remote node to transmit data back
 e2c:	1d 86       	std	Y+13, r1	; 0x0d
	incoming_msg.dlc = DATA_BUFFER_SIZE; // Number of bytes (8 max) of data to expect
 e2e:	09 87       	std	Y+9, r16	; 0x09
	incoming_msg.cmd = CMD_RX; // assign this as a "Receive Standard (2.0A) CAN frame" message object
 e30:	1c 83       	std	Y+4, r17	; 0x04

	while(can_cmd(&incoming_msg) != CAN_CMD_ACCEPTED); //Wait for the MOb to configure
 e32:	ce 01       	movw	r24, r28
 e34:	03 96       	adiw	r24, 0x03	; 3
 e36:	0e 94 de 00 	call	0x1bc	; 0x1bc <can_cmd>
 e3a:	81 11       	cpse	r24, r1
 e3c:	fa cf       	rjmp	.-12     	; 0xe32 <main+0x40>

	while(can_get_status(&incoming_msg) != CAN_STATUS_COMPLETED); //Wait for message to arrive 
 e3e:	ce 01       	movw	r24, r28
 e40:	03 96       	adiw	r24, 0x03	; 3
 e42:	0e 94 3e 06 	call	0xc7c	; 0xc7c <can_get_status>
 e46:	81 11       	cpse	r24, r1
 e48:	fa cf       	rjmp	.-12     	; 0xe3e <main+0x4c>

		bit_flip(PORTD, BIT(7)); //Turn on/off LED on board
 e4a:	8b b1       	in	r24, 0x0b	; 11
 e4c:	80 58       	subi	r24, 0x80	; 128
 e4e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 e50:	8f ef       	ldi	r24, 0xFF	; 255
 e52:	98 e0       	ldi	r25, 0x08	; 8
 e54:	01 97       	sbiw	r24, 0x01	; 1
 e56:	f1 f7       	brne	.-4      	; 0xe54 <main+0x62>
 e58:	00 c0       	rjmp	.+0      	; 0xe5a <main+0x68>
 e5a:	00 00       	nop
 e5c:	e2 cf       	rjmp	.-60     	; 0xe22 <main+0x30>

00000e5e <__tablejump2__>:
 e5e:	ee 0f       	add	r30, r30
 e60:	ff 1f       	adc	r31, r31
 e62:	05 90       	lpm	r0, Z+
 e64:	f4 91       	lpm	r31, Z
 e66:	e0 2d       	mov	r30, r0
 e68:	09 94       	ijmp

00000e6a <_exit>:
 e6a:	f8 94       	cli

00000e6c <__stop_program>:
 e6c:	ff cf       	rjmp	.-2      	; 0xe6c <__stop_program>
